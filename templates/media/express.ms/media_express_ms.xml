<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
    <version>5.0</version>
    <date>2021-04-28T10:05:27Z</date>
    <media_types>
        <media_type>
            <name>Express.ms</name>
            <type>WEBHOOK</type>
            <parameters>
                <parameter>
                    <name>event_source</name>
                    <value>{EVENT.SOURCE}</value>
                </parameter>
                <parameter>
                    <name>event_update_status</name>
                    <value>{EVENT.UPDATE.STATUS}</value>
                </parameter>
                <parameter>
                    <name>event_value</name>
                    <value>{EVENT.VALUE}</value>
                </parameter>
                <parameter>
                    <name>express_message</name>
                    <value>{ALERT.MESSAGE}</value>
                </parameter>
                <parameter>
                    <name>express_send_to</name>
                    <value>{ALERT.SENDTO}</value>
                </parameter>
                <parameter>
                    <name>express_tags</name>
                    <value>{EVENT.TAGSJSON}</value>
                </parameter>
                <parameter>
                    <name>express_token</name>
                    <value>&lt;PLACE BOT TOKEN&gt;</value>
                </parameter>
                <parameter>
                    <name>express_url</name>
                    <value>&lt;PLACE INSTANCE URL&gt;</value>
                </parameter>
            </parameters>
            <script>var Express = {&#13;
    params: [],&#13;
&#13;
    setParams: function (params) {&#13;
        if (typeof params !== 'object') {&#13;
            return;&#13;
        }&#13;
&#13;
        Express.params = params;&#13;
&#13;
        if (typeof Express.params.url === 'string' &amp;&amp; !Express.params.url.endsWith('/')) {&#13;
            Express.params.url += '/';&#13;
        }&#13;
    },&#13;
&#13;
    setProxy: function (HTTPProxy) {&#13;
        Express.HTTPProxy = HTTPProxy;&#13;
    },&#13;
&#13;
    request: function (query, data) {&#13;
        var response,&#13;
            url = Express.params.url + query,&#13;
            request = new CurlHttpRequest();&#13;
&#13;
        request.AddHeader('Content-Type: application/json');&#13;
        request.AddHeader('Authorization: Bearer ' + Express.params.token);&#13;
&#13;
        if (typeof Express.HTTPProxy !== 'undefined' &amp;&amp; Express.HTTPProxy !== '') {&#13;
            request.SetProxy(Express.HTTPProxy);&#13;
        }&#13;
&#13;
        if (typeof data !== 'undefined') {&#13;
            data = JSON.stringify(data);&#13;
        }&#13;
&#13;
        Zabbix.Log(4, '[ Express Webhook ] Sending request: ' + url +&#13;
            ((typeof data === 'string') ? ('\n' + data) : ''));&#13;
&#13;
        response = request.Post(url, data);&#13;
&#13;
        Zabbix.Log(4, '[ Express Webhook ] Received response with status code ' +&#13;
            request.Status() + '\n' + response);&#13;
&#13;
        if (response !== null) {&#13;
            try {&#13;
                response = JSON.parse(response);&#13;
            }&#13;
            catch (error) {&#13;
                Zabbix.Log(4, '[ Express Webhook ] Failed to parse response received from Express');&#13;
                response = {};&#13;
            }&#13;
        }&#13;
&#13;
        if (response.status !== 'ok') {&#13;
            var message = 'Request failed with status code ' + request.Status();&#13;
&#13;
            if (typeof response.reason !== 'undefined') {&#13;
                message += ': ' + JSON.stringify(response.reason);&#13;
            }&#13;
&#13;
            throw message + '. Check debug log for more information.';&#13;
        }&#13;
&#13;
        return response.result;&#13;
    },&#13;
&#13;
    postMessage: function (is_problem) {&#13;
        var data,&#13;
            url,&#13;
            result = {tags: {}},&#13;
            response;&#13;
&#13;
        if (is_problem) {&#13;
            data = {&#13;
                group_chat_id: Express.params.send_to,&#13;
                notification: {&#13;
                    status: 'ok',&#13;
                    body: Express.params.message&#13;
                }&#13;
            };&#13;
            url = 'api/v3/botx/notification/callback/direct';&#13;
        }&#13;
        else {&#13;
            data = {&#13;
                reply: {&#13;
                    status: 'ok',&#13;
                    body: Express.params.message&#13;
                }&#13;
            };&#13;
            url = 'api/v3/botx/events/reply_event';&#13;
&#13;
            try {&#13;
                var tags = JSON.parse(Express.params.tags);&#13;
            }&#13;
            catch (error) {&#13;
                throw 'Value of &quot;express_tags&quot; is not JSON. Value: ' + Express.params.tags + '.';&#13;
            }&#13;
&#13;
            tags.forEach(function(tag) {&#13;
                if (tag.tag === '__zbx_ex_sync_id_' + Express.params.send_to) {&#13;
                    data.source_sync_id = tag.value;&#13;
                }&#13;
            });&#13;
&#13;
            if (!data.source_sync_id) {&#13;
                throw 'Cannot update data. sync_id for the provided sender is unknown.';&#13;
            }&#13;
        }&#13;
&#13;
        response = Express.request(url, data);&#13;
&#13;
        if (is_problem &amp;&amp; response.sync_id) {&#13;
            result.tags['__zbx_ex_sync_id_' + Express.params.send_to] = response.sync_id;&#13;
&#13;
            return JSON.stringify(result);&#13;
        }&#13;
        else {&#13;
            return 'OK';&#13;
        }&#13;
    }&#13;
};&#13;
&#13;
try {&#13;
    var params = JSON.parse(value),&#13;
        express = {},&#13;
        required_params = [&#13;
            'express_url', 'express_send_to', 'express_message', 'express_tags', 'express_token',&#13;
            'event_source', 'event_value', 'event_update_status'&#13;
        ];&#13;
&#13;
    Object.keys(params)&#13;
        .forEach(function (key) {&#13;
            if (key.startsWith('express_')) {&#13;
                express[key.substring(8)] = params[key];&#13;
            }&#13;
&#13;
            if (required_params.indexOf(key) !== -1&#13;
                    &amp;&amp; (params[key].trim() === '' || params[key] === '{ALERT.SENDTO}')) {&#13;
                throw 'Parameter &quot;' + key + '&quot; can\'t be empty.';&#13;
            }&#13;
        });&#13;
&#13;
    if ([0, 1, 2, 3].indexOf(parseInt(params.event_source)) === -1) {&#13;
        throw 'Incorrect &quot;event_source&quot; parameter given: ' + params.event_source + '\nMust be 0-3.';&#13;
    }&#13;
&#13;
    // Forcing event_value and event_update_status for non trigger-based events.&#13;
    if (params.event_source !== '0' ) {&#13;
        params.event_value = '1';&#13;
        params.event_update_status = '0';&#13;
    }&#13;
&#13;
    if (params.event_value !== '0' &amp;&amp; params.event_value !== '1') {&#13;
        throw 'Incorrect &quot;event_value&quot; parameter given: ' + params.event_value + '\nMust be 0 or 1.';&#13;
    }&#13;
&#13;
    // Check {EVENT.UPDATE.STATUS} only for trigger-based events.&#13;
    if (params.event_update_status !== '0' &amp;&amp; params.event_update_status !== '1' &amp;&amp; params.event_source === '0') {&#13;
        throw 'Incorrect &quot;event_update_status&quot; parameter given: ' + params.event_update_status + '\nMust be 0 or 1.';&#13;
    }&#13;
&#13;
    Express.setParams(express);&#13;
    Express.setProxy(params.HTTPProxy);&#13;
&#13;
    return Express.postMessage(params.event_value === '1' &amp;&amp; params.event_update_status === '0');&#13;
}&#13;
catch (error) {&#13;
    Zabbix.Log(3, '[ Express Webhook ] ERROR: ' + error);&#13;
    throw 'Sending failed: ' + error;&#13;
}</script>
            <process_tags>YES</process_tags>
            <message_templates>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>[{EVENT.STATUS}] {EVENT.NAME}</subject>
                    <message>[{EVENT.STATUS}] {EVENT.NAME}&#13;
Started at {EVENT.TIME} on {EVENT.DATE}&#13;
Host: {HOST.NAME}&#13;
Severity: {EVENT.SEVERITY}&#13;
Operational data: {EVENT.OPDATA}&#13;
Event info: {$ZABBIX.URL}/tr_events.php?triggerid={TRIGGER.ID}&amp;eventid={EVENT.ID}</message>
                </message_template>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>RECOVERY</operation_mode>
                    <subject>Resolved in {EVENT.DURATION}: {EVENT.NAME}</subject>
                    <message>[{EVENT.STATUS}] {EVENT.NAME}&#13;
Resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&#13;
Host: {HOST.NAME}&#13;
Severity: {EVENT.SEVERITY}&#13;
Event info: {$ZABBIX.URL}/tr_events.php?triggerid={TRIGGER.ID}&amp;eventid={EVENT.ID}</message>
                </message_template>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>UPDATE</operation_mode>
                    <subject>[{EVENT.STATUS}] {EVENT.NAME}</subject>
                    <message>[{EVENT.STATUS}] {EVENT.NAME}&#13;
&#13;
{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&#13;
{EVENT.UPDATE.MESSAGE}</message>
                </message_template>
                <message_template>
                    <event_source>DISCOVERY</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}</subject>
                    <message>Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}&#13;
Discovery rule: {DISCOVERY.RULE.NAME}&#13;
&#13;
Device IP: {DISCOVERY.DEVICE.IPADDRESS}&#13;
Device DNS: {DISCOVERY.DEVICE.DNS}&#13;
Device status: {DISCOVERY.DEVICE.STATUS}&#13;
Device uptime: {DISCOVERY.DEVICE.UPTIME}&#13;
&#13;
Device service name: {DISCOVERY.SERVICE.NAME}&#13;
Device service port: {DISCOVERY.SERVICE.PORT}&#13;
Device service status: {DISCOVERY.SERVICE.STATUS}&#13;
Device service uptime: {DISCOVERY.SERVICE.UPTIME}</message>
                </message_template>
                <message_template>
                    <event_source>AUTOREGISTRATION</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Autoregistration: {HOST.HOST}</subject>
                    <message>Autoregistration: {HOST.HOST}&#13;
Host IP: {HOST.IP}&#13;
Agent port: {HOST.PORT}</message>
                </message_template>
            </message_templates>
        </media_type>
    </media_types>
</zabbix_export>
