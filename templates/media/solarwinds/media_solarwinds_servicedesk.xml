<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
    <version>5.0</version>
    <date>2020-07-21T11:32:08Z</date>
    <media_types>
        <media_type>
            <name>SolarWinds Service Desk</name>
            <type>WEBHOOK</type>
            <parameters>
                <parameter>
                    <name>alert_message</name>
                    <value>{ALERT.MESSAGE}</value>
                </parameter>
                <parameter>
                    <name>alert_subject</name>
                    <value>{ALERT.SUBJECT}</value>
                </parameter>
                <parameter>
                    <name>event_nseverity</name>
                    <value>{EVENT.NSEVERITY}</value>
                </parameter>
                <parameter>
                    <name>event_recovery_value</name>
                    <value>{EVENT.RECOVERY.VALUE}</value>
                </parameter>
                <parameter>
                    <name>event_source</name>
                    <value>{EVENT.SOURCE}</value>
                </parameter>
                <parameter>
                    <name>event_update_status</name>
                    <value>{EVENT.UPDATE.STATUS}</value>
                </parameter>
                <parameter>
                    <name>event_value</name>
                    <value>{EVENT.VALUE}</value>
                </parameter>
                <parameter>
                    <name>priority_average</name>
                    <value>Medium</value>
                </parameter>
                <parameter>
                    <name>priority_default</name>
                    <value>Low</value>
                </parameter>
                <parameter>
                    <name>priority_disaster</name>
                    <value>Critical</value>
                </parameter>
                <parameter>
                    <name>priority_high</name>
                    <value>High</value>
                </parameter>
                <parameter>
                    <name>samanage_incident_id</name>
                    <value>{EVENT.TAGS.__zbx_solarwinds_inc_id}</value>
                </parameter>
                <parameter>
                    <name>samanage_token</name>
                    <value>&lt;PUT YOUR TOKEN HERE&gt;</value>
                </parameter>
                <parameter>
                    <name>samanage_url</name>
                    <value>&lt;PUT YOUR INSTANCE URL HERE&gt;</value>
                </parameter>
            </parameters>
            <script>var SolarWinds = {&#13;
    params: {},&#13;
&#13;
    setParams: function (params) {&#13;
        if (typeof params !== 'object') {&#13;
            return;&#13;
        }&#13;
&#13;
        SolarWinds.params = params;&#13;
        SolarWinds.params.endpoint = 'https://api.samanage.com/';&#13;
    },&#13;
&#13;
    setProxy: function (HTTPProxy) {&#13;
        SolarWinds.HTTPProxy = HTTPProxy;&#13;
    },&#13;
&#13;
    addCustomFields: function (data, fields) {&#13;
        if (typeof data.incident === 'object' &amp;&amp; typeof fields === 'object' &amp;&amp; Object.keys(fields).length) {&#13;
            if (typeof fields.sw_fields === 'object' &amp;&amp; Object.keys(fields.sw_fields).length) {&#13;
                Object.keys(fields.sw_fields)&#13;
                    .forEach(function(field) {&#13;
                        try {&#13;
                            data.incident[field] = JSON.parse(fields.sw_fields[field]);&#13;
                        }&#13;
                        catch (error) {&#13;
                            data.incident[field] = fields.sw_fields[field];&#13;
                        }&#13;
                    });&#13;
            }&#13;
&#13;
            if (typeof fields.sw_customfields === 'object' &amp;&amp; Object.keys(fields.sw_customfields).length) {&#13;
                data.incident.custom_fields_values = {custom_fields_value: []};&#13;
                Object.keys(fields.sw_customfields)&#13;
                    .forEach(function(field) {&#13;
                        data.incident.custom_fields_values.custom_fields_value.push({&#13;
                            name: field,&#13;
                            value: fields.sw_customfields[field]&#13;
                        });&#13;
                    });&#13;
            }&#13;
        }&#13;
&#13;
        return data;&#13;
    },&#13;
&#13;
    request: function (method, query, data) {&#13;
        ['token'].forEach(function (field) {&#13;
            if (typeof SolarWinds.params !== 'object' || typeof SolarWinds.params[field] === 'undefined'&#13;
                || SolarWinds.params[field] === '' ) {&#13;
                throw 'Required SolarWinds param is not set: &quot;' + field + '&quot;.';&#13;
            }&#13;
        });&#13;
&#13;
        var response,&#13;
            url = SolarWinds.params.endpoint + query,&#13;
            request = new CurlHttpRequest();&#13;
&#13;
        request.AddHeader('Content-Type: application/json');&#13;
        request.AddHeader('X-Samanage-Authorization: Bearer ' + SolarWinds.params.token);&#13;
        request.AddHeader('Accept: application/vnd.samanage.v2.1+json');&#13;
&#13;
        if (typeof SolarWinds.HTTPProxy !== 'undefined' &amp;&amp; SolarWinds.HTTPProxy !== '') {&#13;
            request.SetProxy(SolarWinds.HTTPProxy);&#13;
        }&#13;
&#13;
        if (typeof data !== 'undefined') {&#13;
            data = JSON.stringify(data);&#13;
        }&#13;
&#13;
        Zabbix.Log(4, '[ SolarWinds SD Webhook ] Sending request: ' + url + ((typeof data === 'string')&#13;
            ? ('\n' + data)&#13;
            : ''));&#13;
&#13;
        switch (method) {&#13;
            case 'get':&#13;
                response = request.Get(url, data);&#13;
                break;&#13;
&#13;
            case 'post':&#13;
                response = request.Post(url, data);&#13;
                break;&#13;
&#13;
            case 'put':&#13;
                response = request.Put(url, data);&#13;
                break;&#13;
&#13;
            default:&#13;
                throw 'Unsupported HTTP request method: ' + method;&#13;
        }&#13;
&#13;
        Zabbix.Log(4, '[ SolarWinds SD Webhook ] Received response with status code ' + request.Status() +&#13;
            '\n' + response);&#13;
&#13;
        if (response !== null) {&#13;
            try {&#13;
                response = JSON.parse(response);&#13;
            }&#13;
            catch (error) {&#13;
                Zabbix.Log(4, '[ SolarWinds SD Webhook ] Failed to parse response received from SolarWinds');&#13;
                response = null;&#13;
            }&#13;
        }&#13;
&#13;
        if (request.Status() &lt; 200 || request.Status() &gt;= 300) {&#13;
            var message = 'Request failed with status code ' + request.Status();&#13;
&#13;
            if (response !== null &amp;&amp; typeof response.error !== 'undefined'&#13;
                &amp;&amp; Object.keys(response.error).length &gt; 0) {&#13;
                message += ': ' + JSON.stringify(response.error);&#13;
            }&#13;
            else if (response !== null &amp;&amp; typeof response === 'object'&#13;
                &amp;&amp; Object.keys(response).length &gt; 0) {&#13;
                Object.keys(response)&#13;
                    .forEach(function(field) {&#13;
                        message += '\n' + field + ': ' + response[field][0];&#13;
                    });&#13;
            }&#13;
&#13;
            throw message + ' Check debug log for more information.';&#13;
        }&#13;
&#13;
        return {&#13;
            status: request.Status(),&#13;
            response: response&#13;
        };&#13;
    },&#13;
&#13;
    createIncident: function(name, description, fields) {&#13;
        var data = {&#13;
            incident: {&#13;
                name: name,&#13;
                description: description,&#13;
                priority: SolarWinds.params.priority&#13;
            }&#13;
        };&#13;
&#13;
        var result = SolarWinds.request('post', 'incidents.json', SolarWinds.addCustomFields(data, fields));&#13;
&#13;
        if (typeof result.response !== 'object' || typeof result.response.id === 'undefined') {&#13;
            throw 'Cannot create SolarWinds incident. Check debug log for more information.';&#13;
        }&#13;
&#13;
        return result.response.id;&#13;
    },&#13;
&#13;
    updateIncident: function(name, fields, message) {&#13;
        var data = {&#13;
            incident: {&#13;
                name: name,&#13;
                priority: SolarWinds.params.priority&#13;
            }&#13;
        };&#13;
&#13;
        SolarWinds.request(&#13;
            'put',&#13;
            'incidents/' + SolarWinds.params.incident_id + '.json',&#13;
            SolarWinds.addCustomFields(data, fields));&#13;
&#13;
        SolarWinds.commenIncident(message);&#13;
    },&#13;
&#13;
    commenIncident: function(message) {&#13;
        var data = {&#13;
            comment: {&#13;
                body: message&#13;
            }&#13;
        };&#13;
&#13;
        SolarWinds.request('post', 'incidents/' + SolarWinds.params.incident_id + '/comments.json', data);&#13;
    }&#13;
};&#13;
&#13;
try {&#13;
    var params = JSON.parse(value),&#13;
        fields = {},&#13;
        samanage = {},&#13;
        result = {tags: {}},&#13;
        required_params = ['alert_subject', 'event_recovery_value', 'event_source', 'event_value', 'priority_default'],&#13;
        severities = [&#13;
            {name: 'not_classified'},&#13;
            {name: 'information'},&#13;
            {name: 'warning'},&#13;
            {name: 'average'},&#13;
            {name: 'high'},&#13;
            {name: 'disaster'},&#13;
            {name: 'resolved'},&#13;
            {name: 'default'}&#13;
        ];&#13;
&#13;
    fields.sw_fields = {};&#13;
    fields.sw_customfields = {};&#13;
&#13;
    Object.keys(params)&#13;
        .forEach(function (key) {&#13;
            if (key.startsWith('samanage_')) {&#13;
                samanage[key.substring(9)] = params[key];&#13;
            }&#13;
            else if (key.startsWith('sw_field_')) {&#13;
                fields.sw_fields[key.substring(9)] = params[key];&#13;
            }&#13;
            else if (key.startsWith('sw_customfield_')) {&#13;
                fields.sw_customfields[key.substring(15)] = params[key];&#13;
            }&#13;
            else if (required_params.indexOf(key) !== -1 &amp;&amp; params[key] === '') {&#13;
                throw 'Parameter &quot;' + key + '&quot; can\'t be empty.';&#13;
            }&#13;
        });&#13;
&#13;
    if ([0, 1, 2, 3].indexOf(parseInt(params.event_source)) === -1) {&#13;
        throw 'Incorrect &quot;event_source&quot; parameter given: ' + params.event_source + '\nMust be 0-3.';&#13;
    }&#13;
&#13;
    // Check {EVENT.VALUE} for trigger-based and internal events.&#13;
    if (params.event_value !== '0' &amp;&amp; params.event_value !== '1'&#13;
        &amp;&amp; (params.event_source === '0' || params.event_source === '3')) {&#13;
        throw 'Incorrect &quot;event_value&quot; parameter given: ' + params.event_value + '\nMust be 0 or 1.';&#13;
    }&#13;
&#13;
    // Check {EVENT.UPDATE.STATUS} only for trigger-based events.&#13;
    if (params.event_update_status !== '0' &amp;&amp; params.event_update_status !== '1' &amp;&amp; params.event_source === '0') {&#13;
        throw 'Incorrect &quot;event_update_status&quot; parameter given: ' + params.event_update_status + '\nMust be 0 or 1.';&#13;
    }&#13;
&#13;
    if (params.event_source !== '0' &amp;&amp; params.event_recovery_value === '0') {&#13;
        throw 'Recovery operations are supported only for trigger-based actions.';&#13;
    }&#13;
&#13;
    if ([0, 1, 2, 3, 4, 5].indexOf(parseInt(params.event_nseverity)) === -1) {&#13;
        params.event_nseverity = '7';&#13;
    }&#13;
&#13;
    if (params.event_value === '0') {&#13;
        params.event_nseverity = '6';&#13;
    }&#13;
&#13;
    samanage.priority = params['priority_' + severities[params.event_nseverity].name] || params.priority_default;&#13;
&#13;
    SolarWinds.setParams(samanage);&#13;
    SolarWinds.setProxy(params.HTTPProxy);&#13;
&#13;
    // Create incident for non trigger-based events.&#13;
    if (params.event_source !== '0' &amp;&amp; params.event_recovery_value !== '0') {&#13;
        SolarWinds.createIncident(params.alert_subject, params.alert_message);&#13;
    }&#13;
    // Create incident for trigger-based events.&#13;
    else if (params.event_value === '1' &amp;&amp; params.event_update_status === '0'&#13;
            &amp;&amp; samanage.incident_id === '{EVENT.TAGS.__zbx_solarwinds_inc_id}') {&#13;
        var key = SolarWinds.createIncident(params.alert_subject, params.alert_message, fields);&#13;
&#13;
&#13;
        result.tags.__zbx_solarwinds_inc_id = key;&#13;
        result.tags.__zbx_solarwinds_inc_link = params.samanage_url +&#13;
            (params.samanage_url.endsWith('/') ? '' : '/') + 'incidents/' + key;&#13;
    }&#13;
    // Update created incident for trigger-based event.&#13;
    else {&#13;
        if (samanage.incident_id === '{EVENT.TAGS.__zbx_solarwinds_inc_id}' || samanage.incident_id === '') {&#13;
            throw 'Incorrect incident key given: ' + samanage.incident_id;&#13;
        }&#13;
        if (!params.alert_message) {&#13;
            throw 'Parameter "alert_message" can\'t be empty.';&#13;
        }&#13;
        SolarWinds.updateIncident(params.alert_subject, fields, params.alert_message);&#13;
    }&#13;
&#13;
    if (params.event_source === '0') {&#13;
        return JSON.stringify(result);&#13;
    }&#13;
    else {&#13;
        return 'OK';&#13;
    }&#13;
}&#13;
catch (error) {&#13;
    Zabbix.Log(3, '[ SolarWinds SD Webhook ] ERROR: ' + error);&#13;
    throw 'Sending failed: ' + error;&#13;
}</script>
            <process_tags>YES</process_tags>
            <show_event_menu>YES</show_event_menu>
            <event_menu_url>{EVENT.TAGS.__zbx_solarwinds_inc_link}</event_menu_url>
            <event_menu_name>SolarWinds incident ID: {EVENT.TAGS.__zbx_solarwinds_inc_id}</event_menu_name>
            <message_templates>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>[{EVENT.STATUS}] {EVENT.NAME}</subject>
                    <message>Problem started at {EVENT.TIME} on {EVENT.DATE}&#13;
Problem name: {EVENT.NAME}&#13;
Host: {HOST.NAME}&#13;
Severity: {EVENT.SEVERITY}&#13;
Operational data: {EVENT.OPDATA}&#13;
Original problem ID: {EVENT.ID}&#13;
&#13;
Trigger description: {TRIGGER.DESCRIPTION}</message>
                </message_template>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>RECOVERY</operation_mode>
                    <subject>[{EVENT.STATUS}] {EVENT.NAME}</subject>
                    <message>Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&#13;
Problem name: {EVENT.NAME}&#13;
Host: {HOST.NAME}&#13;
Severity: {EVENT.SEVERITY}&#13;
Original problem ID: {EVENT.ID}&#13;
{TRIGGER.URL}</message>
                </message_template>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>UPDATE</operation_mode>
                    <subject>[{EVENT.STATUS}] {EVENT.NAME}</subject>
                    <message>{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&#13;
{EVENT.UPDATE.MESSAGE}&#13;
&#13;
Current problem status is {EVENT.STATUS}, acknowledged: {EVENT.ACK.STATUS}.</message>
                </message_template>
                <message_template>
                    <event_source>DISCOVERY</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}</subject>
                    <message>Discovery rule: {DISCOVERY.RULE.NAME}&#13;
&#13;
Device IP: {DISCOVERY.DEVICE.IPADDRESS}&#13;
Device DNS: {DISCOVERY.DEVICE.DNS}&#13;
Device status: {DISCOVERY.DEVICE.STATUS}&#13;
Device uptime: {DISCOVERY.DEVICE.UPTIME}&#13;
&#13;
Device service name: {DISCOVERY.SERVICE.NAME}&#13;
Device service port: {DISCOVERY.SERVICE.PORT}&#13;
Device service status: {DISCOVERY.SERVICE.STATUS}&#13;
Device service uptime: {DISCOVERY.SERVICE.UPTIME}</message>
                </message_template>
                <message_template>
                    <event_source>AUTOREGISTRATION</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Autoregistration: {HOST.HOST}</subject>
                    <message>Host name: {HOST.HOST}&#13;
Host IP: {HOST.IP}&#13;
Agent port: {HOST.PORT}</message>
                </message_template>
            </message_templates>
        </media_type>
    </media_types>
</zabbix_export>
