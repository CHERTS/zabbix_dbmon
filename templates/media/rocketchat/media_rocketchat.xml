<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
    <version>5.0</version>
    <date>2021-01-14T12:16:05Z</date>
    <media_types>
        <media_type>
            <name>Rocket.Chat</name>
            <type>WEBHOOK</type>
            <parameters>
                <parameter>
                    <name>alert_message</name>
                    <value>{ALERT.MESSAGE}</value>
                </parameter>
                <parameter>
                    <name>alert_subject</name>
                    <value>{ALERT.SUBJECT}</value>
                </parameter>
                <parameter>
                    <name>event_nseverity</name>
                    <value>{EVENT.NSEVERITY}</value>
                </parameter>
                <parameter>
                    <name>event_source</name>
                    <value>{EVENT.SOURCE}</value>
                </parameter>
                <parameter>
                    <name>event_update_action</name>
                    <value>{EVENT.UPDATE.ACTION}</value>
                </parameter>
                <parameter>
                    <name>event_update_message</name>
                    <value>{EVENT.UPDATE.MESSAGE}</value>
                </parameter>
                <parameter>
                    <name>event_update_status</name>
                    <value>{EVENT.UPDATE.STATUS}</value>
                </parameter>
                <parameter>
                    <name>event_update_user</name>
                    <value>{USER.FULLNAME}</value>
                </parameter>
                <parameter>
                    <name>event_value</name>
                    <value>{EVENT.VALUE}</value>
                </parameter>
                <parameter>
                    <name>field_1_full:Host</name>
                    <value>{HOST.NAME} [{HOST.IP}]</value>
                </parameter>
                <parameter>
                    <name>field_2_short:Severity</name>
                    <value>{EVENT.SEVERITY}</value>
                </parameter>
                <parameter>
                    <name>field_3_short:Event time</name>
                    <value>{EVENT.DATE} {EVENT.TIME}</value>
                </parameter>
                <parameter>
                    <name>field_3_short_r:Recovery time</name>
                    <value>{EVENT.RECOVERY.DATE} {EVENT.RECOVERY.TIME}</value>
                </parameter>
                <parameter>
                    <name>field_4_short_r:Event duration</name>
                    <value>{EVENT.DURATION}</value>
                </parameter>
                <parameter>
                    <name>field_5_short:Operational data</name>
                    <value>{EVENT.OPDATA}</value>
                </parameter>
                <parameter>
                    <name>field_999_full_p:Trigger description</name>
                    <value>{TRIGGER.DESCRIPTION}</value>
                </parameter>
                <parameter>
                    <name>rc_api_url</name>
                    <value>api/v1/</value>
                </parameter>
                <parameter>
                    <name>rc_msg_id</name>
                    <value>{EVENT.TAGS.__zbx_rc_id}</value>
                </parameter>
                <parameter>
                    <name>rc_room_id</name>
                    <value>{EVENT.TAGS.__zbx_rc_rid}</value>
                </parameter>
                <parameter>
                    <name>rc_send_to</name>
                    <value>{ALERT.SENDTO}</value>
                </parameter>
                <parameter>
                    <name>rc_title_link</name>
                    <value>{$ZABBIX.URL}/tr_events.php?triggerid={TRIGGER.ID}&amp;eventid={EVENT.ID}</value>
                </parameter>
                <parameter>
                    <name>rc_url</name>
                    <value>&lt;PLACE YOUR INSTANCE URL HERE&gt;</value>
                </parameter>
                <parameter>
                    <name>rc_user_id</name>
                    <value>&lt;PLACE USER ID HERE&gt;</value>
                </parameter>
                <parameter>
                    <name>rc_user_token</name>
                    <value>&lt;PLACE TOKEN HERE&gt;</value>
                </parameter>
                <parameter>
                    <name>use_default_message</name>
                    <value>false</value>
                </parameter>
            </parameters>
            <script>var RocketChat = {&#13;
    params: {},&#13;
&#13;
    setParams: function (params) {&#13;
        if (typeof params !== 'object') {&#13;
            return;&#13;
        }&#13;
&#13;
        RocketChat.params = params;&#13;
        if (RocketChat.params.url &amp;&amp; RocketChat.params.api_url) {&#13;
            if (!RocketChat.params.url.endsWith('/')) {&#13;
                RocketChat.params.url += '/';&#13;
            }&#13;
            if (!RocketChat.params.api_url.endsWith('/')) {&#13;
                RocketChat.params.api_url += '/';&#13;
            }&#13;
            if (RocketChat.params.api_url.startsWith('/')) {&#13;
                RocketChat.params.api_url = RocketChat.params.api_url.substring(1);&#13;
            }&#13;
&#13;
            RocketChat.params.url += RocketChat.params.api_url;&#13;
        }&#13;
    },&#13;
&#13;
    setProxy: function (HTTPProxy) {&#13;
        RocketChat.HTTPProxy = HTTPProxy;&#13;
    },&#13;
&#13;
    addFields: function (fields) {&#13;
        var data = [];&#13;
&#13;
        if (typeof fields === 'object' &amp;&amp; Object.keys(fields).length) {&#13;
            Object.keys(fields)&#13;
                .forEach(function(field) {&#13;
                    if (fields[field] === '') {&#13;
                        Zabbix.Log(4, '[ RocketChat Webhook ] Field &quot;' + field +&#13;
                            '&quot; can\'t be empty. The field ignored.');&#13;
                    }&#13;
                    else {&#13;
                        try {&#13;
                            var parts = field.split(':'),&#13;
                                prefix = parts[0].split('_');&#13;
&#13;
                            if (typeof prefix[2] === 'undefined'&#13;
                                    || (prefix[2] === 'p' &amp;&amp; params.event_value === '1')&#13;
                                    || (prefix[2] === 'r' &amp;&amp; params.event_value === '0')) {&#13;
                                data.push({&#13;
                                    title: field.substring(field.indexOf(':') + 1),&#13;
                                    value: fields[field],&#13;
                                    short: prefix[1] === 'short'&#13;
                                });&#13;
                            }&#13;
                        }&#13;
                        catch (error) {&#13;
                            Zabbix.Log(4, '[ RocketChat Webhook ] Can\'t parse field &quot;' + field +&#13;
                                '&quot;. The field ignored.');&#13;
                        }&#13;
                    }&#13;
                });&#13;
        }&#13;
&#13;
        return data;&#13;
    },&#13;
&#13;
    request: function (method, query, data) {&#13;
        ['url', 'api_url', 'user_id', 'user_token', 'send_to'].forEach(function (field) {&#13;
            if (typeof RocketChat.params !== 'object' || typeof RocketChat.params[field] === 'undefined'&#13;
                    || RocketChat.params[field] === '' ) {&#13;
                throw 'Required parameter is not set: &quot;' + field + '&quot;.';&#13;
            }&#13;
        });&#13;
&#13;
        var response,&#13;
            url = RocketChat.params.url + query,&#13;
            request = new CurlHttpRequest();&#13;
&#13;
        request.AddHeader('Content-Type: application/json');&#13;
        request.AddHeader('X-Auth-Token:' + RocketChat.params.user_token);&#13;
        request.AddHeader('X-User-Id:' + RocketChat.params.user_id);&#13;
&#13;
        if (typeof RocketChat.HTTPProxy !== 'undefined' &amp;&amp; RocketChat.HTTPProxy !== '') {&#13;
            request.SetProxy(RocketChat.HTTPProxy);&#13;
        }&#13;
&#13;
        if (typeof data !== 'undefined') {&#13;
            data = JSON.stringify(data);&#13;
        }&#13;
&#13;
        Zabbix.Log(4, '[ RocketChat Webhook ] Sending request: ' + url +&#13;
            ((typeof data === 'string') ? ('\n' + data) : ''));&#13;
&#13;
        switch (method) {&#13;
            case 'get':&#13;
                response = request.Get(url, data);&#13;
                break;&#13;
&#13;
            case 'post':&#13;
                response = request.Post(url, data);&#13;
                break;&#13;
&#13;
            default:&#13;
                throw 'Unsupported HTTP request method: ' + method;&#13;
        }&#13;
&#13;
        Zabbix.Log(4, '[ RocketChat Webhook ] Received response with status code ' +&#13;
            request.Status() + '\n' + response);&#13;
&#13;
        if (response !== null) {&#13;
            try {&#13;
                response = JSON.parse(response);&#13;
            }&#13;
            catch (error) {&#13;
                Zabbix.Log(4, '[ RocketChat Webhook ] Failed to parse response received from RocketChat');&#13;
                response = null;&#13;
            }&#13;
        }&#13;
&#13;
        if (request.Status() &lt; 200 || request.Status() &gt;= 300) {&#13;
            var message = 'Request failed with status code ' + request.Status();&#13;
&#13;
            if (response !== null &amp;&amp; typeof response.message !== 'undefined') {&#13;
                message += ': ' + JSON.stringify(response.message);&#13;
            }&#13;
            else if (response !== null &amp;&amp; typeof response.error !== 'undefined') {&#13;
                message += ': ' + JSON.stringify(response.error);&#13;
            }&#13;
&#13;
            throw message + '. Check debug log for more information.';&#13;
        }&#13;
&#13;
        return {&#13;
            status: request.Status(),&#13;
            response: response&#13;
        };&#13;
    },&#13;
&#13;
    postMessage: function(use_default_message, message, fields) {&#13;
        var data = {&#13;
            channel: RocketChat.params.send_to,&#13;
            attachments: [{&#13;
                collapsed: false,&#13;
                color: RocketChat.params.color,&#13;
                title: params.alert_subject&#13;
            }]&#13;
        };&#13;
&#13;
        if (RocketChat.params.title_link) {&#13;
            data.attachments[0].title_link = RocketChat.params.title_link;&#13;
        }&#13;
&#13;
        if (use_default_message) {&#13;
            data.attachments[0].text = message;&#13;
        }&#13;
        else {&#13;
            data.attachments[0].fields = RocketChat.addFields(fields);&#13;
        }&#13;
&#13;
        var result = RocketChat.request('post', 'chat.postMessage', data);&#13;
&#13;
        if (typeof result.response !== 'object' || typeof result.response.message._id === 'undefined') {&#13;
            throw 'Cannot send RocketChat message. Check debug log for more information.';&#13;
        }&#13;
&#13;
        return {&#13;
            id: result.response.message._id,&#13;
            rid: result.response.message.rid,&#13;
            channel: result.response.channel&#13;
        };&#13;
    },&#13;
&#13;
    sendMessage: function(update, fields) {&#13;
&#13;
        var data = {&#13;
            message: {&#13;
                rid: RocketChat.params.room_id,&#13;
                tmid: RocketChat.params.msg_id,&#13;
                tshow: true&#13;
            }&#13;
        };&#13;
&#13;
        if (update.status === '0') {&#13;
            data.message.attachments = [{&#13;
                collapsed: false,&#13;
                color: RocketChat.params.color,&#13;
                title: params.alert_subject,&#13;
                title_link: RocketChat.params.title_link,&#13;
                fields: RocketChat.addFields(fields)&#13;
            }];&#13;
        }&#13;
        else {&#13;
            data.message.alias = update.user;&#13;
            data.message.msg = update.action;&#13;
            if (update.message) {&#13;
                data.message.attachments = [{&#13;
                    color: RocketChat.params.color,&#13;
                    text: update.message&#13;
                }];&#13;
            }&#13;
        }&#13;
&#13;
        RocketChat.request('post', 'chat.sendMessage', data);&#13;
    },&#13;
&#13;
    getMessageLink: function(rid, id) {&#13;
        var room = RocketChat.request('get', 'rooms.info?roomId=' + encodeURIComponent(rid)),&#13;
            link = params.rc_url +&#13;
                (params.rc_url.endsWith('/') ? '' : '/');&#13;
&#13;
        switch (room.response.room.t) {&#13;
            case 'c':&#13;
                link += 'channel/' + room.response.room.name + '?msg=' + id;&#13;
                break;&#13;
&#13;
            case 'p':&#13;
                link += 'group/' + room.response.room.name + '?msg=' + id;&#13;
                break;&#13;
&#13;
            case 'd':&#13;
                link += 'direct/' + rid + '?msg=' + id;&#13;
                break;&#13;
&#13;
            default:&#13;
                Zabbix.Log(4, '[ RocketChat Webhook ] Can\'t get room type. Link to message will not be added.');&#13;
        }&#13;
&#13;
        return link;&#13;
    }&#13;
};&#13;
&#13;
try {&#13;
    var params = JSON.parse(value),&#13;
        response,&#13;
        fields = {},&#13;
        rc = {},&#13;
        update = {},&#13;
        result = {tags: {}},&#13;
        required_params = ['alert_subject', 'alert_message', 'event_source', 'event_value'],&#13;
        severities = [&#13;
            {name: 'not_classified', color: '#97AAB3'},&#13;
            {name: 'information', color: '#7499FF'},&#13;
            {name: 'warning', color: '#FFC859'},&#13;
            {name: 'average', color: '#FFA059'},&#13;
            {name: 'high', color: '#E97659'},&#13;
            {name: 'disaster', color: '#E45959'},&#13;
            {name: 'resolved', color: '#009900'},&#13;
            {name: 'default', color: '#000000'}&#13;
        ];&#13;
&#13;
    Object.keys(params)&#13;
        .forEach(function (key) {&#13;
            if (key.startsWith('rc_')) {&#13;
                rc[key.substring(3)] = params[key];&#13;
            }&#13;
            else if (key.startsWith('field_')) {&#13;
                fields[key.substring(6)] = params[key];&#13;
            }&#13;
            else if (key.startsWith('event_update_')) {&#13;
                update[key.substring(13)] = params[key];&#13;
            }&#13;
            else if (required_params.indexOf(key) !== -1 &amp;&amp; params[key] === '') {&#13;
                throw 'Parameter &quot;' + key + '&quot; can\'t be empty.';&#13;
            }&#13;
        });&#13;
&#13;
    if ([0, 1, 2, 3].indexOf(parseInt(params.event_source)) === -1) {&#13;
        throw 'Incorrect &quot;event_source&quot; parameter given: ' + params.event_source + '\nMust be 0-3.';&#13;
    }&#13;
&#13;
    // Forcing parameters for non trigger-based events.&#13;
    if (params.event_source !== '0') {&#13;
        params.use_default_message = 'true';&#13;
        params.event_nseverity = '0';&#13;
        params.rc_title_link = false;&#13;
    }&#13;
&#13;
    // Check {EVENT.VALUE} for trigger-based and internal events.&#13;
    if (params.event_value !== '0' &amp;&amp; params.event_value !== '1'&#13;
            &amp;&amp; (params.event_source === '0' || params.event_source === '3')) {&#13;
        throw 'Incorrect &quot;event_value&quot; parameter given: ' + params.event_value + '\nMust be 0 or 1.';&#13;
    }&#13;
&#13;
    // Check {EVENT.UPDATE.STATUS} only for trigger-based events.&#13;
    if (params.event_update_status !== '0' &amp;&amp; params.event_update_status !== '1' &amp;&amp; params.event_source === '0') {&#13;
        throw 'Incorrect &quot;event_update_status&quot; parameter given: ' + params.event_update_status + '\nMust be 0 or 1.';&#13;
    }&#13;
&#13;
    if ([0, 1, 2, 3, 4, 5].indexOf(parseInt(params.event_nseverity)) === -1) {&#13;
        params.event_nseverity = '7';&#13;
    }&#13;
&#13;
    if (params.event_value === '0') {&#13;
        params.event_nseverity = '6';&#13;
    }&#13;
&#13;
    RocketChat.setParams(rc);&#13;
    RocketChat.setProxy(params.HTTPProxy);&#13;
    RocketChat.params.color = severities[params.event_nseverity].color;&#13;
&#13;
    // Send default message if use_default_message === true.&#13;
    if (params.use_default_message.toLowerCase() === 'true') {&#13;
        response = RocketChat.postMessage(true, params.alert_message);&#13;
        result.tags.__zbx_rc_id = response.id;&#13;
        result.tags.__zbx_rc_rid = response.rid;&#13;
        result.tags.__zbx_rc_msg_url = RocketChat.getMessageLink(response.rid, response.id);&#13;
    }&#13;
    // Send message for trigger-based events.&#13;
    else if (params.event_value === '1' &amp;&amp; update.status === '0') {&#13;
        response = RocketChat.postMessage(false, params.alert_message, fields);&#13;
        result.tags.__zbx_rc_id = response.id;&#13;
        result.tags.__zbx_rc_rid = response.rid;&#13;
        result.tags.__zbx_rc_msg_url = RocketChat.getMessageLink(response.rid, response.id);&#13;
    }&#13;
    // Send thread message for trigger-based event.&#13;
    else {&#13;
        RocketChat.sendMessage(update, fields);&#13;
    }&#13;
&#13;
    return JSON.stringify(result);&#13;
}&#13;
catch (error) {&#13;
    Zabbix.Log(3, '[ RocketChat Webhook ] ERROR: ' + error);&#13;
    throw 'Sending failed: ' + error;&#13;
}</script>
            <process_tags>YES</process_tags>
            <show_event_menu>YES</show_event_menu>
            <event_menu_url>{EVENT.TAGS.__zbx_rc_msg_url}</event_menu_url>
            <event_menu_name>Rocket.Chat</event_menu_name>
            <message_templates>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>[{EVENT.STATUS}] {EVENT.NAME}</subject>
                    <message>Problem started at {EVENT.TIME} on {EVENT.DATE}&#13;
Problem name: {EVENT.NAME}&#13;
Host: {HOST.NAME}&#13;
Severity: {EVENT.SEVERITY}&#13;
Operational data: {EVENT.OPDATA}&#13;
Original problem ID: {EVENT.ID}&#13;
{TRIGGER.URL}</message>
                </message_template>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>RECOVERY</operation_mode>
                    <subject>[{EVENT.STATUS}] {EVENT.NAME}</subject>
                    <message>Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&#13;
Problem name: {EVENT.NAME}&#13;
Host: {HOST.NAME}&#13;
Severity: {EVENT.SEVERITY}&#13;
Original problem ID: {EVENT.ID}&#13;
{TRIGGER.URL}</message>
                </message_template>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>UPDATE</operation_mode>
                    <subject>[{EVENT.STATUS}] {EVENT.NAME}</subject>
                    <message>{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&#13;
{EVENT.UPDATE.MESSAGE}&#13;
&#13;
Current problem status is {EVENT.STATUS}, acknowledged: {EVENT.ACK.STATUS}.</message>
                </message_template>
                <message_template>
                    <event_source>DISCOVERY</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}</subject>
                    <message>Discovery rule: {DISCOVERY.RULE.NAME}&#13;
&#13;
Device IP: {DISCOVERY.DEVICE.IPADDRESS}&#13;
Device DNS: {DISCOVERY.DEVICE.DNS}&#13;
Device status: {DISCOVERY.DEVICE.STATUS}&#13;
Device uptime: {DISCOVERY.DEVICE.UPTIME}&#13;
&#13;
Device service name: {DISCOVERY.SERVICE.NAME}&#13;
Device service port: {DISCOVERY.SERVICE.PORT}&#13;
Device service status: {DISCOVERY.SERVICE.STATUS}&#13;
Device service uptime: {DISCOVERY.SERVICE.UPTIME}</message>
                </message_template>
                <message_template>
                    <event_source>AUTOREGISTRATION</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Autoregistration: {HOST.HOST}</subject>
                    <message>Host name: {HOST.HOST}&#13;
Host IP: {HOST.IP}&#13;
Agent port: {HOST.PORT}</message>
                </message_template>
            </message_templates>
        </media_type>
    </media_types>
</zabbix_export>
