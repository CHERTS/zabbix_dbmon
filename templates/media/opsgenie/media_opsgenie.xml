<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
    <version>5.0</version>
    <date>2020-08-19T20:06:41Z</date>
    <media_types>
        <media_type>
            <name>Opsgenie</name>
            <type>WEBHOOK</type>
            <parameters>
                <parameter>
                    <name>alert_message</name>
                    <value>{ALERT.MESSAGE}</value>
                </parameter>
                <parameter>
                    <name>alert_subject</name>
                    <value>{ALERT.SUBJECT}</value>
                </parameter>
                <parameter>
                    <name>event_id</name>
                    <value>{EVENT.ID}</value>
                </parameter>
                <parameter>
                    <name>event_nseverity</name>
                    <value>{EVENT.NSEVERITY}</value>
                </parameter>
                <parameter>
                    <name>event_source</name>
                    <value>{EVENT.SOURCE}</value>
                </parameter>
                <parameter>
                    <name>event_tags_json</name>
                    <value>{EVENT.TAGSJSON}</value>
                </parameter>
                <parameter>
                    <name>event_update_status</name>
                    <value>{EVENT.UPDATE.STATUS}</value>
                </parameter>
                <parameter>
                    <name>event_value</name>
                    <value>{EVENT.VALUE}</value>
                </parameter>
                <parameter>
                    <name>opsgenie_api</name>
                    <value>&lt;put your opsgenie api&gt;</value>
                </parameter>
                <parameter>
                    <name>opsgenie_tags</name>
                    <value/>
                </parameter>
                <parameter>
                    <name>opsgenie_teams</name>
                    <value/>
                </parameter>
                <parameter>
                    <name>opsgenie_token</name>
                    <value>&lt;put your token&gt;</value>
                </parameter>
                <parameter>
                    <name>opsgenie_web</name>
                    <value>&lt;put your opsgenie web&gt;</value>
                </parameter>
                <parameter>
                    <name>severity_average</name>
                    <value>P3</value>
                </parameter>
                <parameter>
                    <name>severity_default</name>
                    <value>P5</value>
                </parameter>
                <parameter>
                    <name>severity_disaster</name>
                    <value>P1</value>
                </parameter>
                <parameter>
                    <name>severity_high</name>
                    <value>P2</value>
                </parameter>
                <parameter>
                    <name>severity_information</name>
                    <value>P5</value>
                </parameter>
                <parameter>
                    <name>severity_not_classified</name>
                    <value>P5</value>
                </parameter>
                <parameter>
                    <name>severity_warning</name>
                    <value>P4</value>
                </parameter>
                <parameter>
                    <name>trigger_id</name>
                    <value>{TRIGGER.ID}</value>
                </parameter>
                <parameter>
                    <name>zbxurl</name>
                    <value>{$ZABBIX.URL}</value>
                </parameter>
                <parameter>
                    <name>zbxuser</name>
                    <value>{USER.FULLNAME}</value>
                </parameter>
            </parameters>
            <script>var Media = {&#13;
    params: {},&#13;
    name: '',&#13;
    labels: [],&#13;
    HTTPProxy: '',&#13;
&#13;
    setParams: function (params) {&#13;
        if (typeof params !== 'object') {&#13;
            return;&#13;
        }&#13;
&#13;
        Media.params = params;&#13;
        Media.params.api += Media.params.api.endsWith('/') ? '' : '/';&#13;
        Media.params.web += Media.params.web.endsWith('/') ? '' : '/';&#13;
    },&#13;
&#13;
    setProxy: function (HTTPProxy) {&#13;
        if (typeof HTTPProxy !== 'undefined' &amp;&amp; HTTPProxy.trim() !== '') {&#13;
            Media.HTTPProxy = HTTPProxy;&#13;
        }&#13;
    },&#13;
&#13;
    setTags: function(event_tags_json) {&#13;
        if (typeof event_tags_json !== 'undefined' &amp;&amp; event_tags_json !== ''&#13;
                &amp;&amp; event_tags_json !== '{EVENT.TAGSJSON}') {&#13;
&#13;
            try {&#13;
                var tags = JSON.parse(event_tags_json),&#13;
                    label;&#13;
&#13;
                tags.forEach(function (tag) {&#13;
                    if (typeof tag.tag === 'string') {&#13;
                        label = (tag.tag + (typeof tag.value !== 'undefined'&#13;
                                &amp;&amp; tag.value !== '' ? (':' + tag.value) : '')).replace(/\s/g, '_');&#13;
                        Media.labels.push(label);&#13;
                    }&#13;
                });&#13;
            }&#13;
            catch (error) {&#13;
                Zabbix.Log(4, '[ ' + Media.name + ' Webhook ] Failed to parse &quot;event_tags_json&quot; param');&#13;
            }&#13;
        }&#13;
    },&#13;
&#13;
    request: function (method, query, data, allow_404) {&#13;
        if (typeof(allow_404) === 'undefined') {&#13;
            allow_404 = false;&#13;
        }&#13;
&#13;
        ['api', 'token'].forEach(function (field) {&#13;
            if (typeof Media.params !== 'object' || typeof Media.params[field] === 'undefined'&#13;
                    || Media.params[field] === '') {&#13;
                throw 'Required ' + Media.name + ' param is not set: &quot;' + field + '&quot;.';&#13;
            }&#13;
        });&#13;
&#13;
        var response,&#13;
            url = Media.params.api + query,&#13;
            request = new CurlHttpRequest();&#13;
&#13;
        request.AddHeader('Content-Type: application/json');&#13;
        request.AddHeader('Authorization: ' + Media.params.token);&#13;
        request.SetProxy(Media.HTTPProxy);&#13;
&#13;
        if (typeof data !== 'undefined') {&#13;
            data = JSON.stringify(data);&#13;
        }&#13;
&#13;
        Zabbix.Log(4, '[ ' + Media.name + ' Webhook ] Sending request: ' +&#13;
            url + ((typeof data === 'string') ? ('\n' + data) : ''));&#13;
&#13;
        switch (method) {&#13;
            case 'get':&#13;
                response = request.Get(url, data);&#13;
                break;&#13;
&#13;
            case 'post':&#13;
                response = request.Post(url, data);&#13;
                break;&#13;
&#13;
            case 'put':&#13;
                response = request.Put(url, data);&#13;
                break;&#13;
&#13;
            default:&#13;
                throw 'Unsupported HTTP request method: ' + method;&#13;
        }&#13;
&#13;
        Zabbix.Log(4, '[ ' + Media.name + ' Webhook ] Received response with status code ' +&#13;
            request.Status() + '\n' + response);&#13;
&#13;
        if (response !== null) {&#13;
            try {&#13;
                response = JSON.parse(response);&#13;
            }&#13;
            catch (error) {&#13;
                Zabbix.Log(4, '[ ' + Media.name + ' Webhook ] Failed to parse response.');&#13;
                response = null;&#13;
            }&#13;
        }&#13;
&#13;
        if ((request.Status() &lt; 200 || request.Status() &gt;= 300)&#13;
                &amp;&amp; (!allow_404 || request.Status() !== 404)) {&#13;
            var message = 'Request failed with status code ' + request.Status();&#13;
&#13;
            if (response !== null) {&#13;
                if (typeof response.errors === 'object' &amp;&amp; Object.keys(response.errors).length &gt; 0) {&#13;
                    message += ': ' + JSON.stringify(response.errors);&#13;
                }&#13;
                else if (typeof response.errorMessages === 'object' &amp;&amp; Object.keys(response.errorMessages).length &gt; 0) {&#13;
                    message += ': ' + JSON.stringify(response.errorMessages);&#13;
                }&#13;
                else if (typeof response.message === 'string') {&#13;
                    message += ': ' + response.message;&#13;
                }&#13;
            }&#13;
&#13;
            throw message + ' Check debug log for more information.';&#13;
        }&#13;
&#13;
        return {&#13;
            status: request.Status(),&#13;
            response: response&#13;
        };&#13;
    },&#13;
&#13;
    getAlertId: function (requestId) {&#13;
        do {&#13;
            resp = Media.request('get', 'requests/' + requestId, undefined, true);&#13;
        }&#13;
        while (typeof resp.response !== 'object' || typeof resp.response.data === 'undefined'&#13;
                || resp.response.data.success === false);&#13;
&#13;
        if (typeof resp.response !== 'object' || typeof resp.response.data === 'undefined') {&#13;
            throw 'Cannot get ' + Media.name + ' issue ID. Check debug log for more information.';&#13;
        }&#13;
&#13;
        return resp;&#13;
    }&#13;
};&#13;
&#13;
try {&#13;
    var result = {tags: {}},&#13;
        params = JSON.parse(value),&#13;
        media = {},&#13;
        fields = {},&#13;
        resp = {},&#13;
        responders = [],&#13;
        tags = [],&#13;
        required_params = [&#13;
            'alert_subject',&#13;
            'alert_message',&#13;
            'event_id',&#13;
            'event_source',&#13;
            'event_value',&#13;
            'event_update_status',&#13;
            'opsgenie_api',&#13;
            'opsgenie_web',&#13;
            'opsgenie_token'&#13;
        ],&#13;
        severities = [&#13;
            'not_classified',&#13;
            'information',&#13;
            'warning',&#13;
            'average',&#13;
            'high',&#13;
            'disaster',&#13;
            'resolved',&#13;
            'default'&#13;
        ],&#13;
        priority;&#13;
&#13;
    Object.keys(params)&#13;
        .forEach(function (key) {&#13;
            if (required_params.indexOf(key) !== -1 &amp;&amp; params[key].trim() === '') {&#13;
                throw 'Parameter &quot;' + key + '&quot; cannot be empty.';&#13;
            }&#13;
            if (key.startsWith('opsgenie_')) {&#13;
                media[key.substring(9)] = params[key];&#13;
            }&#13;
        });&#13;
&#13;
    // Possible values of event_source:&#13;
    // 0 - Trigger, 1 - Discovery, 2 - Autoregistration, 3 - Internal.&#13;
    if ([0, 1, 2, 3].indexOf(parseInt(params.event_source)) === -1) {&#13;
        throw 'Incorrect &quot;event_source&quot; parameter given: &quot;' + params.event_source + '&quot;.\nMust be 0-3.';&#13;
    }&#13;
&#13;
    // Check event_value for trigger-based and internal events.&#13;
    // Possible values: 1 for problem, 0 for recovering&#13;
    if (params.event_value !== '0' &amp;&amp; params.event_value !== '1'&#13;
        &amp;&amp; (params.event_source === '0' || params.event_source === '3')) {&#13;
        throw 'Incorrect &quot;event_value&quot; parameter given: ' + params.event_value + '\nMust be 0 or 1.';&#13;
    }&#13;
&#13;
    // Check event_update_status only for trigger-based events.&#13;
    // Possible values: 0 - Webhook was called because of problem/recovery event, 1 - Update operation.&#13;
    if (params.event_source === '0' &amp;&amp; params.event_update_status !== '0' &amp;&amp; params.event_update_status !== '1') {&#13;
        throw 'Incorrect &quot;event_update_status&quot; parameter given: ' + params.event_update_status + '\nMust be 0 or 1.';&#13;
    }&#13;
&#13;
    // Check event_id for a numeric value.&#13;
    if (isNaN(parseInt(params.event_id)) || params.event_id &lt; 1) {&#13;
        throw 'Incorrect &quot;event_id&quot; parameter given: ' + params.event_id + '\nMust be a positive number.';&#13;
    }&#13;
&#13;
    if ((params.event_source === '1' || params.event_source === '2')  &amp;&amp; params.event_value === '0') {&#13;
        throw 'Recovery operations are supported only for Trigger and Internal actions.';&#13;
    }&#13;
&#13;
    if ([0, 1, 2, 3, 4, 5].indexOf(parseInt(params.event_nseverity)) === -1) {&#13;
        params.event_nseverity = '7';&#13;
    }&#13;
&#13;
    if (params.event_value === '0') {&#13;
        params.event_nseverity = '6';&#13;
    }&#13;
&#13;
    priority = params['severity_' + severities[params.event_nseverity]];&#13;
    params.zbxurl = params.zbxurl + (params.zbxurl.endsWith('/') ? '' : '/');&#13;
&#13;
    Media.name = 'Opsgenie';&#13;
    Media.setParams(media);&#13;
    Media.params.token = 'GenieKey ' + Media.params.token;&#13;
    Media.setProxy(params.HTTPProxy);&#13;
    Media.setTags(params.event_tags_json); // Set Media.labels&#13;
&#13;
    // Create an issue.&#13;
    // Numeric value of the event that triggered an action (1 for problem, 0 for recovering).&#13;
    // Numeric value of of the problem update status. Possible values:&#13;
    // 0 - Webhook was called because of problem/recovery event, 1 - Update operation.&#13;
    if ((params.event_source == 0 &amp;&amp; params.event_value == 1 &amp;&amp; params.event_update_status == 0)&#13;
            || (params.event_source == 3 &amp;&amp; params.event_value == 1)&#13;
            || params.event_source == 1 || params.event_source == 2) {&#13;
        fields.message = params.alert_subject;&#13;
        fields.alias = params.event_id;&#13;
        fields.description = params.alert_message;&#13;
        fields.priority = priority;&#13;
        fields.source = 'Zabbix';&#13;
&#13;
        if (params.event_source === '0') {&#13;
            fields.details = {&#13;
                'Zabbix server': params.zbxurl,&#13;
                Problem: params.zbxurl + 'tr_events.php?triggerid=' + params.trigger_id + '&amp;eventid=' + params.event_id&#13;
            };&#13;
        }&#13;
        else {&#13;
            fields.details = {'Zabbix server': params.zbxurl};&#13;
        }&#13;
&#13;
        if (typeof params.opsgenie_teams === 'string') {&#13;
            responders = params.opsgenie_teams.split(',');&#13;
            fields.responders = responders.map(function(team) {&#13;
                return {type: 'team', name: team.trim()};&#13;
            });&#13;
        }&#13;
&#13;
        fields.tags = Media.labels;&#13;
        if (typeof params.opsgenie_tags === 'string') {&#13;
            tags = params.opsgenie_tags.split(',');&#13;
            tags.forEach(function(item) {&#13;
                fields.tags.push(item.trim());&#13;
            });&#13;
        }&#13;
&#13;
        resp = Media.request('post', '', fields);&#13;
        if (typeof resp.response !== 'object' || typeof resp.response.result === 'undefined') {&#13;
            throw 'Cannot create ' + Media.name + ' issue. Check debug log for more information.';&#13;
        }&#13;
&#13;
        if (resp.status === 202) {&#13;
            resp = Media.getAlertId(resp.response.requestId);&#13;
            if (params.event_source == 0 &amp;&amp; params.event_value == 1 &amp;&amp; params.event_update_status == 0) {&#13;
                result.tags.__zbx_ops_issuekey = resp.response.data.alertId;&#13;
                result.tags.__zbx_ops_issuelink = Media.params.web + 'alert/detail/' + resp.response.data.alertId;&#13;
            }&#13;
        }&#13;
        else {&#13;
            throw Media.name + ' response code is unexpected. Check debug log for more information.';&#13;
        }&#13;
    }&#13;
    // Update a created issue.&#13;
    else {&#13;
        fields.user = (params.event_value != 0) ? params.zbxuser : '';&#13;
        fields.note = params.alert_message;&#13;
&#13;
        resp = Media.request('post', params.event_id + '/notes?identifierType=alias', fields);&#13;
        if (typeof resp.response !== 'object' || typeof resp.response.result === 'undefined') {&#13;
            throw 'Cannot update ' + Media.name + ' issue. Check debug log for more information.';&#13;
        }&#13;
&#13;
        if (resp.status === 202) {&#13;
            resp = Media.getAlertId(resp.response.requestId);&#13;
        }&#13;
        else {&#13;
            throw Media.name + ' response code is unexpected. Check debug log for more information.';&#13;
        }&#13;
    }&#13;
&#13;
    return JSON.stringify(result);&#13;
}&#13;
catch (error) {&#13;
    Zabbix.Log(3, '[ ' + Media.name + ' Webhook ] ERROR: ' + error);&#13;
    throw 'Sending failed: ' + error;&#13;
}</script>
            <process_tags>YES</process_tags>
            <show_event_menu>YES</show_event_menu>
            <event_menu_url>{EVENT.TAGS.__zbx_ops_issuelink}</event_menu_url>
            <event_menu_name>Opsgenie: {EVENT.TAGS.__zbx_ops_issuekey}</event_menu_name>
            <description>Please refer to https://docs.opsgenie.com/docs/alert-api and https://www.zabbix.com/documentation/5.0/manual/config/notifications/media/webhook#example_scripts.&#13;
  &#13;
Set global macro {$ZABBIX.URL} with your Zabbix server URL.&#13;
Add dedicated user with media type &quot;Opsgenie&quot;.&#13;
Change the values of the variables opsgenie_api (https://api.opsgenie.com/v2/alerts or https://api.eu.opsgenie.com/v2/alerts),&#13;
opsgenie_web (for example, https://myzabbix.app.opsgenie.com), opsgenie_token.</description>
            <message_templates>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Problem: {EVENT.NAME}</subject>
                    <message>Problem started at {EVENT.TIME} on {EVENT.DATE}&#13;
Problem name: {EVENT.NAME}&#13;
Host: {HOST.NAME}&#13;
Severity: {EVENT.SEVERITY}&#13;
Operational data: {EVENT.OPDATA}&#13;
Original problem ID: {EVENT.ID}&#13;
{TRIGGER.URL}</message>
                </message_template>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>UPDATE</operation_mode>
                    <subject>Updated problem in {EVENT.AGE}: {EVENT.NAME}</subject>
                    <message>{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&#13;
{EVENT.UPDATE.MESSAGE}&#13;
&#13;
Current problem status is {EVENT.STATUS}, age is {EVENT.AGE}, acknowledged: {EVENT.ACK.STATUS}.</message>
                </message_template>
                <message_template>
                    <event_source>DISCOVERY</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}</subject>
                    <message>Discovery rule: {DISCOVERY.RULE.NAME}&#13;
&#13;
Device IP: {DISCOVERY.DEVICE.IPADDRESS}&#13;
Device DNS: {DISCOVERY.DEVICE.DNS}&#13;
Device status: {DISCOVERY.DEVICE.STATUS}&#13;
Device uptime: {DISCOVERY.DEVICE.UPTIME}&#13;
&#13;
Device service name: {DISCOVERY.SERVICE.NAME}&#13;
Device service port: {DISCOVERY.SERVICE.PORT}&#13;
Device service status: {DISCOVERY.SERVICE.STATUS}&#13;
Device service uptime: {DISCOVERY.SERVICE.UPTIME}</message>
                </message_template>
                <message_template>
                    <event_source>AUTOREGISTRATION</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Autoregistration: {HOST.HOST}</subject>
                    <message>Host name: {HOST.HOST}&#13;
Host IP: {HOST.IP}&#13;
Agent port: {HOST.PORT}</message>
                </message_template>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>RECOVERY</operation_mode>
                    <subject>Resolved in {EVENT.DURATION}: {EVENT.NAME}</subject>
                    <message>Problem has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&#13;
Problem name: {EVENT.NAME}&#13;
Problem duration: {EVENT.DURATION}&#13;
Host: {HOST.NAME}&#13;
Severity: {EVENT.SEVERITY}&#13;
Original problem ID: {EVENT.ID}&#13;
{TRIGGER.URL}</message>
                </message_template>
            </message_templates>
        </media_type>
    </media_types>
</zabbix_export>
