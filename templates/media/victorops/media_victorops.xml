<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
    <version>5.0</version>
    <date>2021-02-02T14:26:22Z</date>
    <media_types>
        <media_type>
            <name>VictorOps</name>
            <type>WEBHOOK</type>
            <parameters>
                <parameter>
                    <name>event_info</name>
                    <value>{$ZABBIX.URL}/tr_events.php?triggerid={TRIGGER.ID}&amp;eventid={EVENT.ID}</value>
                </parameter>
                <parameter>
                    <name>event_nseverity</name>
                    <value>{EVENT.NSEVERITY}</value>
                </parameter>
                <parameter>
                    <name>event_recovery_value</name>
                    <value>{EVENT.RECOVERY.VALUE}</value>
                </parameter>
                <parameter>
                    <name>event_source</name>
                    <value>{EVENT.SOURCE}</value>
                </parameter>
                <parameter>
                    <name>event_update_status</name>
                    <value>{EVENT.UPDATE.STATUS}</value>
                </parameter>
                <parameter>
                    <name>event_value</name>
                    <value>{EVENT.VALUE}</value>
                </parameter>
                <parameter>
                    <name>field:entity_display_name</name>
                    <value>{ALERT.SUBJECT}</value>
                </parameter>
                <parameter>
                    <name>field:entity_id</name>
                    <value>{EVENT.ID}</value>
                </parameter>
                <parameter>
                    <name>field:hostname</name>
                    <value>{HOST.NAME}</value>
                </parameter>
                <parameter>
                    <name>field:monitoring_tool</name>
                    <value>Zabbix</value>
                </parameter>
                <parameter>
                    <name>field:operational_data</name>
                    <value>{EVENT.OPDATA}</value>
                </parameter>
                <parameter>
                    <name>field:severity</name>
                    <value>{EVENT.SEVERITY}</value>
                </parameter>
                <parameter>
                    <name>field:state_message</name>
                    <value>{ALERT.MESSAGE}</value>
                </parameter>
                <parameter>
                    <name>field_p:trigger_description</name>
                    <value>{TRIGGER.DESCRIPTION}</value>
                </parameter>
                <parameter>
                    <name>field_r:event_duration</name>
                    <value>{EVENT.DURATION}</value>
                </parameter>
                <parameter>
                    <name>field_r:recovery time</name>
                    <value>{EVENT.RECOVERY.DATE} {EVENT.RECOVERY.TIME}</value>
                </parameter>
                <parameter>
                    <name>priority_average</name>
                    <value>WARNING</value>
                </parameter>
                <parameter>
                    <name>priority_default</name>
                    <value>INFO</value>
                </parameter>
                <parameter>
                    <name>priority_disaster</name>
                    <value>CRITICAL</value>
                </parameter>
                <parameter>
                    <name>priority_high</name>
                    <value>WARNING</value>
                </parameter>
                <parameter>
                    <name>priority_information</name>
                    <value>INFO</value>
                </parameter>
                <parameter>
                    <name>priority_not_classified</name>
                    <value>INFO</value>
                </parameter>
                <parameter>
                    <name>priority_resolved</name>
                    <value>OK</value>
                </parameter>
                <parameter>
                    <name>priority_update</name>
                    <value>INFO</value>
                </parameter>
                <parameter>
                    <name>priority_warning</name>
                    <value>INFO</value>
                </parameter>
                <parameter>
                    <name>vops_endpoint</name>
                    <value>&lt;PLACE ENDPOINT URL HERE&gt;</value>
                </parameter>
                <parameter>
                    <name>vops_routing_key</name>
                    <value>{ALERT.SENDTO}</value>
                </parameter>
            </parameters>
            <script>var VictorOps = {
    params: {},

    setParams: function (params) {
        if (typeof params !== 'object') {
            return;
        }

        VictorOps.params = params;
        if (VictorOps.params.endpoint) {
            if (!VictorOps.params.endpoint.endsWith('/')) {
                VictorOps.params.endpoint += '/';
            }

            if (typeof VictorOps.params.routing_key !== 'undefined'
                    &amp;&amp; VictorOps.params.routing_key !== '{ALERT.SENDTO}'
                    &amp;&amp; VictorOps.params.routing_key !== 'Default') {
                VictorOps.params.endpoint += VictorOps.params.routing_key;
            }
        }
    },

    setProxy: function (HTTPProxy) {
        VictorOps.HTTPProxy = HTTPProxy;
    },

    addFields: function (fields) {
        var data = {};

        if (typeof fields === 'object') {
            Object.keys(fields)
                .forEach(function(field) {
                    if (fields[field] === '') {
                        Zabbix.Log(4, '[ VictorOps Webhook ] Field &quot;' + field +
                            '&quot; can\'t be empty. The field ignored.');
                    }
                    else {
                        try {
                            var parts = field.split(':'),
                                prefix = parts[0].split('_');

                            if (typeof prefix[1] === 'undefined'
                                    || (prefix[1] === 'p' &amp;&amp; params.event_value === '1'
                                        &amp;&amp; (params.event_update_status === '0'
                                            || params.event_update_status === '{EVENT.UPDATE.STATUS}'))
                                    || (prefix[1] === 'r' &amp;&amp; params.event_value === '0'
                                        &amp;&amp; (params.event_update_status === '0'
                                            || params.event_update_status === '{EVENT.UPDATE.STATUS}'))
                                    || (prefix[1] === 'u' &amp;&amp; params.event_update_status === '1')) {
                                data[field.substring(field.indexOf(':') + 1)] = fields[field];
                            }
                        }
                        catch (error) {
                            Zabbix.Log(4, '[ VictorOps Webhook ] Can\'t parse field &quot;' + field +
                                '&quot;. The field ignored.');
                        }
                    }
                });
        }

        return data;
    },

    request: function (data) {
        if (typeof VictorOps.params !== 'object' || typeof VictorOps.params.endpoint === 'undefined'
                || VictorOps.params.endpoint === '' ) {
            throw 'Required parameter is not set: &quot;vops_endpoint&quot;.';
        }

        var response,
            url = VictorOps.params.endpoint,
            request = new CurlHttpRequest();

        request.AddHeader('Content-Type: application/json');

        if (typeof VictorOps.HTTPProxy !== 'undefined' &amp;&amp; VictorOps.HTTPProxy !== '') {
            request.SetProxy(VictorOps.HTTPProxy);
        }

        if (typeof data !== 'undefined') {
            data = JSON.stringify(data);
        }

        Zabbix.Log(4, '[ VictorOps Webhook ] Sending request: ' + url +
            ((typeof data === 'string') ? ('\n' + data) : ''));

        response = request.Post(url, data);

        Zabbix.Log(4, '[ VictorOps Webhook ] Received response with status code ' +
            request.Status() + '\n' + response);

        if (response !== null) {
            try {
                response = JSON.parse(response);
            }
            catch (error) {
                Zabbix.Log(4, '[ VictorOps Webhook ] Failed to parse response received from VictorOps');
                response = null;
            }
        }

        if (request.Status() &lt; 200 || request.Status() &gt;= 300) {
            var message = 'Request failed with status code ' + request.Status();

            if (response !== null &amp;&amp; typeof response.messages !== 'undefined') {
                message += ': ' + JSON.stringify(response.messages);
            }

            throw message + '. Check debug log for more information.';
        }

        return response;
    }
};

try {
    var params = JSON.parse(value),
        fields = {},
        vops = {},
        required_params = ['event_source', 'event_value', 'priority_update'],
        severities = [
            {name: 'not_classified', color: '#97AAB3'},
            {name: 'information', color: '#7499FF'},
            {name: 'warning', color: '#FFC859'},
            {name: 'average', color: '#FFA059'},
            {name: 'high', color: '#E97659'},
            {name: 'disaster', color: '#E45959'},
            {name: 'resolved', color: '#009900'},
            {name: 'default', color: '#000000'}
        ];

    Object.keys(params)
        .forEach(function (key) {
            if (key.startsWith('vops_')) {
                vops[key.substring(5)] = params[key];
            }
            else if (key.startsWith('field')) {
                fields[key.substring(5)] = params[key];
            }
            else if (required_params.indexOf(key) !== -1 &amp;&amp; params[key] === '') {
                throw 'Parameter &quot;' + key + '&quot; can\'t be empty.';
            }
        });

    if ([0, 1, 2, 3].indexOf(parseInt(params.event_source)) === -1) {
        throw 'Incorrect &quot;event_source&quot; parameter given: ' + params.event_source + '\nMust be 0-3.';
    }

    // Check {EVENT.VALUE} for trigger-based and internal events.
    if (params.event_value !== '0' &amp;&amp; params.event_value !== '1'
            &amp;&amp; (params.event_source === '0' || params.event_source === '3')) {
        throw 'Incorrect &quot;event_value&quot; parameter given: ' + params.event_value + '\nMust be 0 or 1.';
    }

    // Check {EVENT.UPDATE.STATUS} only for trigger-based events.
    if (params.event_update_status !== '0' &amp;&amp; params.event_update_status !== '1' &amp;&amp; params.event_source === '0') {
        throw 'Incorrect &quot;event_update_status&quot; parameter given: ' + params.event_update_status + '\nMust be 0 or 1.';
    }

    if ([0, 1, 2, 3, 4, 5].indexOf(parseInt(params.event_nseverity)) === -1) {
        params.event_nseverity = '7';
    }

    if (params.event_value === '0') {
        params.event_nseverity = '6';
    }

    if (params.event_update_status === '1') {
        fields[':message_type'] = params.priority_update;
    }
    else {
        fields[':message_type'] = params['priority_' + severities[params.event_nseverity].name]
            || 'INFO';
    }

    if (params.event_info &amp;&amp; params.event_source === '0') {
        fields[':event_info'] = params.event_info;
    }

    VictorOps.setParams(vops);
    VictorOps.setProxy(params.HTTPProxy);
    VictorOps.request(VictorOps.addFields(fields));

    return 'OK';
}
catch (error) {
    Zabbix.Log(3, '[ VictorOps Webhook ] ERROR: ' + error);
    throw 'Sending failed: ' + error;
}</script>
            <message_templates>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Problem: {EVENT.NAME}</subject>
                    <message>Problem started at {EVENT.TIME} on {EVENT.DATE}
Problem name: {EVENT.NAME}
Host: {HOST.NAME}
Severity: {EVENT.SEVERITY}
Operational data: {EVENT.OPDATA}
Original problem ID: {EVENT.ID}
{TRIGGER.URL}</message>
                </message_template>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>RECOVERY</operation_mode>
                    <subject>Resolved in {EVENT.DURATION}: {EVENT.NAME}</subject>
                    <message>Problem has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}
Problem name: {EVENT.NAME}
Problem duration: {EVENT.DURATION}
Host: {HOST.NAME}
Severity: {EVENT.SEVERITY}
Original problem ID: {EVENT.ID}
{TRIGGER.URL}</message>
                </message_template>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>UPDATE</operation_mode>
                    <subject>[{EVENT.STATUS}] {EVENT.NAME}</subject>
                    <message>{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.
{EVENT.UPDATE.MESSAGE}

Current problem status is {EVENT.STATUS}, acknowledged: {EVENT.ACK.STATUS}.</message>
                </message_template>
                <message_template>
                    <event_source>DISCOVERY</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}</subject>
                    <message>Discovery rule: {DISCOVERY.RULE.NAME}

Device IP: {DISCOVERY.DEVICE.IPADDRESS}
Device DNS: {DISCOVERY.DEVICE.DNS}
Device status: {DISCOVERY.DEVICE.STATUS}
Device uptime: {DISCOVERY.DEVICE.UPTIME}

Device service name: {DISCOVERY.SERVICE.NAME}
Device service port: {DISCOVERY.SERVICE.PORT}
Device service status: {DISCOVERY.SERVICE.STATUS}
Device service uptime: {DISCOVERY.SERVICE.UPTIME}</message>
                </message_template>
                <message_template>
                    <event_source>AUTOREGISTRATION</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Autoregistration: {HOST.HOST}</subject>
                    <message>Host name: {HOST.HOST}
Host IP: {HOST.IP}
Agent port: {HOST.PORT}</message>
                </message_template>
            </message_templates>
        </media_type>
    </media_types>
</zabbix_export>
