<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
    <version>5.0</version>
    <date>2020-08-23T03:15:32Z</date>
    <media_types>
        <media_type>
            <name>SysAid</name>
            <type>WEBHOOK</type>
            <parameters>
                <parameter>
                    <name>alert_message</name>
                    <value>{ALERT.MESSAGE}</value>
                </parameter>
                <parameter>
                    <name>alert_subject</name>
                    <value>{ALERT.SUBJECT}</value>
                </parameter>
                <parameter>
                    <name>event_id</name>
                    <value>{EVENT.ID}</value>
                </parameter>
                <parameter>
                    <name>event_nseverity</name>
                    <value>{EVENT.NSEVERITY}</value>
                </parameter>
                <parameter>
                    <name>event_source</name>
                    <value>{EVENT.SOURCE}</value>
                </parameter>
                <parameter>
                    <name>event_update_message</name>
                    <value>{EVENT.UPDATE.MESSAGE}</value>
                </parameter>
                <parameter>
                    <name>event_update_status</name>
                    <value>{EVENT.UPDATE.STATUS}</value>
                </parameter>
                <parameter>
                    <name>event_value</name>
                    <value>{EVENT.VALUE}</value>
                </parameter>
                <parameter>
                    <name>sysaid_auth_password</name>
                    <value>&lt;PUT YOUR USER PASSWORD&gt;</value>
                </parameter>
                <parameter>
                    <name>sysaid_auth_user</name>
                    <value>&lt;PUT YOUR USER NAME&gt;</value>
                </parameter>
                <parameter>
                    <name>sysaid_category_level_1</name>
                    <value>&lt;PUT YOUR CATEGORY&gt;</value>
                </parameter>
                <parameter>
                    <name>sysaid_category_level_2</name>
                    <value>&lt;PUT YOUR SUB-CATEGORY&gt;</value>
                </parameter>
                <parameter>
                    <name>sysaid_category_level_3</name>
                    <value>&lt;PUT YOUR THIRD LEVEL CATEGORY&gt;</value>
                </parameter>
                <parameter>
                    <name>sysaid_default_priority_id</name>
                    <value>1</value>
                </parameter>
                <parameter>
                    <name>sysaid_incident_id</name>
                    <value>{EVENT.TAGS.__zbx_sysaid_incident_id}</value>
                </parameter>
                <parameter>
                    <name>sysaid_incident_state</name>
                    <value>1</value>
                </parameter>
                <parameter>
                    <name>sysaid_template_id</name>
                    <value>&lt;PUT YOUR TEMPLATE ID&gt;</value>
                </parameter>
                <parameter>
                    <name>sysaid_urgency_id</name>
                    <value>&lt;PUT YOUR URGENCY ID&gt;</value>
                </parameter>
                <parameter>
                    <name>sysaid_url</name>
                    <value>&lt;PUT YOUR SYSAID URL&gt;</value>
                </parameter>
                <parameter>
                    <name>trigger_id</name>
                    <value>{TRIGGER.ID}</value>
                </parameter>
                <parameter>
                    <name>zabbix_url</name>
                    <value>{$ZABBIX.URL}</value>
                </parameter>
            </parameters>
            <script>var SysAid = {&#13;
    params: {},&#13;
&#13;
    setParams: function (params) {&#13;
        var required = ['url', 'auth_user', 'auth_password', 'category_level_1', 'category_level_2',&#13;
            'category_level_3', 'incident_id', 'template_id', 'urgency_id', 'incident_state',&#13;
            'default_priority_id'&#13;
        ];&#13;
&#13;
        required.forEach(function (field) {&#13;
            if (typeof params !== 'object' || typeof params[field] === 'undefined' || params[field] === '') {&#13;
                throw 'Required param is not set: &quot;' + field + '&quot;.';&#13;
            }&#13;
        });&#13;
&#13;
        SysAid.params = params;&#13;
        if (typeof SysAid.params.url === 'string' &amp;&amp; !SysAid.params.url.endsWith('/')) {&#13;
            SysAid.params.url += '/';&#13;
        }&#13;
    },&#13;
&#13;
    login: function () {&#13;
        var result = SysAid.request('post', 'api/v1/login', {&#13;
            user_name: SysAid.params.auth_user,&#13;
            password: SysAid.params.auth_password&#13;
        });&#13;
&#13;
        return result.response.user.id;&#13;
    },&#13;
&#13;
    request: function (method, query, data) {&#13;
        var response,&#13;
            request = SysAid.req || (SysAid.req = new CurlHttpRequest()),&#13;
            url = SysAid.params.url + query;&#13;
&#13;
        if (typeof SysAid.HTTPProxy !== 'undefined' &amp;&amp; SysAid.HTTPProxy.trim() !== '') {&#13;
            request.SetProxy(SysAid.HTTPProxy);&#13;
        }&#13;
&#13;
        if (typeof data !== 'undefined') {&#13;
            data = JSON.stringify(data);&#13;
        }&#13;
&#13;
        Zabbix.Log(4, '[ SysAid Webhook ] Sending request: ' +&#13;
            url + ((typeof data === 'string') ? (' ' + data) : ''));&#13;
&#13;
        switch (method) {&#13;
            case 'get':&#13;
                response = request.Get(url, data);&#13;
                break;&#13;
&#13;
            case 'post':&#13;
                response = request.Post(url, data);&#13;
                break;&#13;
&#13;
            case 'put':&#13;
                response = request.Put(url, data);&#13;
                break;&#13;
&#13;
            default:&#13;
                throw 'Unsupported HTTP request method: ' + method;&#13;
        }&#13;
&#13;
        Zabbix.Log(4, '[ SysAid Webhook ] Received response with status code ' + request.Status() + ': ' + response);&#13;
&#13;
        if (request.Status() !== 200) {&#13;
            var message = 'Request failed with status code ' + request.Status();&#13;
&#13;
            message += ': ' + response;&#13;
            throw message + ' Check debug log for more information.';&#13;
        }&#13;
&#13;
        if (response !== null) {&#13;
            try {&#13;
                response = JSON.parse(response);&#13;
            }&#13;
            catch (error) {&#13;
                Zabbix.Log(4, '[ SysAid Webhook ] Failed to parse response received from SysAid');&#13;
                response = null;&#13;
            }&#13;
        }&#13;
&#13;
        if (response === null || (typeof response.Error !== 'undefined' &amp;&amp; Object.keys(response.Error).length &gt; 0)) {&#13;
            throw 'Request failed: ' + JSON.stringify(response.Error);&#13;
        }&#13;
&#13;
        return {&#13;
            status: request.Status(),&#13;
            response: response&#13;
        };&#13;
    },&#13;
&#13;
    createIncident: function(subject, message, priority) {&#13;
        var result = SysAid.request('post', 'api/v1/sr/?template=' + encodeURIComponent(SysAid.params.template_id), {&#13;
            info: [&#13;
                {&#13;
                    key: 'problem_type',&#13;
                    value: [&#13;
                        SysAid.params.category_level_1,&#13;
                        SysAid.params.category_level_2,&#13;
                        SysAid.params.category_level_3&#13;
                    ].join('_')&#13;
                },&#13;
                {&#13;
                    key: 'title',&#13;
                    value: subject&#13;
                },&#13;
                {&#13;
                    key: 'description',&#13;
                    value: message&#13;
                },&#13;
                {&#13;
                    key: 'status',&#13;
                    value: '1'&#13;
                },&#13;
                {&#13;
                    key: 'urgency',&#13;
                    value: SysAid.params.urgency_id&#13;
                },&#13;
                {&#13;
                    key: 'priority',&#13;
                    value: priority || SysAid.params.default_priority_id,&#13;
                }&#13;
            ]&#13;
        });&#13;
&#13;
        if (result.response.id === 'undefined') {&#13;
            throw 'Cannot create SysAid incident. Check debug log for more information.';&#13;
        }&#13;
&#13;
        return result.response.id;&#13;
    },&#13;
&#13;
    updateTicket: function(note) {&#13;
        var date = new Date().getTime();&#13;
&#13;
        SysAid.request('put', 'api/v1/sr/' + encodeURIComponent(SysAid.params.incident_id), {&#13;
            id: SysAid.params.incident_id,&#13;
            info: [&#13;
                {&#13;
                    key: 'update_time',&#13;
                    value: date&#13;
                },&#13;
                {&#13;
                    key: 'notes',&#13;
                    value: [&#13;
                        {&#13;
                            userName: 'Zabbix',&#13;
                            createDate: date,&#13;
                            text: note&#13;
                        }&#13;
                    ]&#13;
                }&#13;
            ]&#13;
        });&#13;
    }&#13;
};&#13;
&#13;
try {&#13;
    var params = JSON.parse(value),&#13;
        params_sysaid = {},&#13;
        params_update = {},&#13;
        result = {tags: {}},&#13;
        required_params = ['alert_subject', 'event_source', 'event_value',  'event_update_status'],&#13;
        severities = [&#13;
            {name: 'not_classified', color: '#97AAB3'},&#13;
            {name: 'information', color: '#7499FF'},&#13;
            {name: 'warning', color: '#FFC859'},&#13;
            {name: 'average', color: '#FFA059'},&#13;
            {name: 'high', color: '#E97659'},&#13;
            {name: 'disaster', color: '#E45959'},&#13;
            {name: 'resolved', color: '#009900'},&#13;
            {name: null, color: '#000000'}&#13;
        ],&#13;
        priority;&#13;
&#13;
    Object.keys(params)&#13;
        .forEach(function (key) {&#13;
            if (key.startsWith('sysaid_')) {&#13;
                params_sysaid[key.substring(7)] = params[key];&#13;
            }&#13;
            else if (key.startsWith('event_update_')) {&#13;
                params_update[key.substring(13)] = params[key];&#13;
            }&#13;
            else if (required_params.indexOf(key) !== -1 &amp;&amp; params[key].trim() === '') {&#13;
                throw 'Parameter &quot;' + key + '&quot; cannot be empty.';&#13;
            }&#13;
        });&#13;
&#13;
    if ([0, 1, 2, 3].indexOf(parseInt(params.event_source)) === -1) {&#13;
        throw 'Incorrect &quot;event_source&quot; parameter given: ' + params.event_source + '\nMust be 0-3.';&#13;
    }&#13;
&#13;
    // Check {EVENT.VALUE} for trigger-based and internal events.&#13;
    if (params.event_value !== '0' &amp;&amp; params.event_value !== '1'&#13;
        &amp;&amp; (params.event_source === '0' || params.event_source === '3')) {&#13;
        throw 'Incorrect &quot;event_value&quot; parameter given: ' + params.event_value + '\nMust be 0 or 1.';&#13;
    }&#13;
&#13;
    // Check {EVENT.UPDATE.STATUS} only for trigger-based events.&#13;
    if (params.event_source === '0' &amp;&amp; params.event_update_status !== '0' &amp;&amp; params.event_update_status !== '1') {&#13;
        throw 'Incorrect &quot;event_update_status&quot; parameter given: ' + params.event_update_status + '\nMust be 0 or 1.';&#13;
    }&#13;
&#13;
    if (params.event_source !== '0' &amp;&amp; params.event_value === '0') {&#13;
        throw 'Recovery operations are supported only for trigger-based actions.';&#13;
    }&#13;
&#13;
    if (params.event_source === '0' &amp;&amp; ((params.event_value === '1' &amp;&amp; params.event_update_status === '1')&#13;
            || (params.event_value === '0' &amp;&amp; (params.event_update_status === '0' || params.event_update_status === '1')))&#13;
            &amp;&amp; (isNaN(parseInt(params.sysaid_incident_id)) || parseInt(params.sysaid_incident_id) &lt; 1 )) {&#13;
        throw 'Incorrect &quot;sysaid_incident_id&quot; parameter given: ' + params.sysaid_incident_id + '\nMust be positive integer.';&#13;
    }&#13;
&#13;
    if ([0, 1, 2, 3, 4, 5].indexOf(parseInt(params.event_nseverity)) === -1) {&#13;
        params.event_nseverity = '7';&#13;
    }&#13;
&#13;
    if (params.event_value === '0') {&#13;
        params.event_nseverity = '6';&#13;
    }&#13;
&#13;
    priority = params['severity_' + severities[params.event_nseverity].name];&#13;
    priority = priority &amp;&amp; priority.trim() || severities[7].name;&#13;
&#13;
    SysAid.setParams(params_sysaid);&#13;
    SysAid.HTTPProxy = params.HTTPProxy;&#13;
    SysAid.login();&#13;
&#13;
    if (params.event_source !== '0' &amp;&amp; params.event_value !== '0') {&#13;
        // Create ticket for non trigger-based events.&#13;
        SysAid.createIncident(params.alert_subject, params.alert_message, priority);&#13;
    }&#13;
    else if (params.event_value === '1' &amp;&amp; params_update.status === '0') {&#13;
        // Create ticket for trigger-based events.&#13;
        var incident_id = SysAid.createIncident(params.alert_subject, params.alert_subject + '\n' + params.alert_message +&#13;
                '\n' + params.zabbix_url + (params.zabbix_url.endsWith('/') ? '' : '/') + 'tr_events.php?triggerid=' +&#13;
                params.trigger_id + '&amp;eventid=' + params.event_id + '\n', priority&#13;
        );&#13;
&#13;
        result.tags.__zbx_sysaid_incident_id = incident_id;&#13;
        result.tags.__zbx_sysaid_incidentlink = params.sysaid_url +&#13;
            (params.sysaid_url.endsWith('/') ? '' : '/') + 'SREdit.jsp?id=' + incident_id + '&amp;fromId=IncidentsList';&#13;
    }&#13;
    else {&#13;
        // Update created ticket for trigger-based event.&#13;
        SysAid.updateTicket(params.alert_subject + '\n' + params.alert_message);&#13;
    }&#13;
&#13;
    return JSON.stringify(result);&#13;
}&#13;
catch (error) {&#13;
    Zabbix.Log(3, '[ SysAid Webhook ] ERROR: ' + error);&#13;
    throw 'Sending failed: ' + error;&#13;
}</script>
            <process_tags>YES</process_tags>
            <show_event_menu>YES</show_event_menu>
            <event_menu_url>{EVENT.TAGS.__zbx_sysaid_incidentlink}</event_menu_url>
            <event_menu_name>SysAid: incident #{EVENT.TAGS.__zbx_sysaid_incident_id}</event_menu_name>
            <message_templates>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Problem: {EVENT.NAME}</subject>
                    <message>Problem started at {EVENT.TIME} on {EVENT.DATE}&#13;
Problem name: {EVENT.NAME}&#13;
Host: {HOST.NAME}&#13;
Severity: {EVENT.SEVERITY}&#13;
Operational data: {EVENT.OPDATA}&#13;
Original problem ID: {EVENT.ID}&#13;
{TRIGGER.URL}</message>
                </message_template>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>RECOVERY</operation_mode>
                    <subject>Resolved: {EVENT.NAME}</subject>
                    <message>Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&#13;
Problem name: {EVENT.NAME}&#13;
Host: {HOST.NAME}&#13;
Severity: {EVENT.SEVERITY}&#13;
Original problem ID: {EVENT.ID}&#13;
{TRIGGER.URL}</message>
                </message_template>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>UPDATE</operation_mode>
                    <subject>Updated problem: {EVENT.NAME}</subject>
                    <message>{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&#13;
{EVENT.UPDATE.MESSAGE}&#13;
&#13;
Current problem status is {EVENT.STATUS}, acknowledged: {EVENT.ACK.STATUS}.</message>
                </message_template>
                <message_template>
                    <event_source>DISCOVERY</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}</subject>
                    <message>Discovery rule: {DISCOVERY.RULE.NAME}&#13;
&#13;
Device IP: {DISCOVERY.DEVICE.IPADDRESS}&#13;
Device DNS: {DISCOVERY.DEVICE.DNS}&#13;
Device status: {DISCOVERY.DEVICE.STATUS}&#13;
Device uptime: {DISCOVERY.DEVICE.UPTIME}&#13;
&#13;
Device service name: {DISCOVERY.SERVICE.NAME}&#13;
Device service port: {DISCOVERY.SERVICE.PORT}&#13;
Device service status: {DISCOVERY.SERVICE.STATUS}&#13;
Device service uptime: {DISCOVERY.SERVICE.UPTIME}</message>
                </message_template>
                <message_template>
                    <event_source>AUTOREGISTRATION</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Autoregistration: {HOST.HOST}</subject>
                    <message>Host name: {HOST.HOST}&#13;
Host IP: {HOST.IP}&#13;
Agent port: {HOST.PORT}</message>
                </message_template>
            </message_templates>
        </media_type>
    </media_types>
</zabbix_export>
