<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
    <version>5.0</version>
    <date>2020-04-20T00:00:00Z</date>
    <media_types>
        <media_type>
            <name>SIGNL4</name>
            <type>WEBHOOK</type>
            <parameters>
                <parameter>
                    <name>Host IP</name>
                    <value>{HOST.IP}</value>
                </parameter>
                <parameter>
                    <name>Hostname</name>
                    <value>{HOST.NAME}</value>
                </parameter>
                <parameter>
                    <name>Message</name>
                    <value>{ALERT.MESSAGE}</value>
                </parameter>
                <parameter>
                    <name>Severity</name>
                    <value>{EVENT.SEVERITY}</value>
                </parameter>
                <parameter>
                    <name>Subject</name>
                    <value>{ALERT.SUBJECT}</value>
                </parameter>
                <parameter>
                    <name>teamsecret</name>
                    <value>{ALERT.SENDTO}</value>
                </parameter>
                <parameter>
                    <name>X-S4-ExternalID</name>
                    <value>Zabbix event id: {EVENT.ID}</value>
                </parameter>
            </parameters>
            <script>// SIGNL4 Webhook&#13;
try {&#13;
    var response,&#13;
        payload,&#13;
        params = JSON.parse(value),&#13;
        endpoint = 'https://connect.signl4.com/webhook/',&#13;
        request = new CurlHttpRequest();&#13;
&#13;
    if (typeof params.HTTPProxy === 'string' &amp;&amp; params.HTTPProxy.trim() !== '') {&#13;
        request.SetProxy(params.HTTPProxy);&#13;
    }&#13;
&#13;
    if (typeof params.teamsecret === 'string' &amp;&amp; params.teamsecret.trim() !== '') {&#13;
        endpoint += params.teamsecret;&#13;
        delete params.teamsecret;&#13;
    }&#13;
    else {&#13;
        throw 'The team secret of your SIGNL4 team cannot be empty.';&#13;
    }&#13;
&#13;
    if (typeof params.Severity === 'string' &amp;&amp; params.Severity === '{EVENT.SEVERITY}') {&#13;
        params.Severity = 'Not classified';&#13;
    }&#13;
&#13;
    payload = JSON.stringify(params);&#13;
    Zabbix.Log(4, '[ SIGNL4 Webhook ] Sending request: ' + payload);&#13;
&#13;
    request.AddHeader('Content-Type: application/json');&#13;
    response = request.Post(endpoint, 'payload=' + payload);&#13;
&#13;
    Zabbix.Log(4, '[ SIGNL4 Webhook ] Received response with status code ' +&#13;
            request.Status() + '\n' + response&#13;
    );&#13;
&#13;
    if (request.Status() !== 201) {&#13;
        throw 'Request failed with status code ' + request.Status() +&#13;
                '. Check debug log for more information.';&#13;
    }&#13;
&#13;
    return 'OK';&#13;
}&#13;
catch (error) {&#13;
    Zabbix.Log(4, '[ SIGNL4 Webhook ] ERROR: ' + error);&#13;
&#13;
    throw 'Sending failed: ' + error;&#13;
}</script>
            <description>SIGNL4 is a mobile alert notification app for powerful alerting, alert management and mobile assignment of work items. It offers alerting via app push, SMS and voice calls including escalations, tracking, and duty scheduling.&#13;
&#13;
Get the app at https://www.signl4.com.</description>
            <message_templates>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Problem: {EVENT.NAME}</subject>
                    <message>Problem started at {EVENT.TIME} on {EVENT.DATE}&#13;
Problem name: {EVENT.NAME}&#13;
Host: {HOST.NAME}&#13;
Severity: {EVENT.SEVERITY}&#13;
Operational data: {EVENT.OPDATA}&#13;
Original problem ID: {EVENT.ID}&#13;
{TRIGGER.URL}</message>
                </message_template>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>RECOVERY</operation_mode>
                    <subject>Resolved: {EVENT.NAME}</subject>
                    <message>Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&#13;
Problem name: {EVENT.NAME}&#13;
Host: {HOST.NAME}&#13;
Severity: {EVENT.SEVERITY}&#13;
Original problem ID: {EVENT.ID}&#13;
{TRIGGER.URL}</message>
                </message_template>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>UPDATE</operation_mode>
                    <subject>Updated problem: {EVENT.NAME}</subject>
                    <message>{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&#13;
{EVENT.UPDATE.MESSAGE}&#13;
&#13;
Current problem status is {EVENT.STATUS}, acknowledged: {EVENT.ACK.STATUS}.</message>
                </message_template>
                <message_template>
                    <event_source>DISCOVERY</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}</subject>
                    <message>Discovery rule: {DISCOVERY.RULE.NAME}&#13;
&#13;
Device IP: {DISCOVERY.DEVICE.IPADDRESS}&#13;
Device DNS: {DISCOVERY.DEVICE.DNS}&#13;
Device status: {DISCOVERY.DEVICE.STATUS}&#13;
Device uptime: {DISCOVERY.DEVICE.UPTIME}&#13;
&#13;
Device service name: {DISCOVERY.SERVICE.NAME}&#13;
Device service port: {DISCOVERY.SERVICE.PORT}&#13;
Device service status: {DISCOVERY.SERVICE.STATUS}&#13;
Device service uptime: {DISCOVERY.SERVICE.UPTIME}</message>
                </message_template>
                <message_template>
                    <event_source>AUTOREGISTRATION</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Autoregistration: {HOST.HOST}</subject>
                    <message>Host name: {HOST.HOST}&#13;
Host IP: {HOST.IP}&#13;
Agent port: {HOST.PORT}</message>
                </message_template>
            </message_templates>
        </media_type>
    </media_types>
</zabbix_export>
