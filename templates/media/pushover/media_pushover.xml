<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
    <version>5.0</version>
    <date>2020-08-18T11:11:56Z</date>
    <media_types>
        <media_type>
            <name>Pushover</name>
            <type>WEBHOOK</type>
            <parameters>
                <parameter>
                    <name>endpoint</name>
                    <value>https://api.pushover.net/1/messages.json</value>
                </parameter>
                <parameter>
                    <name>eventid</name>
                    <value>{EVENT.ID}</value>
                </parameter>
                <parameter>
                    <name>event_nseverity</name>
                    <value>{EVENT.NSEVERITY}</value>
                </parameter>
                <parameter>
                    <name>event_source</name>
                    <value>{EVENT.SOURCE}</value>
                </parameter>
                <parameter>
                    <name>event_value</name>
                    <value>{EVENT.VALUE}</value>
                </parameter>
                <parameter>
                    <name>expire</name>
                    <value>1200</value>
                </parameter>
                <parameter>
                    <name>message</name>
                    <value>{ALERT.MESSAGE}</value>
                </parameter>
                <parameter>
                    <name>priority_average</name>
                    <value>0</value>
                </parameter>
                <parameter>
                    <name>priority_default</name>
                    <value>0</value>
                </parameter>
                <parameter>
                    <name>priority_disaster</name>
                    <value>0</value>
                </parameter>
                <parameter>
                    <name>priority_high</name>
                    <value>0</value>
                </parameter>
                <parameter>
                    <name>priority_information</name>
                    <value>0</value>
                </parameter>
                <parameter>
                    <name>priority_not_classified</name>
                    <value>0</value>
                </parameter>
                <parameter>
                    <name>priority_warning</name>
                    <value>0</value>
                </parameter>
                <parameter>
                    <name>retry</name>
                    <value>60</value>
                </parameter>
                <parameter>
                    <name>title</name>
                    <value>{ALERT.SUBJECT}</value>
                </parameter>
                <parameter>
                    <name>token</name>
                    <value>&lt;PUSHOVER TOKEN HERE&gt;</value>
                </parameter>
                <parameter>
                    <name>triggerid</name>
                    <value>{TRIGGER.ID}</value>
                </parameter>
                <parameter>
                    <name>url</name>
                    <value>{$ZABBIX.URL}</value>
                </parameter>
                <parameter>
                    <name>url_title</name>
                    <value>Zabbix</value>
                </parameter>
                <parameter>
                    <name>user</name>
                    <value>{ALERT.SENDTO}</value>
                </parameter>
            </parameters>
            <max_sessions>0</max_sessions>
            <script>try {&#13;
    var params = JSON.parse(value),&#13;
        request = new CurlHttpRequest(),&#13;
        data,&#13;
        response,&#13;
        severities = [&#13;
            {name: 'not_classified', color: '#97AAB3'},&#13;
            {name: 'information', color: '#7499FF'},&#13;
            {name: 'warning', color: '#FFC859'},&#13;
            {name: 'average', color: '#FFA059'},&#13;
            {name: 'high', color: '#E97659'},&#13;
            {name: 'disaster', color: '#E45959'},&#13;
            {name: 'resolved', color: '#009900'},&#13;
            {name: 'default', color: '#000000'}&#13;
        ],&#13;
        priority;&#13;
&#13;
    if (typeof params.HTTPProxy === 'string' &amp;&amp; params.HTTPProxy.trim() !== '') {&#13;
        request.SetProxy(params.HTTPProxy);&#13;
    }&#13;
&#13;
    if ([0, 1, 2, 3].indexOf(parseInt(params.event_source)) === -1) {&#13;
        throw 'Incorrect &quot;event_source&quot; parameter given: &quot;' + params.event_source + '&quot;.\nMust be 0-3.';&#13;
    }&#13;
&#13;
    if (params.event_value !== '0' &amp;&amp; params.event_value !== '1'&#13;
        &amp;&amp; (params.event_source === '0' || params.event_source === '3')) {&#13;
        throw 'Incorrect &quot;event_value&quot; parameter given: ' + params.event_value + '\nMust be 0 or 1.';&#13;
    }&#13;
&#13;
    if ([0, 1, 2, 3, 4, 5].indexOf(parseInt(params.event_nseverity)) === -1) {&#13;
        params.event_nseverity = '7';&#13;
    }&#13;
&#13;
    if (params.event_value === '0') {&#13;
        params.event_nseverity = '6';&#13;
    }&#13;
&#13;
    priority = params['priority_' + severities[params.event_nseverity].name] || params.priority_default;&#13;
&#13;
    if (isNaN(priority) || priority &lt; -2 || priority &gt; 2) {&#13;
        throw '&quot;priority&quot; should be -2..2';&#13;
    }&#13;
&#13;
    if (params.event_source === '0' &amp;&amp; isNaN(params.triggerid)) {&#13;
        throw 'field &quot;triggerid&quot; is not a number';&#13;
    }&#13;
&#13;
    if (isNaN(params.eventid)) {&#13;
        throw 'field &quot;eventid&quot; is not a number';&#13;
    }&#13;
&#13;
    if (typeof params.message !== 'string' || params.message.trim() === '') {&#13;
        throw 'field &quot;message&quot; cannot be empty';&#13;
    }&#13;
&#13;
    data = {&#13;
        token: params.token,&#13;
        user: params.user,&#13;
        title: params.title,&#13;
        message: params.message,&#13;
        url: (params.event_source === '0') &#13;
            ? params.url + '/tr_events.php?triggerid=' + params.triggerid + '&amp;eventid=' + params.eventid&#13;
            : params.url,&#13;
        url_title: params.url_title,&#13;
        priority: priority&#13;
    };&#13;
&#13;
    if (priority == 2) {&#13;
        if (isNaN(params.retry) || params.retry &lt; 30) {&#13;
            throw 'field &quot;retry&quot; should be a number with value of at least 30 if &quot;priority&quot; is set to 2';&#13;
        }&#13;
&#13;
        if (isNaN(params.expire) || params.expire &gt; 10800) {&#13;
            throw 'field &quot;expire&quot; should be a number with value of at most 10800 if &quot;priority&quot; is set to 2';&#13;
        }&#13;
&#13;
        data.retry = params.retry;&#13;
        data.expire = params.expire;&#13;
    }&#13;
&#13;
    data = JSON.stringify(data);&#13;
    Zabbix.Log(4, '[ Pushover Webhook ] Sending request: ' + params.endpoint + '\n' + data);&#13;
&#13;
    request.AddHeader('Content-Type: application/json');&#13;
    response = request.Post(params.endpoint, data);&#13;
&#13;
    Zabbix.Log(4, '[ Pushover Webhook ] Received response with status code ' + request.Status() + '\n' + response);&#13;
&#13;
    if (response !== null) {&#13;
        try {&#13;
            response = JSON.parse(response);&#13;
        }&#13;
        catch (error) {&#13;
            Zabbix.Log(4, '[ Pushover Webhook ] Failed to parse response received from Pushover');&#13;
            response = null;&#13;
        }&#13;
    }&#13;
&#13;
    if (request.Status() != 200 || response === null || typeof response !== 'object' || response.status !== 1) {&#13;
        if (response !== null &amp;&amp; typeof response === 'object' &amp;&amp; typeof response.errors === 'object'&#13;
                &amp;&amp; typeof response.errors[0] === 'string') {&#13;
            throw response.errors[0];&#13;
        }&#13;
        else {&#13;
            throw 'Unknown error. Check debug log for more information.';&#13;
        }&#13;
    }&#13;
&#13;
    return 'OK';&#13;
}&#13;
catch (error) {&#13;
    Zabbix.Log(4, '[ Pushover Webhook ] Pushover notification failed: ' + error);&#13;
    throw 'Pushover notification failed: ' + error;&#13;
}</script>
            <description>Please refer to setup guide here: https://git.zabbix.com/projects/ZBX/repos/zabbix/browse/templates/media/pushover&#13;
&#13;
Set token parameter with to your Pushover application key.&#13;
When assigning Pushover media to the Zabbix user - add user key into send to field.</description>
            <message_templates>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Problem: {EVENT.NAME}</subject>
                    <message>Problem started at {EVENT.TIME} on {EVENT.DATE}&#13;
Problem name: {EVENT.NAME}&#13;
Host: {HOST.NAME}&#13;
Severity: {EVENT.SEVERITY}&#13;
Operational data: {EVENT.OPDATA}&#13;
Original problem ID: {EVENT.ID}&#13;
{TRIGGER.URL}</message>
                </message_template>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>RECOVERY</operation_mode>
                    <subject>Resolved in {EVENT.DURATION}: {EVENT.NAME}</subject>
                    <message>Problem has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&#13;
Problem name: {EVENT.NAME}&#13;
Problem duration: {EVENT.DURATION}&#13;
Host: {HOST.NAME}&#13;
Severity: {EVENT.SEVERITY}&#13;
Original problem ID: {EVENT.ID}&#13;
{TRIGGER.URL}</message>
                </message_template>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>UPDATE</operation_mode>
                    <subject>Updated problem in {EVENT.AGE}: {EVENT.NAME}</subject>
                    <message>{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&#13;
{EVENT.UPDATE.MESSAGE}&#13;
&#13;
Current problem status is {EVENT.STATUS}, age is {EVENT.AGE}, acknowledged: {EVENT.ACK.STATUS}.</message>
                </message_template>
                <message_template>
                    <event_source>DISCOVERY</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}</subject>
                    <message>Discovery rule: {DISCOVERY.RULE.NAME}&#13;
&#13;
Device IP: {DISCOVERY.DEVICE.IPADDRESS}&#13;
Device DNS: {DISCOVERY.DEVICE.DNS}&#13;
Device status: {DISCOVERY.DEVICE.STATUS}&#13;
Device uptime: {DISCOVERY.DEVICE.UPTIME}&#13;
&#13;
Device service name: {DISCOVERY.SERVICE.NAME}&#13;
Device service port: {DISCOVERY.SERVICE.PORT}&#13;
Device service status: {DISCOVERY.SERVICE.STATUS}&#13;
Device service uptime: {DISCOVERY.SERVICE.UPTIME}</message>
                </message_template>
                <message_template>
                    <event_source>AUTOREGISTRATION</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Autoregistration: {HOST.HOST}</subject>
                    <message>Host name: {HOST.HOST}&#13;
Host IP: {HOST.IP}&#13;
Agent port: {HOST.PORT}</message>
                </message_template>
            </message_templates>
        </media_type>
    </media_types>
</zabbix_export>
