<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
   <version>5.0</version>
   <date>2020-11-27T09:13:17Z</date>
   <groups>
      <group>
         <name>Templates/Telephony</name>
      </group>
   </groups>
   <templates>
      <template>
         <template>Template Tel Asterisk by HTTP</template>
         <name>Template Tel Asterisk by HTTP</name>
         <description>The template gets Asterisk metrics from AMI by HTTP agent. You should enable the mini-HTTP Server, add the option webenabled=yes in the general section of the manager.conf file and create Asterisk Manager user with system and command write permissions within your Asterisk instance. Please, define AMI address in the {$AMI.URL} macro. Also, the Zabbix host should have an Agent interface with the AMI address to check Asterisk service status. Then you can define {$AMI.USERNAME} and {$AMI.SECRET} macros in the template for using on the host level. If there are errors, increase the logging to debug level and see the Zabbix server log.&#13;
&#13;
You can discuss this template or leave feedback on our forum https://www.zabbix.com/forum/zabbix-suggestions-and-feedback/410060-discussion-thread-for-official-zabbix-template-asterisk&#13;
&#13;
Template tooling version used: 0.38</description>
         <groups>
            <group>
               <name>Templates/Telephony</name>
            </group>
         </groups>
         <applications>
            <application>
               <name>Asterisk</name>
            </application>
            <application>
               <name>Zabbix raw items</name>
            </application>
         </applications>
         <items>
            <item>
               <name>Asterisk: Active calls</name>
               <type>DEPENDENT</type>
               <key>asterisk.active_calls</key>
               <delay>0</delay>
               <history>7d</history>
               <description>The number of active calls at the moment.</description>
               <applications>
                  <application>
                     <name>Asterisk</name>
                  </application>
               </applications>
               <preprocessing>
                  <step>
                     <type>JSONPATH</type>
                     <params>$.active_calls</params>
                  </step>
               </preprocessing>
               <master_item>
                  <key>asterisk.get_stats</key>
               </master_item>
            </item>
            <item>
               <name>Asterisk: Active channels</name>
               <type>DEPENDENT</type>
               <key>asterisk.active_channels</key>
               <delay>0</delay>
               <history>7d</history>
               <description>The number of active channels at the moment.</description>
               <applications>
                  <application>
                     <name>Asterisk</name>
                  </application>
               </applications>
               <preprocessing>
                  <step>
                     <type>JSONPATH</type>
                     <params>$.active_channels</params>
                  </step>
               </preprocessing>
               <master_item>
                  <key>asterisk.get_stats</key>
               </master_item>
            </item>
            <item>
               <name>Asterisk: Calls processed</name>
               <type>DEPENDENT</type>
               <key>asterisk.calls_processed</key>
               <delay>0</delay>
               <history>7d</history>
               <description>The number of calls processed after the last service restart.</description>
               <applications>
                  <application>
                     <name>Asterisk</name>
                  </application>
               </applications>
               <preprocessing>
                  <step>
                     <type>JSONPATH</type>
                     <params>$.calls_processed</params>
                  </step>
               </preprocessing>
               <master_item>
                  <key>asterisk.get_stats</key>
               </master_item>
            </item>
            <item>
               <name>Asterisk: Calls processed per second</name>
               <type>DEPENDENT</type>
               <key>asterisk.calls_processed.rate</key>
               <delay>0</delay>
               <history>7d</history>
               <value_type>FLOAT</value_type>
               <description>The number of calls processed per second.</description>
               <applications>
                  <application>
                     <name>Asterisk</name>
                  </application>
               </applications>
               <preprocessing>
                  <step>
                     <type>JSONPATH</type>
                     <params>$.calls_processed</params>
                  </step>
                  <step>
                     <type>CHANGE_PER_SECOND</type>
                     <params/>
                  </step>
               </preprocessing>
               <master_item>
                  <key>asterisk.get_stats</key>
               </master_item>
            </item>
            <item>
               <name>Asterisk: Get stats</name>
               <type>HTTP_AGENT</type>
               <key>asterisk.get_stats</key>
               <history>0</history>
               <trends>0</trends>
               <value_type>TEXT</value_type>
               <description>Asterisk system information in JSON format.</description>
               <applications>
                  <application>
                     <name>Zabbix raw items</name>
                  </application>
               </applications>
               <preprocessing>
                  <step>
                     <type>JAVASCRIPT</type>
                     <params>var Ami = {
    params: {
        url: '{$AMI.URL}',
        trunk: '{$AMI.TRUNK_REGEXP}'
    },
    api_request: new CurlHttpRequest(),

    request: function (url, action) {
        url += action;
        Zabbix.Log(4, '[ Asterisk ] Sending request: ' + url);
        try {
            response = Ami.api_request.Get(url);
        } catch (error) {
            Zabbix.Log(4, '[ Asterisk ] Get request returned error ' + error);
            throw 'Get request returned error ' + error + '. Check debug log for more information.';
        }
        Zabbix.Log(4, '[ Asterisk ] Received response with status code ' +
            Ami.api_request.Status() + '\n' + response);

        if (Ami.api_request.Status() !== 200) {
            var message = 'Request failed with status code ' + Ami.api_request.Status();
            if (response !== null) {
                if (typeof response.message === 'string') {
                    message += ': ' + response.message;
                }
            }

            throw message + ' Check debug log for more information.';
        }

        var match = response.match('Response: (.+)\r\n');
        if (match !== null &amp;&amp; match[1] !== 'Success' &amp;&amp; match[1] !== 'Goodbye' &amp;&amp; match[1] !== 'Follows') {
            var message = 'Request failed with message ' + match[1];

            match = response.match('Message: (.+)\r\n');
            if (match !== null &amp;&amp; match[1]) {
                message += ': ' + match[1];
            }

            throw message + '. Check debug log for more information.';
        }

        return {
            status: Ami.api_request.Status(),
            body: response
        };
    }
};

var asterisk = {
    version: '',
    uptime: 0,
    uptime_reload: 0,
    active_channels: 0,
    active_calls: 0,
    calls_processed: 0,
    sip: {
        trunks: [],
        monitored_online: 0,
        monitored_offline: 0,
        unmonitored_online: 0,
        unmonitored_offline: 0,
        total: 0
    },
    iax: {
        trunks: [],
        online: 0,
        offline: 0,
        unmonitored: 0,
        total: 0
    },
    pjsip: {
        trunks: [],
        available: 0,
        unavailable: 0,
        total: 0
    },
    queue: {
        queues: [],
        total: 0
    }
};

function block2Object(text) {
    var fields = [],
        dict = {};

    text.split('\r\n').forEach(function (line) {
        fields = line.split(': ');
        dict[fields[0]] = fields[1];
    })

    return dict;
}

function text2Object(text) {
    var blocks = text.split('\r\n\r\n'),
        arr = [],
        i = 1,
        j = blocks.length - 2;

    for (i; i &lt; j; i++) {
        arr.push(block2Object(blocks[i]));
    }

    return arr;
}

function getSipPeers() {
    var response = Ami.request(url, 'SIPpeers'),
        elements = text2Object(response.body);
    asterisk.sip.total = elements.length;
    asterisk.sip.trunks = elements.filter(function (element) {
        return element.ObjectName.search(Ami.params.trunk) != -1;
    });
    elements.forEach(function (element) {
        if (element.IPaddress === '-none-') {
            switch (element.Status) {
                case 'Unmonitored':
                    asterisk.sip.unmonitored_offline++;
                    break;

                case 'UNKNOWN':
                    asterisk.sip.monitored_offline++;
                    break;
            }
        }
        else {
            if (element.Status === 'Unmonitored') {
                asterisk.sip.unmonitored_online++;
            }
            else {
                asterisk.sip.monitored_online++;
                if (element.Status.search('^OK') != -1) {
                    element.Status = element.Status.split(' ')[0];
                }
            }
        }
    });
    asterisk.sip.trunks.forEach(function (trunk) {
        var active_channels = channels.match(new RegExp(' SIP/' + trunk.ObjectName.split('/')[0], 'g'));
        trunk.active_channels = (active_channels === null) ? 0 : active_channels.length;
    });
}

function getIaxPeerList() {
    response = Ami.request(url, 'IAXpeerlist');
    elements = text2Object(response.body);
    asterisk.iax.total = elements.length;
    asterisk.iax.trunks = elements.filter(function (element) {
        return element.ObjectName.search(Ami.params.trunk) != -1;
    });
    elements.forEach(function (element) {
        if (element.Status.search('^OK') != -1) {
            element.Status = element.Status.split(' ')[0];
        }
        switch (element.Status) {
            case 'Unmonitored':
                asterisk.iax.unmonitored++;
                break;

            case 'UNKNOWN':
                asterisk.iax.offline++;
                break;
        }
    });
    asterisk.iax.online = asterisk.iax.total - asterisk.iax.offline;
    asterisk.iax.trunks.forEach(function (trunk) {
        var active_channels = channels.match(new RegExp('( IAX2/' + trunk.ObjectName.split('/')[0] +
            '| IAX2/' + trunk.ObjectUsername + ')', 'g'));
        trunk.active_channels = (active_channels === null) ? 0 : active_channels.length;
    });
}

function getPjsipShowEndpoints() {
    response = Ami.request(url, 'PJSIPShowEndpoints');
    elements = text2Object(response.body);
    asterisk.pjsip.total = elements.length;
    asterisk.pjsip.trunks = elements.filter(function (element) {
        return element.ObjectName.search(Ami.params.trunk) != -1;
    });

    elements.forEach(function (element) {
        if (element.DeviceState === 'Unavailable') {
            asterisk.pjsip.unavailable++;
        }
    });
    asterisk.pjsip.available = asterisk.pjsip.total - asterisk.pjsip.unavailable;
    asterisk.pjsip.trunks.forEach(function (trunk) {
        var active_channels = channels.match(new RegExp(' PJSIP/' + trunk.ObjectName.split('/')[0], 'g'));
        trunk.active_channels = (active_channels === null) ? 0 : active_channels.length;
    });
}

function getQueueSummary() {
    response = Ami.request(url, 'QueueSummary');
    asterisk.queue.queues = text2Object(response.body);
    asterisk.queue.total = asterisk.queue.queues.length;
}

var cookie = value.match(/mansession_id="([0-9A-z]+)"/);
if (cookie == null) {
    throw 'Cannot find mansession_id with cookie in response.';
}

var url = Ami.params.url.split('?')[0] + '?action=';

Ami.api_request.AddHeader('Cookie: mansession_id="' + cookie[1] + '"');

var response = Ami.request(url, 'CoreSettings');
var coreSettings = block2Object(response.body);
if (typeof coreSettings.AsteriskVersion !== 'undefined') {
    asterisk.version = coreSettings.AsteriskVersion;
}

response = Ami.request(url, 'CoreStatus');
var coreStatus = block2Object(response.body);
if (typeof coreStatus.CoreStartupDate !== 'undefined') {
    asterisk.uptime = (Date.now() - Date.parse(coreStatus.CoreStartupDate + " " + coreStatus.CoreStartupTime)) / 1000;
}
if (typeof coreStatus.CoreReloadDate !== 'undefined') {
    asterisk.uptime_reload = (Date.now() - Date.parse(coreStatus.CoreReloadDate + " " + coreStatus.CoreReloadTime)) / 1000;
}

response = Ami.request(url, 'command&amp;command=core%20show%20channels');
channels = response.body;
var fields = {
    active_channels: 'active channels?',
    active_calls: 'active calls?',
    calls_processed: 'calls? processed'
};

Object.keys(fields).forEach(function (field) {
    var match = channels.match('(\\d+) ' + fields[field]);
    if (match !== null &amp;&amp; typeof match[1] !== 'undefined') {
        asterisk[field] = parseInt(match[1]);
    }
});

response = Ami.request(url, 'ListCommands');
var list = response.body;
if (list.includes('SIPpeers')) {
    getSipPeers();
}
if (list.includes('IAXpeerlist')) {
    getIaxPeerList();
}
if (list.includes('PJSIPShowEndpoints')) {
    getPjsipShowEndpoints();
}
if (list.includes('QueueSummary')) {
    getQueueSummary();
}

try {
    response = Ami.request(url, 'Logoff');
}
catch (e) {}

return JSON.stringify(asterisk);
</params>
                  </step>
               </preprocessing>
               <url>{$AMI.URL}</url>
               <query_fields>
                  <query_field>
                     <name>action</name>
                     <value>login</value>
                  </query_field>
                  <query_field>
                     <name>username</name>
                     <value>{$AMI.USERNAME}</value>
                  </query_field>
                  <query_field>
                     <name>secret</name>
                     <value>{$AMI.SECRET}</value>
                  </query_field>
               </query_fields>
               <retrieve_mode>HEADERS</retrieve_mode>
            </item>
            <item>
               <name>Asterisk: IAX offline peers</name>
               <type>DEPENDENT</type>
               <key>asterisk.iax.offline</key>
               <delay>0</delay>
               <history>7d</history>
               <description>The number of offline IAX peers.</description>
               <applications>
                  <application>
                     <name>Asterisk</name>
                  </application>
               </applications>
               <preprocessing>
                  <step>
                     <type>JSONPATH</type>
                     <params>$.iax.offline</params>
                  </step>
               </preprocessing>
               <master_item>
                  <key>asterisk.get_stats</key>
               </master_item>
            </item>
            <item>
               <name>Asterisk: IAX online peers</name>
               <type>DEPENDENT</type>
               <key>asterisk.iax.online</key>
               <delay>0</delay>
               <history>7d</history>
               <description>The number of online IAX peers.</description>
               <applications>
                  <application>
                     <name>Asterisk</name>
                  </application>
               </applications>
               <preprocessing>
                  <step>
                     <type>JSONPATH</type>
                     <params>$.iax.online</params>
                  </step>
               </preprocessing>
               <master_item>
                  <key>asterisk.get_stats</key>
               </master_item>
            </item>
            <item>
               <name>Asterisk: IAX peers</name>
               <type>DEPENDENT</type>
               <key>asterisk.iax.total</key>
               <delay>0</delay>
               <history>7d</history>
               <description>The total number of IAX peers.</description>
               <applications>
                  <application>
                     <name>Asterisk</name>
                  </application>
               </applications>
               <preprocessing>
                  <step>
                     <type>JSONPATH</type>
                     <params>$.iax.total</params>
                  </step>
               </preprocessing>
               <master_item>
                  <key>asterisk.get_stats</key>
               </master_item>
            </item>
            <item>
               <name>Asterisk: IAX unmonitored peers</name>
               <type>DEPENDENT</type>
               <key>asterisk.iax.unmonitored</key>
               <delay>0</delay>
               <history>7d</history>
               <description>The number of unmonitored IAX peers.</description>
               <applications>
                  <application>
                     <name>Asterisk</name>
                  </application>
               </applications>
               <preprocessing>
                  <step>
                     <type>JSONPATH</type>
                     <params>$.iax.unmonitored</params>
                  </step>
               </preprocessing>
               <master_item>
                  <key>asterisk.get_stats</key>
               </master_item>
            </item>
            <item>
               <name>Asterisk: PJSIP available endpoints</name>
               <type>DEPENDENT</type>
               <key>asterisk.pjsip.available</key>
               <delay>0</delay>
               <history>7d</history>
               <description>The number of available PJSIP peers.</description>
               <applications>
                  <application>
                     <name>Asterisk</name>
                  </application>
               </applications>
               <preprocessing>
                  <step>
                     <type>JSONPATH</type>
                     <params>$.pjsip.available</params>
                  </step>
               </preprocessing>
               <master_item>
                  <key>asterisk.get_stats</key>
               </master_item>
            </item>
            <item>
               <name>Asterisk: PJSIP endpoints</name>
               <type>DEPENDENT</type>
               <key>asterisk.pjsip.total</key>
               <delay>0</delay>
               <history>7d</history>
               <description>The total number of PJSIP peers.</description>
               <applications>
                  <application>
                     <name>Asterisk</name>
                  </application>
               </applications>
               <preprocessing>
                  <step>
                     <type>JSONPATH</type>
                     <params>$.pjsip.total</params>
                  </step>
               </preprocessing>
               <master_item>
                  <key>asterisk.get_stats</key>
               </master_item>
            </item>
            <item>
               <name>Asterisk: PJSIP unavailable endpoints</name>
               <type>DEPENDENT</type>
               <key>asterisk.pjsip.unavailable</key>
               <delay>0</delay>
               <history>7d</history>
               <description>The number of unavailable PJSIP peers.</description>
               <applications>
                  <application>
                     <name>Asterisk</name>
                  </application>
               </applications>
               <preprocessing>
                  <step>
                     <type>JSONPATH</type>
                     <params>$.pjsip.unavailable</params>
                  </step>
               </preprocessing>
               <master_item>
                  <key>asterisk.get_stats</key>
               </master_item>
            </item>
            <item>
               <name>Asterisk: SIP monitored offline</name>
               <type>DEPENDENT</type>
               <key>asterisk.sip.monitored_offline</key>
               <delay>0</delay>
               <history>7d</history>
               <description>The number of monitored offline SIP peers.</description>
               <applications>
                  <application>
                     <name>Asterisk</name>
                  </application>
               </applications>
               <preprocessing>
                  <step>
                     <type>JSONPATH</type>
                     <params>$.sip.monitored_offline</params>
                  </step>
               </preprocessing>
               <master_item>
                  <key>asterisk.get_stats</key>
               </master_item>
            </item>
            <item>
               <name>Asterisk: SIP monitored online</name>
               <type>DEPENDENT</type>
               <key>asterisk.sip.monitored_online</key>
               <delay>0</delay>
               <history>7d</history>
               <description>The number of monitored online SIP peers.</description>
               <applications>
                  <application>
                     <name>Asterisk</name>
                  </application>
               </applications>
               <preprocessing>
                  <step>
                     <type>JSONPATH</type>
                     <params>$.sip.monitored_online</params>
                  </step>
               </preprocessing>
               <master_item>
                  <key>asterisk.get_stats</key>
               </master_item>
            </item>
            <item>
               <name>Asterisk: SIP peers</name>
               <type>DEPENDENT</type>
               <key>asterisk.sip.total</key>
               <delay>0</delay>
               <history>7d</history>
               <description>The total number of SIP peers.</description>
               <applications>
                  <application>
                     <name>Asterisk</name>
                  </application>
               </applications>
               <preprocessing>
                  <step>
                     <type>JSONPATH</type>
                     <params>$.sip.total</params>
                  </step>
               </preprocessing>
               <master_item>
                  <key>asterisk.get_stats</key>
               </master_item>
            </item>
            <item>
               <name>Asterisk: SIP unmonitored offline</name>
               <type>DEPENDENT</type>
               <key>asterisk.sip.unmonitored_offline</key>
               <delay>0</delay>
               <history>7d</history>
               <description>The number of unmonitored offline SIP peers.</description>
               <applications>
                  <application>
                     <name>Asterisk</name>
                  </application>
               </applications>
               <preprocessing>
                  <step>
                     <type>JSONPATH</type>
                     <params>$.sip.unmonitored_offline</params>
                  </step>
               </preprocessing>
               <master_item>
                  <key>asterisk.get_stats</key>
               </master_item>
            </item>
            <item>
               <name>Asterisk: SIP unmonitored online</name>
               <type>DEPENDENT</type>
               <key>asterisk.sip.unmonitored_online</key>
               <delay>0</delay>
               <history>7d</history>
               <description>The number of unmonitored online SIP peers.</description>
               <applications>
                  <application>
                     <name>Asterisk</name>
                  </application>
               </applications>
               <preprocessing>
                  <step>
                     <type>JSONPATH</type>
                     <params>$.sip.unmonitored_online</params>
                  </step>
               </preprocessing>
               <master_item>
                  <key>asterisk.get_stats</key>
               </master_item>
            </item>
            <item>
               <name>Asterisk: Total queues</name>
               <type>DEPENDENT</type>
               <key>asterisk.total_queues</key>
               <delay>0</delay>
               <history>7d</history>
               <description>The number of configured queues.</description>
               <applications>
                  <application>
                     <name>Asterisk</name>
                  </application>
               </applications>
               <preprocessing>
                  <step>
                     <type>JSONPATH</type>
                     <params>$.queue.total</params>
                  </step>
               </preprocessing>
               <master_item>
                  <key>asterisk.get_stats</key>
               </master_item>
            </item>
            <item>
               <name>Asterisk: Uptime</name>
               <type>DEPENDENT</type>
               <key>asterisk.uptime</key>
               <delay>0</delay>
               <history>7d</history>
               <value_type>FLOAT</value_type>
               <units>uptime</units>
               <description>System uptime in 'N days, hh:mm:ss' format.</description>
               <applications>
                  <application>
                     <name>Asterisk</name>
                  </application>
               </applications>
               <preprocessing>
                  <step>
                     <type>JSONPATH</type>
                     <params>$.uptime</params>
                  </step>
               </preprocessing>
               <master_item>
                  <key>asterisk.get_stats</key>
               </master_item>
               <triggers>
                  <trigger>
                     <expression>{last()}&lt;10m</expression>
                     <name>Asterisk: has been restarted (uptime &lt; 10m)</name>
                     <priority>INFO</priority>
                     <description>Uptime is less than 10 minutes</description>
                     <manual_close>YES</manual_close>
                  </trigger>
                  <trigger>
                     <expression>{nodata(30m)}=1</expression>
                     <name>Asterisk: Failed to fetch AMI page (or no data for 30m)</name>
                     <priority>WARNING</priority>
                     <description>Zabbix has not received data for items for the last 30 minutes.</description>
                     <manual_close>YES</manual_close>
                     <dependencies>
                        <dependency>
                           <name>Asterisk: Service is down</name>
                           <expression>{Template Tel Asterisk by HTTP:net.tcp.service["tcp","{HOST.CONN}","{$AMI.PORT}"].last()}=0</expression>
                        </dependency>
                     </dependencies>
                  </trigger>
               </triggers>
            </item>
            <item>
               <name>Asterisk: Uptime after reload</name>
               <type>DEPENDENT</type>
               <key>asterisk.uptime_reload</key>
               <delay>0</delay>
               <history>7d</history>
               <value_type>FLOAT</value_type>
               <units>uptime</units>
               <description>System uptime after a config reload in 'N days, hh:mm:ss' format.</description>
               <applications>
                  <application>
                     <name>Asterisk</name>
                  </application>
               </applications>
               <preprocessing>
                  <step>
                     <type>JSONPATH</type>
                     <params>$.uptime_reload</params>
                  </step>
               </preprocessing>
               <master_item>
                  <key>asterisk.get_stats</key>
               </master_item>
               <triggers>
                  <trigger>
                     <expression>{last()}&lt;10m</expression>
                     <name>Asterisk: has been reloaded (uptime &lt; 10m)</name>
                     <priority>INFO</priority>
                     <description>Uptime is less than 10 minutes</description>
                     <manual_close>YES</manual_close>
                  </trigger>
               </triggers>
            </item>
            <item>
               <name>Asterisk: Version</name>
               <type>DEPENDENT</type>
               <key>asterisk.version</key>
               <delay>0</delay>
               <history>7d</history>
               <trends>0</trends>
               <value_type>CHAR</value_type>
               <description>Service version</description>
               <applications>
                  <application>
                     <name>Asterisk</name>
                  </application>
               </applications>
               <preprocessing>
                  <step>
                     <type>JSONPATH</type>
                     <params>$.version</params>
                  </step>
               </preprocessing>
               <master_item>
                  <key>asterisk.get_stats</key>
               </master_item>
               <triggers>
                  <trigger>
                     <expression>{diff()}=1 and {strlen()}&gt;0</expression>
                     <name>Asterisk: Version has changed (new version: {ITEM.VALUE})</name>
                     <priority>INFO</priority>
                     <description>Asterisk version has changed. Ack to close.</description>
                     <manual_close>YES</manual_close>
                  </trigger>
               </triggers>
            </item>
            <item>
               <name>Asterisk: Service response time</name>
               <type>SIMPLE</type>
               <key>net.tcp.service.perf["tcp","{HOST.CONN}","{$AMI.PORT}"]</key>
               <history>7d</history>
               <value_type>FLOAT</value_type>
               <units>s</units>
               <description>Asterisk Manager API performance.</description>
               <applications>
                  <application>
                     <name>Asterisk</name>
                  </application>
               </applications>
               <triggers>
                  <trigger>
                     <expression>{min(5m)}&gt;{$AMI.RESPONSE_TIME.MAX.WARN}</expression>
                     <name>Asterisk: Service response time is too high (over {$AMI.RESPONSE_TIME.MAX.WARN} for 5m)</name>
                     <priority>WARNING</priority>
                     <manual_close>YES</manual_close>
                     <dependencies>
                        <dependency>
                           <name>Asterisk: Service is down</name>
                           <expression>{Template Tel Asterisk by HTTP:net.tcp.service["tcp","{HOST.CONN}","{$AMI.PORT}"].last()}=0</expression>
                        </dependency>
                     </dependencies>
                  </trigger>
               </triggers>
            </item>
            <item>
               <name>Asterisk: Service status</name>
               <type>SIMPLE</type>
               <key>net.tcp.service["tcp","{HOST.CONN}","{$AMI.PORT}"]</key>
               <history>7d</history>
               <description>Asterisk Manager API port avalability.</description>
               <applications>
                  <application>
                     <name>Asterisk</name>
                  </application>
               </applications>
               <valuemap>
                  <name>Service state</name>
               </valuemap>
               <preprocessing>
                  <step>
                     <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                     <params>10m</params>
                  </step>
               </preprocessing>
               <triggers>
                  <trigger>
                     <expression>{last()}=0</expression>
                     <name>Asterisk: Service is down</name>
                     <priority>AVERAGE</priority>
                     <manual_close>YES</manual_close>
                  </trigger>
               </triggers>
            </item>
         </items>
         <discovery_rules>
            <discovery_rule>
               <name>IAX peers discovery</name>
               <type>DEPENDENT</type>
               <key>asterisk.iax_peers.discovery</key>
               <delay>0</delay>
               <item_prototypes>
                  <item_prototype>
                     <name>IAX trunk "{#OBJECTNAME}": Active channels</name>
                     <type>DEPENDENT</type>
                     <key>asterisk.iax.trunk.active_channels[{#OBJECTNAME}]</key>
                     <delay>0</delay>
                     <history>7d</history>
                     <description>The total number of active IAX trunk channels.</description>
                     <application_prototypes>
                        <application_prototype>
                           <name>Asterisk IAX trunks</name>
                        </application_prototype>
                     </application_prototypes>
                     <preprocessing>
                        <step>
                           <type>JSONPATH</type>
                           <params>$.iax.trunks[?(@.ObjectName=='{#OBJECTNAME}')].active_channels.first()</params>
                        </step>
                     </preprocessing>
                     <master_item>
                        <key>asterisk.get_stats</key>
                     </master_item>
                     <trigger_prototypes>
                        <trigger_prototype>
                           <expression>{min(10m)}&gt;={$AMI.TRUNK_ACTIVE_CHANNELS.MAX.WARN:"{#OBJECTNAME}"}</expression>
                           <name>IAX trunk "{#OBJECTNAME}": Number of the IAX trunk "{#OBJECTNAME}" active channels is too high (over {$AMI.TRUNK_ACTIVE_CHANNELS.MAX.WARN:"{#OBJECTNAME}"} for 10m)</name>
                           <priority>WARNING</priority>
                           <description>The IAX trunk may not be able to process new calls.</description>
                        </trigger_prototype>
                     </trigger_prototypes>
                  </item_prototype>
                  <item_prototype>
                     <name>IAX trunk "{#OBJECTNAME}": Status</name>
                     <type>DEPENDENT</type>
                     <key>asterisk.iax.trunk.status[{#OBJECTNAME}]</key>
                     <delay>0</delay>
                     <history>7d</history>
                     <trends>0</trends>
                     <value_type>CHAR</value_type>
                     <description>IAX trunk status. Here are the possible states that a device state may have:&#13;
Unmonitored&#13;
UNKNOWN&#13;
UNREACHABLE&#13;
OK</description>
                     <application_prototypes>
                        <application_prototype>
                           <name>Asterisk IAX trunks</name>
                        </application_prototype>
                     </application_prototypes>
                     <preprocessing>
                        <step>
                           <type>JSONPATH</type>
                           <params>$.iax.trunks[?(@.ObjectName=='{#OBJECTNAME}')].Status.first()</params>
                        </step>
                        <step>
                           <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                           <params>1h</params>
                        </step>
                     </preprocessing>
                     <master_item>
                        <key>asterisk.get_stats</key>
                     </master_item>
                     <trigger_prototypes>
                        <trigger_prototype>
                           <expression>{last()}="UNKNOWN" or {last()}="UNREACHABLE"</expression>
                           <name>IAX trunk "{#OBJECTNAME}": IAX trunk {#OBJECTNAME} has a state {ITEM.VALUE}</name>
                           <priority>AVERAGE</priority>
                           <description>The IAX trunk is unable to establish a connection with a neighbor due to network issues or incorrect configuration.</description>
                        </trigger_prototype>
                     </trigger_prototypes>
                  </item_prototype>
               </item_prototypes>
               <host_prototypes/>
               <master_item>
                  <key>asterisk.get_stats</key>
               </master_item>
               <lld_macro_paths>
                  <lld_macro_path>
                     <lld_macro>{#OBJECTNAME}</lld_macro>
                     <path>$.ObjectName</path>
                  </lld_macro_path>
               </lld_macro_paths>
               <preprocessing>
                  <step>
                     <type>JSONPATH</type>
                     <params>$.iax.trunks</params>
                  </step>
                  <step>
                     <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                     <params>1h</params>
                  </step>
               </preprocessing>
            </discovery_rule>
            <discovery_rule>
               <name>PJSIP endpoints discovery</name>
               <type>DEPENDENT</type>
               <key>asterisk.pjsip_endpoints.discovery</key>
               <delay>0</delay>
               <item_prototypes>
                  <item_prototype>
                     <name>PJSIP trunk "{#OBJECTNAME}": Active channels</name>
                     <type>DEPENDENT</type>
                     <key>asterisk.pjsip.trunk.active_channels[{#OBJECTNAME}]</key>
                     <delay>0</delay>
                     <history>7d</history>
                     <description>The total number of active PJSIP trunk channels.</description>
                     <application_prototypes>
                        <application_prototype>
                           <name>Asterisk PJSIP trunks</name>
                        </application_prototype>
                     </application_prototypes>
                     <preprocessing>
                        <step>
                           <type>JSONPATH</type>
                           <params>$.pjsip.trunks[?(@.ObjectName=='{#OBJECTNAME}')].active_channels.first()</params>
                        </step>
                     </preprocessing>
                     <master_item>
                        <key>asterisk.get_stats</key>
                     </master_item>
                     <trigger_prototypes>
                        <trigger_prototype>
                           <expression>{min(10m)}&gt;={$AMI.TRUNK_ACTIVE_CHANNELS.MAX.WARN:"{#OBJECTNAME}"}</expression>
                           <name>PJSIP trunk "{#OBJECTNAME}": Number of the PJSIP trunk "{#OBJECTNAME}" active channels is too high (over {$AMI.TRUNK_ACTIVE_CHANNELS.MAX.WARN:"{#OBJECTNAME}"} for 10m)</name>
                           <priority>WARNING</priority>
                           <description>The PJSIP trunk may not be able to process new calls.</description>
                        </trigger_prototype>
                     </trigger_prototypes>
                  </item_prototype>
                  <item_prototype>
                     <name>PJSIP trunk "{#OBJECTNAME}": Device state</name>
                     <type>DEPENDENT</type>
                     <key>asterisk.pjsip.trunk.devicestate[{#OBJECTNAME}]</key>
                     <delay>0</delay>
                     <history>7d</history>
                     <trends>0</trends>
                     <value_type>CHAR</value_type>
                     <description>PJSIP trunk status. Here are the possible states that a device state may have:&#13;
Unavailable&#13;
Not in use&#13;
In use</description>
                     <application_prototypes>
                        <application_prototype>
                           <name>Asterisk PJSIP trunks</name>
                        </application_prototype>
                     </application_prototypes>
                     <preprocessing>
                        <step>
                           <type>JSONPATH</type>
                           <params>$.pjsip.trunks[?(@.ObjectName=='{#OBJECTNAME}')].DeviceState.first()</params>
                        </step>
                        <step>
                           <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                           <params>1h</params>
                        </step>
                     </preprocessing>
                     <master_item>
                        <key>asterisk.get_stats</key>
                     </master_item>
                     <trigger_prototypes>
                        <trigger_prototype>
                           <expression>{last()}="Unavailable"</expression>
                           <name>PJSIP trunk "{#OBJECTNAME}": PJSIP trunk {#OBJECTNAME} has a state Unavailable</name>
                           <priority>AVERAGE</priority>
                           <description>The PJSIP trunk is unable to establish a connection with a neighbor due to network issues or incorrect configuration.</description>
                        </trigger_prototype>
                     </trigger_prototypes>
                  </item_prototype>
               </item_prototypes>
               <host_prototypes/>
               <master_item>
                  <key>asterisk.get_stats</key>
               </master_item>
               <lld_macro_paths>
                  <lld_macro_path>
                     <lld_macro>{#OBJECTNAME}</lld_macro>
                     <path>$.ObjectName</path>
                  </lld_macro_path>
               </lld_macro_paths>
               <preprocessing>
                  <step>
                     <type>JSONPATH</type>
                     <params>$.pjsip.trunks</params>
                  </step>
                  <step>
                     <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                     <params>1h</params>
                  </step>
               </preprocessing>
            </discovery_rule>
            <discovery_rule>
               <name>Queues discovery</name>
               <type>DEPENDENT</type>
               <key>asterisk.queues.discovery</key>
               <delay>0</delay>
               <item_prototypes>
                  <item_prototype>
                     <name>"{#QUEUE}": Available</name>
                     <type>DEPENDENT</type>
                     <key>asterisk.queue.available[{#QUEUE}]</key>
                     <delay>0</delay>
                     <history>7d</history>
                     <description>The number of available queue members.</description>
                     <application_prototypes>
                        <application_prototype>
                           <name>Asterisk queue "{#QUEUE}"</name>
                        </application_prototype>
                     </application_prototypes>
                     <preprocessing>
                        <step>
                           <type>JSONPATH</type>
                           <params>$.queue.queues[?(@.Queue=='{#QUEUE}')].Available.first()</params>
                        </step>
                     </preprocessing>
                     <master_item>
                        <key>asterisk.get_stats</key>
                     </master_item>
                  </item_prototype>
                  <item_prototype>
                     <name>"{#QUEUE}": Callers</name>
                     <type>DEPENDENT</type>
                     <key>asterisk.queue.callers[{#QUEUE}]</key>
                     <delay>0</delay>
                     <history>7d</history>
                     <description>The number incoming  calls in queue.</description>
                     <application_prototypes>
                        <application_prototype>
                           <name>Asterisk queue "{#QUEUE}"</name>
                        </application_prototype>
                     </application_prototypes>
                     <preprocessing>
                        <step>
                           <type>JSONPATH</type>
                           <params>$.queue.queues[?(@.Queue=='{#QUEUE}')].Callers.first()</params>
                        </step>
                     </preprocessing>
                     <master_item>
                        <key>asterisk.get_stats</key>
                     </master_item>
                     <trigger_prototypes>
                        <trigger_prototype>
                           <expression>{min(10m)}&gt;{$AMI.QUEUE_CALLERS.MAX.WARN:"{#QUEUE}"}</expression>
                           <name>"{#QUEUE}": Number of callers in the queue "{#QUEUE}" is too high (over {$AMI.QUEUE_CALLERS.MAX.WARN:"{#QUEUE}"} for 10m)</name>
                           <priority>WARNING</priority>
                           <description>There is a large number of calls in the queue.</description>
                        </trigger_prototype>
                     </trigger_prototypes>
                  </item_prototype>
                  <item_prototype>
                     <name>"{#QUEUE}": Logged in</name>
                     <type>DEPENDENT</type>
                     <key>asterisk.queue.loggedin[{#QUEUE}]</key>
                     <delay>0</delay>
                     <history>7d</history>
                     <description>The number of queue members.</description>
                     <application_prototypes>
                        <application_prototype>
                           <name>Asterisk queue "{#QUEUE}"</name>
                        </application_prototype>
                     </application_prototypes>
                     <preprocessing>
                        <step>
                           <type>JSONPATH</type>
                           <params>$.queue.queues[?(@.Queue=='{#QUEUE}')].LoggedIn.first()</params>
                        </step>
                     </preprocessing>
                     <master_item>
                        <key>asterisk.get_stats</key>
                     </master_item>
                  </item_prototype>
               </item_prototypes>
               <host_prototypes/>
               <master_item>
                  <key>asterisk.get_stats</key>
               </master_item>
               <lld_macro_paths>
                  <lld_macro_path>
                     <lld_macro>{#QUEUE}</lld_macro>
                     <path>$.Queue</path>
                  </lld_macro_path>
               </lld_macro_paths>
               <preprocessing>
                  <step>
                     <type>JSONPATH</type>
                     <params>$.queue.queues</params>
                  </step>
                  <step>
                     <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                     <params>1h</params>
                  </step>
               </preprocessing>
            </discovery_rule>
            <discovery_rule>
               <name>SIP peers discovery</name>
               <type>DEPENDENT</type>
               <key>asterisk.sip_peers.discovery</key>
               <delay>0</delay>
               <item_prototypes>
                  <item_prototype>
                     <name>SIP trunk "{#OBJECTNAME}": Active channels</name>
                     <type>DEPENDENT</type>
                     <key>asterisk.sip.trunk.active_channels[{#OBJECTNAME}]</key>
                     <delay>0</delay>
                     <history>7d</history>
                     <description>The total number of active SIP trunk channels.</description>
                     <application_prototypes>
                        <application_prototype>
                           <name>Asterisk SIP trunks</name>
                        </application_prototype>
                     </application_prototypes>
                     <preprocessing>
                        <step>
                           <type>JSONPATH</type>
                           <params>$.sip.trunks[?(@.ObjectName=='{#OBJECTNAME}')].active_channels.first()</params>
                        </step>
                     </preprocessing>
                     <master_item>
                        <key>asterisk.get_stats</key>
                     </master_item>
                     <trigger_prototypes>
                        <trigger_prototype>
                           <expression>{min(10m)}&gt;={$AMI.TRUNK_ACTIVE_CHANNELS.MAX.WARN:"{#OBJECTNAME}"}</expression>
                           <name>SIP trunk "{#OBJECTNAME}": Number of the SIP trunk "{#OBJECTNAME}" active channels is too high (over {$AMI.TRUNK_ACTIVE_CHANNELS.MAX.WARN:"{#OBJECTNAME}"} for 10m)</name>
                           <priority>WARNING</priority>
                           <description>The SIP trunk may not be able to process new calls.</description>
                        </trigger_prototype>
                     </trigger_prototypes>
                  </item_prototype>
                  <item_prototype>
                     <name>SIP trunk "{#OBJECTNAME}": Status</name>
                     <type>DEPENDENT</type>
                     <key>asterisk.sip.trunk.status[{#OBJECTNAME}]</key>
                     <delay>0</delay>
                     <history>7d</history>
                     <trends>0</trends>
                     <value_type>CHAR</value_type>
                     <description>SIP trunk status. Here are the possible states that a device state may have:&#13;
Unmonitored&#13;
UNKNOWN&#13;
UNREACHABLE&#13;
OK</description>
                     <application_prototypes>
                        <application_prototype>
                           <name>Asterisk SIP trunks</name>
                        </application_prototype>
                     </application_prototypes>
                     <preprocessing>
                        <step>
                           <type>JSONPATH</type>
                           <params>$.sip.trunks[?(@.ObjectName=='{#OBJECTNAME}')].Status.first()</params>
                        </step>
                        <step>
                           <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                           <params>1h</params>
                        </step>
                     </preprocessing>
                     <master_item>
                        <key>asterisk.get_stats</key>
                     </master_item>
                     <trigger_prototypes>
                        <trigger_prototype>
                           <expression>{last()}="UNKNOWN" or {last()}="UNREACHABLE"</expression>
                           <name>SIP trunk "{#OBJECTNAME}": SIP trunk {#OBJECTNAME} has a state {ITEM.VALUE}</name>
                           <priority>AVERAGE</priority>
                           <description>The SIP trunk is unable to establish a connection with a neighbor due to network issues or incorrect configuration.</description>
                        </trigger_prototype>
                     </trigger_prototypes>
                  </item_prototype>
               </item_prototypes>
               <host_prototypes/>
               <master_item>
                  <key>asterisk.get_stats</key>
               </master_item>
               <lld_macro_paths>
                  <lld_macro_path>
                     <lld_macro>{#OBJECTNAME}</lld_macro>
                     <path>$.ObjectName</path>
                  </lld_macro_path>
               </lld_macro_paths>
               <preprocessing>
                  <step>
                     <type>JSONPATH</type>
                     <params>$.sip.trunks</params>
                  </step>
                  <step>
                     <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                     <params>1h</params>
                  </step>
               </preprocessing>
            </discovery_rule>
         </discovery_rules>
         <macros>
            <macro>
               <macro>{$AMI.PORT}</macro>
               <value>5038</value>
               <description>AMI port number for checking service availability.</description>
            </macro>
            <macro>
               <macro>{$AMI.QUEUE_CALLERS.MAX.WARN}</macro>
               <value>10</value>
               <description>The maximum number of callers in a queue for trigger expression.</description>
            </macro>
            <macro>
               <macro>{$AMI.RESPONSE_TIME.MAX.WARN}</macro>
               <value>10s</value>
               <description>The Asterisk Manager API page maximum response time in seconds for trigger expression.</description>
            </macro>
            <macro>
               <macro>{$AMI.SECRET}</macro>
               <value>zabbix</value>
               <description>The Asterisk Manager secret.</description>
            </macro>
            <macro>
               <macro>{$AMI.TRUNK_ACTIVE_CHANNELS.MAX.WARN}</macro>
               <value>28</value>
               <description>The maximum number of busy channels for trigger expression.</description>
            </macro>
            <macro>
               <macro>{$AMI.TRUNK_REGEXP}</macro>
               <value>trunk</value>
               <description>The regexp for the identification of trunk peers.</description>
            </macro>
            <macro>
               <macro>{$AMI.URL}</macro>
               <value>http://asterisk:8088/asterisk/rawman</value>
               <description>The Asterisk Manager API URL in the format `&lt;scheme&gt;://&lt;host&gt;:&lt;port&gt;/&lt;prefix&gt;/rawman`.</description>
            </macro>
            <macro>
               <macro>{$AMI.USERNAME}</macro>
               <value>zabbix</value>
               <description>The Asterisk Manager name.</description>
            </macro>
         </macros>
      </template>
   </templates>
   <graphs>
      <graph>
         <name>Asterisk: Calls stats</name>
         <graph_items>
            <graph_item>
               <color>1A7C11</color>
               <item>
                  <host>Template Tel Asterisk by HTTP</host>
                  <key>asterisk.active_channels</key>
               </item>
            </graph_item>
            <graph_item>
               <sortorder>1</sortorder>
               <color>2774A4</color>
               <item>
                  <host>Template Tel Asterisk by HTTP</host>
                  <key>asterisk.active_calls</key>
               </item>
            </graph_item>
            <graph_item>
               <sortorder>2</sortorder>
               <color>F63100</color>
               <yaxisside>RIGHT</yaxisside>
               <item>
                  <host>Template Tel Asterisk by HTTP</host>
                  <key>asterisk.calls_processed.rate</key>
               </item>
            </graph_item>
         </graph_items>
      </graph>
      <graph>
         <name>Asterisk: IAX peers</name>
         <graph_items>
            <graph_item>
               <color>1A7C11</color>
               <item>
                  <host>Template Tel Asterisk by HTTP</host>
                  <key>asterisk.iax.online</key>
               </item>
            </graph_item>
            <graph_item>
               <sortorder>1</sortorder>
               <color>2774A4</color>
               <item>
                  <host>Template Tel Asterisk by HTTP</host>
                  <key>asterisk.iax.offline</key>
               </item>
            </graph_item>
            <graph_item>
               <sortorder>2</sortorder>
               <color>F63100</color>
               <item>
                  <host>Template Tel Asterisk by HTTP</host>
                  <key>asterisk.iax.unmonitored</key>
               </item>
            </graph_item>
         </graph_items>
      </graph>
      <graph>
         <name>Asterisk: PJSIP peers</name>
         <graph_items>
            <graph_item>
               <color>1A7C11</color>
               <item>
                  <host>Template Tel Asterisk by HTTP</host>
                  <key>asterisk.pjsip.available</key>
               </item>
            </graph_item>
            <graph_item>
               <sortorder>1</sortorder>
               <color>2774A4</color>
               <item>
                  <host>Template Tel Asterisk by HTTP</host>
                  <key>asterisk.pjsip.unavailable</key>
               </item>
            </graph_item>
         </graph_items>
      </graph>
      <graph>
         <name>Asterisk: SIP peers</name>
         <graph_items>
            <graph_item>
               <color>1A7C11</color>
               <item>
                  <host>Template Tel Asterisk by HTTP</host>
                  <key>asterisk.sip.monitored_online</key>
               </item>
            </graph_item>
            <graph_item>
               <sortorder>1</sortorder>
               <color>2774A4</color>
               <item>
                  <host>Template Tel Asterisk by HTTP</host>
                  <key>asterisk.sip.monitored_offline</key>
               </item>
            </graph_item>
            <graph_item>
               <sortorder>2</sortorder>
               <color>F63100</color>
               <item>
                  <host>Template Tel Asterisk by HTTP</host>
                  <key>asterisk.sip.unmonitored_online</key>
               </item>
            </graph_item>
            <graph_item>
               <sortorder>3</sortorder>
               <color>A54F10</color>
               <item>
                  <host>Template Tel Asterisk by HTTP</host>
                  <key>asterisk.sip.unmonitored_offline</key>
               </item>
            </graph_item>
         </graph_items>
      </graph>
   </graphs>
   <value_maps>
      <value_map>
         <name>Service state</name>
         <mappings>
            <mapping>
               <value>0</value>
               <newvalue>Down</newvalue>
            </mapping>
            <mapping>
               <value>1</value>
               <newvalue>Up</newvalue>
            </mapping>
         </mappings>
      </value_map>
   </value_maps>
</zabbix_export>
