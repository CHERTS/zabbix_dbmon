<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
   <version>5.0</version>
   <date>2021-06-18T08:14:47Z</date>
   <groups>
      <group>
         <name>Templates/Server hardware</name>
      </group>
   </groups>
   <templates>
      <template>
         <template>Template Server DELL PowerEdge R740 by HTTP</template>
         <name>Template Server DELL PowerEdge R740 by HTTP</name>
         <description>Template for DELL PowerEdge R740 servers with iDRAC 8/9 firmware 4.32 and later and Redfish API enabled.&#13;
&#13;
You can discuss this template or leave feedback on our forum https://www.zabbix.com/forum/zabbix-suggestions-and-feedback/426752-discussion-thread-for-official-zabbix-dell-templates&#13;
&#13;
Template tooling version used: 0.38</description>
         <groups>
            <group>
               <name>Templates/Server hardware</name>
            </group>
         </groups>
         <applications>
            <application>
               <name>Fans</name>
            </application>
            <application>
               <name>Inventory</name>
            </application>
            <application>
               <name>Network interfaces</name>
            </application>
            <application>
               <name>Physical disks</name>
            </application>
            <application>
               <name>Power supply</name>
            </application>
            <application>
               <name>Status</name>
            </application>
            <application>
               <name>Temperature</name>
            </application>
            <application>
               <name>Virtual disks</name>
            </application>
            <application>
               <name>Zabbix raw items</name>
            </application>
         </applications>
         <items>
            <item>
               <name>Dell R740: Firmware version</name>
               <type>DEPENDENT</type>
               <key>dell.server.hw.firmware</key>
               <delay>0</delay>
               <history>2w</history>
               <trends>0</trends>
               <status>ENABLED</status>
               <value_type>CHAR</value_type>
               <description>This attribute defines the firmware version of a remote access card.</description>
               <applications>
                  <application>
                     <name>Inventory</name>
                  </application>
               </applications>
               <preprocessing>
                  <step>
                     <type>JSONPATH</type>
                     <params>$.firmware</params>
                  </step>
                  <step>
                     <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                     <params>6h</params>
                  </step>
               </preprocessing>
               <master_item>
                  <key>dell.server.system.get</key>
               </master_item>
               <triggers>
                  <trigger>
                     <expression>{diff()}=1 and {strlen()}&gt;0</expression>
                     <name>Dell R740: Firmware has changed</name>
                     <opdata>Current value: {ITEM.LASTVALUE1}</opdata>
                     <priority>INFO</priority>
                     <description>Firmware version has changed. Ack to close.</description>
                     <manual_close>YES</manual_close>
                  </trigger>
               </triggers>
            </item>
            <item>
               <name>Dell R740: Hardware model name</name>
               <type>DEPENDENT</type>
               <key>dell.server.hw.model</key>
               <delay>0</delay>
               <history>7d</history>
               <trends>0</trends>
               <status>ENABLED</status>
               <value_type>CHAR</value_type>
               <description>This attribute defines the model name of the system.</description>
               <inventory_link>MODEL</inventory_link>
               <applications>
                  <application>
                     <name>Inventory</name>
                  </application>
               </applications>
               <preprocessing>
                  <step>
                     <type>JSONPATH</type>
                     <params>$.model</params>
                  </step>
                  <step>
                     <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                     <params>6h</params>
                  </step>
               </preprocessing>
               <master_item>
                  <key>dell.server.system.get</key>
               </master_item>
            </item>
            <item>
               <name>Dell R740: Hardware serial number</name>
               <type>DEPENDENT</type>
               <key>dell.server.hw.serialnumber</key>
               <delay>0</delay>
               <history>7d</history>
               <trends>0</trends>
               <status>ENABLED</status>
               <value_type>CHAR</value_type>
               <description>This attribute defines the service tag of the system.</description>
               <inventory_link>SERIALNO_A</inventory_link>
               <applications>
                  <application>
                     <name>Inventory</name>
                  </application>
               </applications>
               <preprocessing>
                  <step>
                     <type>JSONPATH</type>
                     <params>$.serialnumber</params>
                  </step>
                  <step>
                     <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                     <params>6h</params>
                  </step>
               </preprocessing>
               <master_item>
                  <key>dell.server.system.get</key>
               </master_item>
               <triggers>
                  <trigger>
                     <expression>{diff()}=1 and {strlen()}&gt;0</expression>
                     <name>Dell R740: Device has been replaced (new serial number received)</name>
                     <priority>INFO</priority>
                     <description>Device serial number has changed. Ack to close</description>
                     <manual_close>YES</manual_close>
                  </trigger>
               </triggers>
            </item>
            <item>
               <name>Dell R740: Overall system health status</name>
               <type>DEPENDENT</type>
               <key>dell.server.status</key>
               <delay>0</delay>
               <history>7d</history>
               <trends>0</trends>
               <status>ENABLED</status>
               <value_type>CHAR</value_type>
               <description>This attribute defines the overall rollup status of all components in the system being monitored by the remote access card. Includes system, storage, IO devices, iDRAC, CPU, memory, etc.</description>
               <applications>
                  <application>
                     <name>Status</name>
                  </application>
               </applications>
               <preprocessing>
                  <step>
                     <type>JSONPATH</type>
                     <params>$.status</params>
                  </step>
                  <step>
                     <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                     <params>6h</params>
                  </step>
               </preprocessing>
               <master_item>
                  <key>dell.server.system.get</key>
               </master_item>
               <triggers>
                  <trigger>
                     <expression>{str("Critical")}=1</expression>
                     <name>Dell R740: Server is in a critical state</name>
                     <opdata>Current state: {ITEM.LASTVALUE1}</opdata>
                     <priority>HIGH</priority>
                     <description>Please check the device for faults.</description>
                  </trigger>
                  <trigger>
                     <expression>{str("Warning")}=1</expression>
                     <name>Dell R740: Server is in warning state</name>
                     <opdata>Current state: {ITEM.LASTVALUE1}</opdata>
                     <priority>WARNING</priority>
                     <description>Please check the device for warnings.</description>
                     <dependencies>
                        <dependency>
                           <name>Dell R740: Server is in a critical state</name>
                           <expression>{Template Server DELL PowerEdge R740 by HTTP:dell.server.status.str("Critical")}=1</expression>
                        </dependency>
                     </dependencies>
                  </trigger>
               </triggers>
            </item>
            <item>
               <name>Dell R740: Get system</name>
               <type>HTTP_AGENT</type>
               <key>dell.server.system.get</key>
               <history>0</history>
               <trends>0</trends>
               <status>ENABLED</status>
               <value_type>TEXT</value_type>
               <authtype>BASIC</authtype>
               <username>{$API.USER}</username>
               <password>{$API.PASSWORD}</password>
               <description>Returns the metrics of a system.</description>
               <applications>
                  <application>
                     <name>Zabbix raw items</name>
                  </application>
               </applications>
               <preprocessing>
                  <step>
                     <type>JAVASCRIPT</type>
                     <params>function request(url) {
    api_request = new CurlHttpRequest();
    api_request.AddHeader('Authorization: Basic ' + btoa(params.user + ':' + params.password));
    Zabbix.Log(4, '[ DELL ] Sending request: ' + url);

    try {
        response = api_request.Get(url);
    } catch (error) {
        Zabbix.Log(4, '[ DELL ] Get request returned error ' + error);
        throw 'Get request returned error ' + error + '. Check debug log for more information.';
    }

    Zabbix.Log(4, '[ DELL ] Received response with status code ' +
        api_request.Status() + '\n' + response);

    if (api_request.Status() !== 200) {
        var message = 'Request failed with status code ' + api_request.Status();
        if (response !== null) {
            if (typeof response.message === 'string') {
                message += ': ' + response.message;
            }
        }

        throw message + ' Check debug log for more information.';
    }

    if (response !== null) {
        try {
            response = JSON.parse(response);
        }
        catch (error) {
            Zabbix.Log(4, '[ DELL ] Failed to parse response.');
            response = null;
        }
    }

    return {
        status: api_request.Status(),
        body: response
    };
}

function getField(object, field, def) {
    var names = field.split('.');
    var name = names.shift();

    while (typeof name !== 'undefined') {
        if (typeof object === undefined || typeof object[name] === 'undefined') {
            return def;
        }

        object = object[name];
        name = names.shift();
    }

    return object;
}

try {
    system = JSON.parse(value);
}
catch (error) {
    Zabbix.Log(4, '[ DELL ] Failed to parse response.');
    system = null;
}

var params = {
    url: '{$API.URL}',
    user: '{$API.USER}',
    password: '{$API.PASSWORD}'
};
var result = {
    model: '',
    serialnumber: '',
    status: '',
    firmware: ''
};

var index = params.url.indexOf('://');
index = params.url.indexOf('/', (index !== -1) ? (index + 3) : 0);
if (index !== -1) {
    params.url = params.url.substring(0, index);
}

result.model = getField(system, 'Model', '');
result.serialnumber = getField(system, 'Oem.Dell.DellSystem.ChassisServiceTag', '');
result.status = getField(system, 'Status.Health', '');

response = request(params.url + '/redfish/v1/Managers/iDRAC.Embedded.1');
result.firmware = getField(response.body, 'FirmwareVersion', '');

return JSON.stringify(result);
</params>
                  </step>
               </preprocessing>
               <url>{$API.URL}/redfish/v1/Systems/System.Embedded.1</url>
            </item>
            <item>
               <name>Dell R740: Redfish API</name>
               <type>SIMPLE</type>
               <key>net.tcp.service[https]</key>
               <history>7d</history>
               <status>ENABLED</status>
               <description>The availability of Redfish API on the server.&#13;
Possible values:&#13;
  0 unavailable&#13;
  1 available</description>
               <applications>
                  <application>
                     <name>Status</name>
                  </application>
               </applications>
               <valuemap>
                  <name>zabbix.host.available</name>
               </valuemap>
               <triggers>
                  <trigger>
                     <expression>{last()}=0</expression>
                     <name>Dell R740: Redfish API service is unavailable</name>
                     <priority>HIGH</priority>
                     <description>The service is unavailable or does not accept TCP connections.</description>
                  </trigger>
               </triggers>
            </item>
         </items>
         <discovery_rules>
            <discovery_rule>
               <name>Array controller cache discovery</name>
               <type>HTTP_AGENT</type>
               <key>array.cache.discovery</key>
               <delay>1h</delay>
               <authtype>BASIC</authtype>
               <username>{$API.USER}</username>
               <password>{$API.PASSWORD}</password>
               <url>{$API.URL}/redfish/v1/Systems/System.Embedded.1/Storage</url>
               <description>Discovery of a cache of disk array controllers.</description>
               <item_prototypes>
                  <item_prototype>
                     <name>Dell R740: {#BATTERY_NAME} Status</name>
                     <type>HTTP_AGENT</type>
                     <key>dell.server.hw.diskarray.cache.battery.status[{#BATTERY_NAME}]</key>
                     <history>7d</history>
                     <trends>0</trends>
                     <status>ENABLED</status>
                     <value_type>CHAR</value_type>
                     <authtype>BASIC</authtype>
                     <username>{$API.USER}</username>
                     <password>{$API.PASSWORD}</password>
                     <description>The status of the job. Possible values: OK, Warning, Critical.</description>
                     <applications>
                        <application>
                           <name>Zabbix raw items</name>
                        </application>
                     </applications>
                     <preprocessing>
                        <step>
                           <type>JSONPATH</type>
                           <params>$.Oem.Dell.DellControllerBattery.PrimaryStatus</params>
                        </step>
                        <step>
                           <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                           <params>6h</params>
                        </step>
                     </preprocessing>
                     <url>{$API.URL}{#ODATA}</url>
                     <trigger_prototypes>
                        <trigger_prototype>
                           <expression>{str("Critical")}=1</expression>
                           <name>Dell R740: {#BATTERY_NAME} is in a critical state</name>
                           <opdata>Current state: {ITEM.LASTVALUE1}</opdata>
                           <priority>HIGH</priority>
                           <description>Please check the device for faults.</description>
                        </trigger_prototype>
                        <trigger_prototype>
                           <expression>{str("Warning")}=1</expression>
                           <name>Dell R740: {#BATTERY_NAME} is in warning state</name>
                           <opdata>Current state: {ITEM.LASTVALUE1}</opdata>
                           <priority>WARNING</priority>
                           <description>Please check the device for warnings.</description>
                           <dependencies>
                              <dependency>
                                 <name>Dell R740: {#BATTERY_NAME} is in a critical state</name>
                                 <expression>{Template Server DELL PowerEdge R740 by HTTP:dell.server.hw.diskarray.cache.battery.status[{#BATTERY_NAME}].str("Critical")}=1</expression>
                              </dependency>
                           </dependencies>
                        </trigger_prototype>
                     </trigger_prototypes>
                  </item_prototype>
               </item_prototypes>
               <host_prototypes/>
               <preprocessing>
                  <step>
                     <type>JAVASCRIPT</type>
                     <params>function request(url) {
    api_request = new CurlHttpRequest();
    api_request.AddHeader('Authorization: Basic ' + btoa(params.user + ':' + params.password));
    Zabbix.Log(4, '[ DELL ] Sending request: ' + url);

    try {
        response = api_request.Get(url);
    } catch (error) {
        Zabbix.Log(4, '[ DELL ] Get request returned error ' + error);
        throw 'Get request returned error ' + error + '. Check debug log for more information.';
    }

    Zabbix.Log(4, '[ DELL ] Received response with status code ' +
        api_request.Status() + '\n' + response);

    if (api_request.Status() !== 200) {
        var message = 'Request failed with status code ' + api_request.Status();
        if (response !== null) {
            if (typeof response.message === 'string') {
                message += ': ' + response.message;
            }
        }

        throw message + ' Check debug log for more information.';
    }

    if (response !== null) {
        try {
            response = JSON.parse(response);
        }
        catch (error) {
            Zabbix.Log(4, '[ DELL ] Failed to parse response.');
            response = null;
        }
    }

    return {
        status: api_request.Status(),
        body: response
    };
}

function getField(object, field, def) {
    var names = field.split('.');
    var name = names.shift();

    while (typeof name !== 'undefined') {
        if (typeof object === undefined || typeof object[name] === 'undefined') {
            return def;
        }

        object = object[name];
        name = names.shift();
    }

    return object;
}

try {
    storages = JSON.parse(value);
}
catch (error) {
    Zabbix.Log(4, '[ DELL ] Failed to parse response.');
    storages = null;
}

var params = {
    url: '{$API.URL}',
    user: '{$API.USER}',
    password: '{$API.PASSWORD}'
};
var result = [];

var index = params.url.indexOf('://');
index = params.url.indexOf('/', (index !== -1) ? (index + 3) : 0);
if (index !== -1) {
    params.url = params.url.substring(0, index);
}

if (storages.Members instanceof Array) {
    storages.Members.forEach(function (storage) {
        if (typeof storage["@odata.id"] === 'string') {
            response = request(params.url + storage["@odata.id"]);
            controller = response.body;
            if (getField(controller, 'Id', '').search('RAID') &gt; -1) {
                result.push({
                    '{#BATTERY_NAME}': getField(response.body, 'Oem.Dell.DellControllerBattery.Name', ''),
                    '{#ODATA}': controller["@odata.id"]
                });
            }
        }
    });
}

return JSON.stringify(result);
</params>
                  </step>
                  <step>
                     <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                     <params>6h</params>
                  </step>
               </preprocessing>
            </discovery_rule>
            <discovery_rule>
               <name>Array controller discovery</name>
               <type>HTTP_AGENT</type>
               <key>array.discovery</key>
               <delay>1h</delay>
               <authtype>BASIC</authtype>
               <username>{$API.USER}</username>
               <password>{$API.PASSWORD}</password>
               <url>{$API.URL}/redfish/v1/Systems/System.Embedded.1/Storage</url>
               <description>Discovery of disk array controllers.</description>
               <item_prototypes>
                  <item_prototype>
                     <name>Dell R740: {#CNTLR_NAME} in slot {#SLOT} Status</name>
                     <type>HTTP_AGENT</type>
                     <key>dell.server.hw.diskarray.status[{#CNTLR_NAME}{#SLOT}]</key>
                     <history>7d</history>
                     <trends>0</trends>
                     <status>ENABLED</status>
                     <value_type>CHAR</value_type>
                     <authtype>BASIC</authtype>
                     <username>{$API.USER}</username>
                     <password>{$API.PASSWORD}</password>
                     <description>The status of the job. Possible values: OK, Warning, Critical.</description>
                     <applications>
                        <application>
                           <name>Zabbix raw items</name>
                        </application>
                     </applications>
                     <preprocessing>
                        <step>
                           <type>JSONPATH</type>
                           <params>$.Status.Health</params>
                        </step>
                        <step>
                           <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                           <params>6h</params>
                        </step>
                     </preprocessing>
                     <url>{$API.URL}{#ODATA}</url>
                     <trigger_prototypes>
                        <trigger_prototype>
                           <expression>{str("Critical")}=1</expression>
                           <name>Dell R740: {#CNTLR_NAME} in slot {#SLOT} is in a critical state</name>
                           <opdata>Current state: {ITEM.LASTVALUE1}</opdata>
                           <priority>HIGH</priority>
                           <description>Please check the device for faults.</description>
                        </trigger_prototype>
                        <trigger_prototype>
                           <expression>{str("Warning")}=1</expression>
                           <name>Dell R740: {#CNTLR_NAME} in slot {#SLOT} is in warning state</name>
                           <opdata>Current state: {ITEM.LASTVALUE1}</opdata>
                           <priority>WARNING</priority>
                           <description>Please check the device for warnings.</description>
                           <dependencies>
                              <dependency>
                                 <name>Dell R740: {#CNTLR_NAME} in slot {#SLOT} is in a critical state</name>
                                 <expression>{Template Server DELL PowerEdge R740 by HTTP:dell.server.hw.diskarray.status[{#CNTLR_NAME}{#SLOT}].str("Critical")}=1</expression>
                              </dependency>
                           </dependencies>
                        </trigger_prototype>
                     </trigger_prototypes>
                  </item_prototype>
               </item_prototypes>
               <host_prototypes/>
               <preprocessing>
                  <step>
                     <type>JAVASCRIPT</type>
                     <params>function request(url) {
    api_request = new CurlHttpRequest();
    api_request.AddHeader('Authorization: Basic ' + btoa(params.user + ':' + params.password));
    Zabbix.Log(4, '[ DELL ] Sending request: ' + url);

    try {
        response = api_request.Get(url);
    } catch (error) {
        Zabbix.Log(4, '[ DELL ] Get request returned error ' + error);
        throw 'Get request returned error ' + error + '. Check debug log for more information.';
    }

    Zabbix.Log(4, '[ DELL ] Received response with status code ' +
        api_request.Status() + '\n' + response);

    if (api_request.Status() !== 200) {
        var message = 'Request failed with status code ' + api_request.Status();
        if (response !== null) {
            if (typeof response.message === 'string') {
                message += ': ' + response.message;
            }
        }

        throw message + ' Check debug log for more information.';
    }

    if (response !== null) {
        try {
            response = JSON.parse(response);
        }
        catch (error) {
            Zabbix.Log(4, '[ DELL ] Failed to parse response.');
            response = null;
        }
    }

    return {
        status: api_request.Status(),
        body: response
    };
}

function getField(object, field, def) {
    var names = field.split('.');
    var name = names.shift();

    while (typeof name !== 'undefined') {
        if (typeof object === undefined || typeof object[name] === 'undefined') {
            return def;
        }

        object = object[name];
        name = names.shift();
    }

    return object;
}

try {
    storages = JSON.parse(value);
}
catch (error) {
    Zabbix.Log(4, '[ DELL ] Failed to parse response.');
    storages = null;
}

var params = {
    url: '{$API.URL}',
    user: '{$API.USER}',
    password: '{$API.PASSWORD}'
};
var result = [];

var index = params.url.indexOf('://');
index = params.url.indexOf('/', (index !== -1) ? (index + 3) : 0);
if (index !== -1) {
    params.url = params.url.substring(0, index);
}

if (storages.Members instanceof Array) {
    storages.Members.forEach(function (storage) {
        if (typeof storage["@odata.id"] === 'string') {
            response = request(params.url + storage["@odata.id"]);
            controller = response.body;
            if (getField(controller, 'Id', '').search('RAID') &gt; -1) {
                result.push({
                    '{#CNTLR_NAME}': getField(response.body, 'Name', ''),
                    '{#SLOT}': getField(response.body, 'Oem.Dell.DellController.PCISlot', ''),
                    '{#ODATA}': controller["@odata.id"]
                });
            }
        }
    });
}

return JSON.stringify(result);
</params>
                  </step>
                  <step>
                     <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                     <params>6h</params>
                  </step>
               </preprocessing>
            </discovery_rule>
            <discovery_rule>
               <name>FAN discovery</name>
               <type>HTTP_AGENT</type>
               <key>fan.discovery</key>
               <delay>1h</delay>
               <authtype>BASIC</authtype>
               <username>{$API.USER}</username>
               <password>{$API.PASSWORD}</password>
               <url>{$API.URL}/redfish/v1/Chassis/System.Embedded.1/Sensors</url>
               <description>Discovery of FAN sensors.</description>
               <item_prototypes>
                  <item_prototype>
                     <name>Dell R740: {#SENSOR_NAME} Get sensor</name>
                     <type>HTTP_AGENT</type>
                     <key>dell.server.sensor.fan.get[{#SENSOR_NAME}]</key>
                     <history>0</history>
                     <trends>0</trends>
                     <status>ENABLED</status>
                     <value_type>TEXT</value_type>
                     <authtype>BASIC</authtype>
                     <username>{$API.USER}</username>
                     <password>{$API.PASSWORD}</password>
                     <description>Returns the metrics of a sensor.</description>
                     <applications>
                        <application>
                           <name>Zabbix raw items</name>
                        </application>
                     </applications>
                     <url>{$API.URL}{#ODATA}</url>
                  </item_prototype>
                  <item_prototype>
                     <name>Dell R740: {#SENSOR_NAME} Speed</name>
                     <type>DEPENDENT</type>
                     <key>dell.server.sensor.fan.speed[{#SENSOR_NAME}]</key>
                     <delay>0</delay>
                     <history>7d</history>
                     <status>ENABLED</status>
                     <units>rpm</units>
                     <description>The sensor value.</description>
                     <applications>
                        <application>
                           <name>Fans</name>
                        </application>
                     </applications>
                     <preprocessing>
                        <step>
                           <type>JSONPATH</type>
                           <params>$.Reading</params>
                        </step>
                     </preprocessing>
                     <master_item>
                        <key>dell.server.sensor.fan.get[{#SENSOR_NAME}]</key>
                     </master_item>
                  </item_prototype>
                  <item_prototype>
                     <name>Dell R740: {#SENSOR_NAME} Status</name>
                     <type>DEPENDENT</type>
                     <key>dell.server.sensor.fan.status[{#SENSOR_NAME}]</key>
                     <delay>0</delay>
                     <history>7d</history>
                     <trends>0</trends>
                     <status>ENABLED</status>
                     <value_type>CHAR</value_type>
                     <description>The status of the job. Possible values: OK, Warning, Critical.</description>
                     <applications>
                        <application>
                           <name>Fans</name>
                        </application>
                     </applications>
                     <preprocessing>
                        <step>
                           <type>JSONPATH</type>
                           <params>$.Status.Health</params>
                        </step>
                        <step>
                           <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                           <params>6h</params>
                        </step>
                     </preprocessing>
                     <master_item>
                        <key>dell.server.sensor.fan.get[{#SENSOR_NAME}]</key>
                     </master_item>
                     <trigger_prototypes>
                        <trigger_prototype>
                           <expression>{str("Critical")}=1</expression>
                           <name>Dell R740: {#SENSOR_NAME} is in a critical state</name>
                           <opdata>Current state: {ITEM.LASTVALUE1}</opdata>
                           <priority>HIGH</priority>
                           <description>Please check the device for faults.</description>
                        </trigger_prototype>
                        <trigger_prototype>
                           <expression>{str("Warning")}=1</expression>
                           <name>Dell R740: {#SENSOR_NAME} is in warning state</name>
                           <opdata>Current state: {ITEM.LASTVALUE1}</opdata>
                           <priority>WARNING</priority>
                           <description>Please check the device for warnings.</description>
                           <dependencies>
                              <dependency>
                                 <name>Dell R740: {#SENSOR_NAME} is in a critical state</name>
                                 <expression>{Template Server DELL PowerEdge R740 by HTTP:dell.server.sensor.fan.status[{#SENSOR_NAME}].str("Critical")}=1</expression>
                              </dependency>
                           </dependencies>
                        </trigger_prototype>
                     </trigger_prototypes>
                  </item_prototype>
               </item_prototypes>
               <host_prototypes/>
               <preprocessing>
                  <step>
                     <type>JAVASCRIPT</type>
                     <params>function request(url) {
    api_request = new CurlHttpRequest();
    api_request.AddHeader('Authorization: Basic ' + btoa(params.user + ':' + params.password));
    Zabbix.Log(4, '[ DELL ] Sending request: ' + url);

    try {
        response = api_request.Get(url);
    } catch (error) {
        Zabbix.Log(4, '[ DELL ] Get request returned error ' + error);
        throw 'Get request returned error ' + error + '. Check debug log for more information.';
    }

    Zabbix.Log(4, '[ DELL ] Received response with status code ' +
        api_request.Status() + '\n' + response);

    if (api_request.Status() !== 200) {
        var message = 'Request failed with status code ' + api_request.Status();
        if (response !== null) {
            if (typeof response.message === 'string') {
                message += ': ' + response.message;
            }
        }

        throw message + ' Check debug log for more information.';
    }

    if (response !== null) {
        try {
            response = JSON.parse(response);
        }
        catch (error) {
            Zabbix.Log(4, '[ DELL ] Failed to parse response.');
            response = null;
        }
    }

    return {
        status: api_request.Status(),
        body: response
    };
}

try {
    sensors = JSON.parse(value);
}
catch (error) {
    Zabbix.Log(4, '[ DELL ] Failed to parse response.');
    sensors = null;
}

var params = {
    url: '{$API.URL}',
    user: '{$API.USER}',
    password: '{$API.PASSWORD}'
};
var result = [];

var index = params.url.indexOf('://');
index = params.url.indexOf('/', (index !== -1) ? (index + 3) : 0);
if (index !== -1) {
    params.url = params.url.substring(0, index);
}

if (sensors.Members instanceof Array) {
    sensors.Members.forEach(function (sensor) {
        if (typeof sensor["@odata.id"] === 'string') {
            response = request(params.url + sensor["@odata.id"]);
            if (response.body.ReadingType === 'Rotational') {
                if (typeof response.body.Name === 'string') {
                    result.push({ '{#SENSOR_NAME}': response.body.Name, '{#ODATA}': sensor["@odata.id"] });
                }
            }
        }
    });
}

return JSON.stringify(result);
</params>
                  </step>
                  <step>
                     <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                     <params>6h</params>
                  </step>
               </preprocessing>
            </discovery_rule>
            <discovery_rule>
               <name>Network interface discovery</name>
               <type>HTTP_AGENT</type>
               <key>net.if.discovery</key>
               <delay>1h</delay>
               <authtype>BASIC</authtype>
               <username>{$API.USER}</username>
               <password>{$API.PASSWORD}</password>
               <url>{$API.URL}/redfish/v1/Chassis/System.Embedded.1/NetworkAdapters</url>
               <description>The NetworkInterface schema describes links to the NetworkAdapter and represents the functionality available to the containing system.</description>
               <item_prototypes>
                  <item_prototype>
                     <name>Dell R740: {#IFNAME} Get interface</name>
                     <type>HTTP_AGENT</type>
                     <key>dell.server.net.if.get[{#IFNAME}]</key>
                     <history>0</history>
                     <trends>0</trends>
                     <status>ENABLED</status>
                     <value_type>TEXT</value_type>
                     <authtype>BASIC</authtype>
                     <username>{$API.USER}</username>
                     <password>{$API.PASSWORD}</password>
                     <description>Returns the metrics of a network interface.</description>
                     <applications>
                        <application>
                           <name>Zabbix raw items</name>
                        </application>
                     </applications>
                     <url>{$API.URL}{#ODATA}</url>
                  </item_prototype>
                  <item_prototype>
                     <name>Dell R740: {#IFNAME} Status</name>
                     <type>DEPENDENT</type>
                     <key>dell.server.net.if.health[{#IFNAME}]</key>
                     <delay>0</delay>
                     <history>7d</history>
                     <trends>0</trends>
                     <status>ENABLED</status>
                     <value_type>CHAR</value_type>
                     <description>The status of the job. Possible values: OK, Warning, Critical.</description>
                     <applications>
                        <application>
                           <name>Network interfaces</name>
                        </application>
                     </applications>
                     <preprocessing>
                        <step>
                           <type>JSONPATH</type>
                           <params>$.Status.Health</params>
                        </step>
                        <step>
                           <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                           <params>6h</params>
                        </step>
                     </preprocessing>
                     <master_item>
                        <key>dell.server.net.if.get[{#IFNAME}]</key>
                     </master_item>
                     <trigger_prototypes>
                        <trigger_prototype>
                           <expression>{str("Critical")}=1</expression>
                           <name>Dell R740: {#IFNAME} is in a critical state</name>
                           <opdata>Current state: {ITEM.LASTVALUE1}</opdata>
                           <priority>HIGH</priority>
                           <description>Please check the device for faults.</description>
                        </trigger_prototype>
                        <trigger_prototype>
                           <expression>{str("Warning")}=1</expression>
                           <name>Dell R740: {#IFNAME} is in warning state</name>
                           <opdata>Current state: {ITEM.LASTVALUE1}</opdata>
                           <priority>WARNING</priority>
                           <description>Please check the device for warnings.</description>
                           <dependencies>
                              <dependency>
                                 <name>Dell R740: {#IFNAME} is in a critical state</name>
                                 <expression>{Template Server DELL PowerEdge R740 by HTTP:dell.server.net.if.health[{#IFNAME}].str("Critical")}=1</expression>
                              </dependency>
                           </dependencies>
                        </trigger_prototype>
                     </trigger_prototypes>
                  </item_prototype>
                  <item_prototype>
                     <name>Dell R740: {#IFNAME} Speed</name>
                     <type>DEPENDENT</type>
                     <key>dell.server.net.if.speed[{#IFNAME}]</key>
                     <delay>0</delay>
                     <history>7d</history>
                     <status>ENABLED</status>
                     <units>!Mbps</units>
                     <description>Network port current link speed.</description>
                     <applications>
                        <application>
                           <name>Network interfaces</name>
                        </application>
                     </applications>
                     <preprocessing>
                        <step>
                           <type>JSONPATH</type>
                           <params>$.CurrentLinkSpeedMbps</params>
                        </step>
                        <step>
                           <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                           <params>6h</params>
                        </step>
                     </preprocessing>
                     <master_item>
                        <key>dell.server.net.if.get[{#IFNAME}]</key>
                     </master_item>
                  </item_prototype>
                  <item_prototype>
                     <name>Dell R740: {#IFNAME} State</name>
                     <type>DEPENDENT</type>
                     <key>dell.server.net.if.state[{#IFNAME}]</key>
                     <delay>0</delay>
                     <history>7d</history>
                     <trends>0</trends>
                     <status>ENABLED</status>
                     <value_type>CHAR</value_type>
                     <description>The known state of the Resource, for example, enabled. Possible values: Enabled, Disabled, StandbyOffline, StandbySpare, InTest, Starting, Absent, UnavailableOffline, Deferring, Quiesced, Updating, Qualified.</description>
                     <applications>
                        <application>
                           <name>Network interfaces</name>
                        </application>
                     </applications>
                     <preprocessing>
                        <step>
                           <type>JSONPATH</type>
                           <params>$.Status.State</params>
                        </step>
                        <step>
                           <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                           <params>6h</params>
                        </step>
                     </preprocessing>
                     <master_item>
                        <key>dell.server.net.if.get[{#IFNAME}]</key>
                     </master_item>
                  </item_prototype>
                  <item_prototype>
                     <name>Dell R740: {#IFNAME} Link status</name>
                     <type>DEPENDENT</type>
                     <key>dell.server.net.if.status[{#IFNAME}]</key>
                     <delay>0</delay>
                     <history>7d</history>
                     <trends>0</trends>
                     <status>ENABLED</status>
                     <value_type>CHAR</value_type>
                     <description>The status of the link between this port and its link partner. Possible values: Down, Up, null.</description>
                     <applications>
                        <application>
                           <name>Network interfaces</name>
                        </application>
                     </applications>
                     <preprocessing>
                        <step>
                           <type>JSONPATH</type>
                           <params>$.LinkStatus</params>
                        </step>
                        <step>
                           <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                           <params>6h</params>
                        </step>
                     </preprocessing>
                     <master_item>
                        <key>dell.server.net.if.get[{#IFNAME}]</key>
                     </master_item>
                     <trigger_prototypes>
                        <trigger_prototype>
                           <expression>{$IFCONTROL:"{#IFNAME}"}=1 and ({str()}="Down" and {diff()}=1)</expression>
                           <recovery_mode>RECOVERY_EXPRESSION</recovery_mode>
                           <recovery_expression>{str()}&lt;&gt;"Down" or {$IFCONTROL:"{#IFNAME}"}=0</recovery_expression>
                           <name>Dell R740: {#IFNAME} Link down</name>
                           <opdata>Current state: {ITEM.LASTVALUE1}</opdata>
                           <priority>AVERAGE</priority>
                           <description>This trigger expression works as follows:&#13;
1. Can be triggered if operations status is down.&#13;
2. {$IFCONTROL:"{#IFNAME}"}=1 - user can redefine Context macro to value - 0. That marks this interface as not important. No new trigger will be fired if this interface is down.&#13;
3. {TEMPLATE_NAME:METRIC.diff()}=1) - trigger fires only if operational status was up(1) sometime before. (So, do not fire 'ethernal off' interfaces.)&#13;
&#13;
WARNING: if closed manually - won't fire again on next poll, because of .diff.</description>
                           <manual_close>YES</manual_close>
                        </trigger_prototype>
                     </trigger_prototypes>
                  </item_prototype>
               </item_prototypes>
               <host_prototypes/>
               <preprocessing>
                  <step>
                     <type>JAVASCRIPT</type>
                     <params>function request(url) {
    api_request = new CurlHttpRequest();
    api_request.AddHeader('Authorization: Basic ' + btoa(params.user + ':' + params.password));
    Zabbix.Log(4, '[ DELL ] Sending request: ' + url);

    try {
        response = api_request.Get(url);
    } catch (error) {
        Zabbix.Log(4, '[ DELL ] Get request returned error ' + error);
        throw 'Get request returned error ' + error + '. Check debug log for more information.';
    }

    Zabbix.Log(4, '[ DELL ] Received response with status code ' +
        api_request.Status() + '\n' + response);

    if (api_request.Status() !== 200) {
        var message = 'Request failed with status code ' + api_request.Status();
        if (response !== null) {
            if (typeof response.message === 'string') {
                message += ': ' + response.message;
            }
        }

        throw message + ' Check debug log for more information.';
    }

    if (response !== null) {
        try {
            response = JSON.parse(response);
        }
        catch (error) {
            Zabbix.Log(4, '[ DELL ] Failed to parse response.');
            response = null;
        }
    }

    return {
        status: api_request.Status(),
        body: response
    };
}

function getField(object, field, def) {
    var names = field.split('.');
    var name = names.shift();

    while (typeof name !== 'undefined') {
        if (typeof object === undefined || typeof object[name] === 'undefined') {
            return def;
        }

        object = object[name];
        name = names.shift();
    }

    return object;
}

try {
    adapters = JSON.parse(value);
}
catch (error) {
    Zabbix.Log(4, '[ DELL ] Failed to parse response.');
    adapters = null;
}

var params = {
    url: '{$API.URL}',
    user: '{$API.USER}',
    password: '{$API.PASSWORD}'
};
var result = [];

var index = params.url.indexOf('://');
index = params.url.indexOf('/', (index !== -1) ? (index + 3) : 0);
if (index !== -1) {
    params.url = params.url.substring(0, index);
}

if (adapters.Members instanceof Array) {
    adapters.Members.forEach(function (adapter) {
        if (typeof adapter["@odata.id"] === 'string') {
            response = request(params.url + adapter["@odata.id"] + "/NetworkPorts");
            ports = response.body;
            if (ports.Members instanceof Array) {
                ports.Members.forEach(function (port) {
                    if (typeof port["@odata.id"] === 'string') {
                        response = request(params.url + port["@odata.id"]);
                        result.push({ '{#IFNAME}': getField(response.body, 'Id', ''), '{#ODATA}': port["@odata.id"] });
                    }
                });
            }
        }
    });
}

return JSON.stringify(result);
</params>
                  </step>
                  <step>
                     <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                     <params>6h</params>
                  </step>
               </preprocessing>
            </discovery_rule>
            <discovery_rule>
               <name>Physical disk discovery</name>
               <type>HTTP_AGENT</type>
               <key>physicaldisk.discovery</key>
               <delay>1h</delay>
               <authtype>BASIC</authtype>
               <username>{$API.USER}</username>
               <password>{$API.PASSWORD}</password>
               <url>{$API.URL}/redfish/v1/Systems/System.Embedded.1/Storage</url>
               <description>Discovery of physical disks.</description>
               <item_prototypes>
                  <item_prototype>
                     <name>Dell R740: {#DISK_NAME} Get disk</name>
                     <type>HTTP_AGENT</type>
                     <key>dell.server.hw.physicaldisk.get[{#DISK_NAME}]</key>
                     <history>0</history>
                     <trends>0</trends>
                     <status>ENABLED</status>
                     <value_type>TEXT</value_type>
                     <authtype>BASIC</authtype>
                     <username>{$API.USER}</username>
                     <password>{$API.PASSWORD}</password>
                     <description>Returns the metrics of a physical disk.</description>
                     <applications>
                        <application>
                           <name>Zabbix raw items</name>
                        </application>
                     </applications>
                     <url>{$API.URL}{#ODATA}</url>
                  </item_prototype>
                  <item_prototype>
                     <name>Dell R740: {#DISK_NAME} Media type</name>
                     <type>DEPENDENT</type>
                     <key>dell.server.hw.physicaldisk.media_type[{#DISK_NAME}]</key>
                     <delay>0</delay>
                     <history>7d</history>
                     <trends>0</trends>
                     <status>ENABLED</status>
                     <value_type>CHAR</value_type>
                     <description>The type of media contained in this drive. Possible values: HDD, SSD, SMR, null.</description>
                     <applications>
                        <application>
                           <name>Physical disks</name>
                        </application>
                     </applications>
                     <preprocessing>
                        <step>
                           <type>JSONPATH</type>
                           <params>$.MediaType</params>
                        </step>
                        <step>
                           <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                           <params>6h</params>
                        </step>
                     </preprocessing>
                     <master_item>
                        <key>dell.server.hw.physicaldisk.get[{#DISK_NAME}]</key>
                     </master_item>
                  </item_prototype>
                  <item_prototype>
                     <name>Dell R740: {#DISK_NAME} Model name</name>
                     <type>DEPENDENT</type>
                     <key>dell.server.hw.physicaldisk.model[{#DISK_NAME}]</key>
                     <delay>0</delay>
                     <history>7d</history>
                     <trends>0</trends>
                     <status>ENABLED</status>
                     <value_type>CHAR</value_type>
                     <description>The model number of the drive.</description>
                     <applications>
                        <application>
                           <name>Physical disks</name>
                        </application>
                     </applications>
                     <preprocessing>
                        <step>
                           <type>JSONPATH</type>
                           <params>$.Model</params>
                        </step>
                        <step>
                           <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                           <params>6h</params>
                        </step>
                     </preprocessing>
                     <master_item>
                        <key>dell.server.hw.physicaldisk.get[{#DISK_NAME}]</key>
                     </master_item>
                  </item_prototype>
                  <item_prototype>
                     <name>Dell R740: {#DISK_NAME} Serial number</name>
                     <type>DEPENDENT</type>
                     <key>dell.server.hw.physicaldisk.serialnumber[{#DISK_NAME}]</key>
                     <delay>0</delay>
                     <history>7d</history>
                     <trends>0</trends>
                     <status>ENABLED</status>
                     <value_type>CHAR</value_type>
                     <description>The serial number of this drive.</description>
                     <applications>
                        <application>
                           <name>Physical disks</name>
                        </application>
                     </applications>
                     <preprocessing>
                        <step>
                           <type>JSONPATH</type>
                           <params>$.SerialNumber</params>
                        </step>
                        <step>
                           <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                           <params>6h</params>
                        </step>
                     </preprocessing>
                     <master_item>
                        <key>dell.server.hw.physicaldisk.get[{#DISK_NAME}]</key>
                     </master_item>
                     <trigger_prototypes>
                        <trigger_prototype>
                           <expression>{diff()}=1 and {strlen()}&gt;0</expression>
                           <name>Dell R740: {#DISK_NAME} has been replaced (new serial number received)</name>
                           <priority>INFO</priority>
                           <description>{#DISK_NAME} serial number has changed. Ack to close</description>
                           <manual_close>YES</manual_close>
                        </trigger_prototype>
                     </trigger_prototypes>
                  </item_prototype>
                  <item_prototype>
                     <name>Dell R740: {#DISK_NAME} Size</name>
                     <type>DEPENDENT</type>
                     <key>dell.server.hw.physicaldisk.size[{#DISK_NAME}]</key>
                     <delay>0</delay>
                     <history>7d</history>
                     <trends>0d</trends>
                     <status>ENABLED</status>
                     <units>B</units>
                     <description>The size, in bytes, of this drive.</description>
                     <applications>
                        <application>
                           <name>Physical disks</name>
                        </application>
                     </applications>
                     <preprocessing>
                        <step>
                           <type>JSONPATH</type>
                           <params>$.CapacityBytes</params>
                        </step>
                        <step>
                           <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                           <params>6h</params>
                        </step>
                     </preprocessing>
                     <master_item>
                        <key>dell.server.hw.physicaldisk.get[{#DISK_NAME}]</key>
                     </master_item>
                  </item_prototype>
                  <item_prototype>
                     <name>Dell R740: {#DISK_NAME} Status</name>
                     <type>DEPENDENT</type>
                     <key>dell.server.hw.physicaldisk.status[{#DISK_NAME}]</key>
                     <delay>0</delay>
                     <history>7d</history>
                     <trends>0</trends>
                     <status>ENABLED</status>
                     <value_type>CHAR</value_type>
                     <description>The status of the job. Possible values: OK, Warning, Critical.</description>
                     <applications>
                        <application>
                           <name>Physical disks</name>
                        </application>
                     </applications>
                     <preprocessing>
                        <step>
                           <type>JSONPATH</type>
                           <params>$.Status.Health</params>
                        </step>
                        <step>
                           <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                           <params>6h</params>
                        </step>
                     </preprocessing>
                     <master_item>
                        <key>dell.server.hw.physicaldisk.get[{#DISK_NAME}]</key>
                     </master_item>
                     <trigger_prototypes>
                        <trigger_prototype>
                           <expression>{str("Critical")}=1</expression>
                           <name>Dell R740: {#DISK_NAME} is in a critical state</name>
                           <opdata>Current state: {ITEM.LASTVALUE1}</opdata>
                           <priority>HIGH</priority>
                           <description>Please check the device for faults.</description>
                        </trigger_prototype>
                        <trigger_prototype>
                           <expression>{str("Warning")}=1</expression>
                           <name>Dell R740: {#DISK_NAME} is in warning state</name>
                           <opdata>Current state: {ITEM.LASTVALUE1}</opdata>
                           <priority>WARNING</priority>
                           <description>Please check the device for warnings.</description>
                           <dependencies>
                              <dependency>
                                 <name>Dell R740: {#DISK_NAME} is in a critical state</name>
                                 <expression>{Template Server DELL PowerEdge R740 by HTTP:dell.server.hw.physicaldisk.status[{#DISK_NAME}].str("Critical")}=1</expression>
                              </dependency>
                           </dependencies>
                        </trigger_prototype>
                     </trigger_prototypes>
                  </item_prototype>
               </item_prototypes>
               <host_prototypes/>
               <preprocessing>
                  <step>
                     <type>JAVASCRIPT</type>
                     <params>function request(url) {
    api_request = new CurlHttpRequest();
    api_request.AddHeader('Authorization: Basic ' + btoa(params.user + ':' + params.password));
    Zabbix.Log(4, '[ DELL ] Sending request: ' + url);

    try {
        response = api_request.Get(url);
    } catch (error) {
        Zabbix.Log(4, '[ DELL ] Get request returned error ' + error);
        throw 'Get request returned error ' + error + '. Check debug log for more information.';
    }

    Zabbix.Log(4, '[ DELL ] Received response with status code ' +
        api_request.Status() + '\n' + response);

    if (api_request.Status() !== 200) {
        var message = 'Request failed with status code ' + api_request.Status();
        if (response !== null) {
            if (typeof response.message === 'string') {
                message += ': ' + response.message;
            }
        }

        throw message + ' Check debug log for more information.';
    }

    if (response !== null) {
        try {
            response = JSON.parse(response);
        }
        catch (error) {
            Zabbix.Log(4, '[ DELL ] Failed to parse response.');
            response = null;
        }
    }

    return {
        status: api_request.Status(),
        body: response
    };
}

function getField(object, field, def) {
    var names = field.split('.');
    var name = names.shift();

    while (typeof name !== 'undefined') {
        if (typeof object === undefined || typeof object[name] === 'undefined') {
            return def;
        }

        object = object[name];
        name = names.shift();
    }

    return object;
}

try {
    storages = JSON.parse(value);
}
catch (error) {
    Zabbix.Log(4, '[ DELL ] Failed to parse response.');
    storages = null;
}

var params = {
    url: '{$API.URL}',
    user: '{$API.USER}',
    password: '{$API.PASSWORD}'
};
var result = [];

var index = params.url.indexOf('://');
index = params.url.indexOf('/', (index !== -1) ? (index + 3) : 0);
if (index !== -1) {
    params.url = params.url.substring(0, index);
}

if (storages.Members instanceof Array) {
    storages.Members.forEach(function (storage) {
        if (typeof storage["@odata.id"] === 'string') {
            response = request(params.url + storage["@odata.id"]);
            drives = response.body;
            if (drives.Drives instanceof Array) {
                drives.Drives.forEach(function (drive) {
                    if (typeof drive["@odata.id"] === 'string') {
                        response = request(params.url + drive["@odata.id"]);
                        result.push({ '{#DISK_NAME}': getField(response.body, 'Name', ''), '{#ODATA}': drive["@odata.id"] });
                    }
                });
            }
        }
    });
}

return JSON.stringify(result);
</params>
                  </step>
                  <step>
                     <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                     <params>6h</params>
                  </step>
               </preprocessing>
            </discovery_rule>
            <discovery_rule>
               <name>PSU discovery</name>
               <type>HTTP_AGENT</type>
               <key>psu.discovery</key>
               <delay>1h</delay>
               <authtype>BASIC</authtype>
               <username>{$API.USER}</username>
               <password>{$API.PASSWORD}</password>
               <url>{$API.URL}/redfish/v1/Chassis/System.Embedded.1/Sensors</url>
               <description>Discovery of PSU sensors.</description>
               <item_prototypes>
                  <item_prototype>
                     <name>Dell R740: {#SENSOR_NAME} Get sensor</name>
                     <type>HTTP_AGENT</type>
                     <key>dell.server.sensor.psu.get[{#SENSOR_NAME}]</key>
                     <history>0</history>
                     <trends>0</trends>
                     <status>ENABLED</status>
                     <value_type>TEXT</value_type>
                     <authtype>BASIC</authtype>
                     <username>{$API.USER}</username>
                     <password>{$API.PASSWORD}</password>
                     <description>Returns the metrics of a sensor.</description>
                     <applications>
                        <application>
                           <name>Zabbix raw items</name>
                        </application>
                     </applications>
                     <url>{$API.URL}{#ODATA}</url>
                  </item_prototype>
                  <item_prototype>
                     <name>Dell R740: {#SENSOR_NAME} Status</name>
                     <type>DEPENDENT</type>
                     <key>dell.server.sensor.psu.status[{#SENSOR_NAME}]</key>
                     <delay>0</delay>
                     <history>7d</history>
                     <trends>0</trends>
                     <status>ENABLED</status>
                     <value_type>CHAR</value_type>
                     <description>The status of the job. Possible values: OK, Warning, Critical.</description>
                     <applications>
                        <application>
                           <name>Power supply</name>
                        </application>
                     </applications>
                     <preprocessing>
                        <step>
                           <type>JSONPATH</type>
                           <params>$.Status.Health</params>
                        </step>
                        <step>
                           <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                           <params>6h</params>
                        </step>
                     </preprocessing>
                     <master_item>
                        <key>dell.server.sensor.psu.get[{#SENSOR_NAME}]</key>
                     </master_item>
                     <trigger_prototypes>
                        <trigger_prototype>
                           <expression>{str("Critical")}=1</expression>
                           <name>Dell R740: {#SENSOR_NAME} is in a critical state</name>
                           <opdata>Current state: {ITEM.LASTVALUE1}</opdata>
                           <priority>HIGH</priority>
                           <description>Please check the device for faults.</description>
                        </trigger_prototype>
                        <trigger_prototype>
                           <expression>{str("Warning")}=1</expression>
                           <name>Dell R740: {#SENSOR_NAME} is in warning state</name>
                           <opdata>Current state: {ITEM.LASTVALUE1}</opdata>
                           <priority>WARNING</priority>
                           <description>Please check the device for warnings.</description>
                           <dependencies>
                              <dependency>
                                 <name>Dell R740: {#SENSOR_NAME} is in a critical state</name>
                                 <expression>{Template Server DELL PowerEdge R740 by HTTP:dell.server.sensor.psu.status[{#SENSOR_NAME}].str("Critical")}=1</expression>
                              </dependency>
                           </dependencies>
                        </trigger_prototype>
                     </trigger_prototypes>
                  </item_prototype>
               </item_prototypes>
               <host_prototypes/>
               <preprocessing>
                  <step>
                     <type>JAVASCRIPT</type>
                     <params>function request(url) {
    api_request = new CurlHttpRequest();
    api_request.AddHeader('Authorization: Basic ' + btoa(params.user + ':' + params.password));
    Zabbix.Log(4, '[ DELL ] Sending request: ' + url);

    try {
        response = api_request.Get(url);
    } catch (error) {
        Zabbix.Log(4, '[ DELL ] Get request returned error ' + error);
        throw 'Get request returned error ' + error + '. Check debug log for more information.';
    }

    Zabbix.Log(4, '[ DELL ] Received response with status code ' +
        api_request.Status() + '\n' + response);

    if (api_request.Status() !== 200) {
        var message = 'Request failed with status code ' + api_request.Status();
        if (response !== null) {
            if (typeof response.message === 'string') {
                message += ': ' + response.message;
            }
        }

        throw message + ' Check debug log for more information.';
    }

    if (response !== null) {
        try {
            response = JSON.parse(response);
        }
        catch (error) {
            Zabbix.Log(4, '[ DELL ] Failed to parse response.');
            response = null;
        }
    }

    return {
        status: api_request.Status(),
        body: response
    };
}

function getField(object, field, def) {
    var names = field.split('.');
    var name = names.shift();

    while (typeof name !== 'undefined') {
        if (typeof object === undefined || typeof object[name] === 'undefined') {
            return def;
        }

        object = object[name];
        name = names.shift();
    }

    return object;
}

try {
    sensors = JSON.parse(value);
}
catch (error) {
    Zabbix.Log(4, '[ DELL ] Failed to parse response.');
    sensors = null;
}

var params = {
    url: '{$API.URL}',
    user: '{$API.USER}',
    password: '{$API.PASSWORD}'
};
var result = [];

var index = params.url.indexOf('://');
index = params.url.indexOf('/', (index !== -1) ? (index + 3) : 0);
if (index !== -1) {
    params.url = params.url.substring(0, index);
}

if (sensors.Members instanceof Array) {
    sensors.Members.forEach(function (sensor) {
        if (typeof sensor["@odata.id"] === 'string') {
            response = request(params.url + sensor["@odata.id"]);
            if (getField(response.body, 'ReadingType', '') === 'Voltage') {
                result.push({ '{#SENSOR_NAME}': getField(response.body, 'Name', ''), '{#ODATA}': sensor["@odata.id"] });
            }
        }
    });
}

return JSON.stringify(result);
</params>
                  </step>
                  <step>
                     <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                     <params>6h</params>
                  </step>
               </preprocessing>
            </discovery_rule>
            <discovery_rule>
               <name>Temperature discovery</name>
               <type>HTTP_AGENT</type>
               <key>temp.discovery</key>
               <delay>1h</delay>
               <authtype>BASIC</authtype>
               <username>{$API.USER}</username>
               <password>{$API.PASSWORD}</password>
               <url>{$API.URL}/redfish/v1/Chassis/System.Embedded.1/Sensors</url>
               <description>Discovery of temperature sensors.</description>
               <item_prototypes>
                  <item_prototype>
                     <name>Dell R740: {#SENSOR_NAME} Get sensor</name>
                     <type>HTTP_AGENT</type>
                     <key>dell.server.sensor.temp.get[{#SENSOR_NAME}]</key>
                     <history>0</history>
                     <trends>0</trends>
                     <status>ENABLED</status>
                     <value_type>TEXT</value_type>
                     <authtype>BASIC</authtype>
                     <username>{$API.USER}</username>
                     <password>{$API.PASSWORD}</password>
                     <description>Returns the metrics of a sensor.</description>
                     <applications>
                        <application>
                           <name>Zabbix raw items</name>
                        </application>
                     </applications>
                     <url>{$API.URL}{#ODATA}</url>
                  </item_prototype>
                  <item_prototype>
                     <name>Dell R740: {#SENSOR_NAME} Status</name>
                     <type>DEPENDENT</type>
                     <key>dell.server.sensor.temp.status[{#SENSOR_NAME}]</key>
                     <delay>0</delay>
                     <history>7d</history>
                     <trends>0</trends>
                     <status>ENABLED</status>
                     <value_type>CHAR</value_type>
                     <description>The status of the job. Possible values: OK, Warning, Critical.</description>
                     <applications>
                        <application>
                           <name>Temperature</name>
                        </application>
                     </applications>
                     <preprocessing>
                        <step>
                           <type>JSONPATH</type>
                           <params>$.Status.Health</params>
                        </step>
                        <step>
                           <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                           <params>6h</params>
                        </step>
                     </preprocessing>
                     <master_item>
                        <key>dell.server.sensor.temp.get[{#SENSOR_NAME}]</key>
                     </master_item>
                     <trigger_prototypes>
                        <trigger_prototype>
                           <expression>{str("Critical")}=1</expression>
                           <name>Dell R740: {#SENSOR_NAME} is in a critical state</name>
                           <opdata>Current state: {ITEM.LASTVALUE1}</opdata>
                           <priority>HIGH</priority>
                           <description>Please check the device for faults.</description>
                        </trigger_prototype>
                        <trigger_prototype>
                           <expression>{str("Warning")}=1</expression>
                           <name>Dell R740: {#SENSOR_NAME} is in warning state</name>
                           <opdata>Current state: {ITEM.LASTVALUE1}</opdata>
                           <priority>WARNING</priority>
                           <description>Please check the device for warnings.</description>
                           <dependencies>
                              <dependency>
                                 <name>Dell R740: {#SENSOR_NAME} is in a critical state</name>
                                 <expression>{Template Server DELL PowerEdge R740 by HTTP:dell.server.sensor.temp.status[{#SENSOR_NAME}].str("Critical")}=1</expression>
                              </dependency>
                           </dependencies>
                        </trigger_prototype>
                     </trigger_prototypes>
                  </item_prototype>
                  <item_prototype>
                     <name>Dell R740: {#SENSOR_NAME} Value</name>
                     <type>DEPENDENT</type>
                     <key>dell.server.sensor.temp.value[{#SENSOR_NAME}]</key>
                     <delay>0</delay>
                     <history>7d</history>
                     <status>ENABLED</status>
                     <value_type>FLOAT</value_type>
                     <units>°C</units>
                     <description>The sensor value.</description>
                     <applications>
                        <application>
                           <name>Temperature</name>
                        </application>
                     </applications>
                     <preprocessing>
                        <step>
                           <type>JSONPATH</type>
                           <params>$.Reading</params>
                        </step>
                     </preprocessing>
                     <master_item>
                        <key>dell.server.sensor.temp.get[{#SENSOR_NAME}]</key>
                     </master_item>
                  </item_prototype>
               </item_prototypes>
               <host_prototypes/>
               <preprocessing>
                  <step>
                     <type>JAVASCRIPT</type>
                     <params>function request(url) {
    api_request = new CurlHttpRequest();
    api_request.AddHeader('Authorization: Basic ' + btoa(params.user + ':' + params.password));
    Zabbix.Log(4, '[ DELL ] Sending request: ' + url);

    try {
        response = api_request.Get(url);
    } catch (error) {
        Zabbix.Log(4, '[ DELL ] Get request returned error ' + error);
        throw 'Get request returned error ' + error + '. Check debug log for more information.';
    }

    Zabbix.Log(4, '[ DELL ] Received response with status code ' +
        api_request.Status() + '\n' + response);

    if (api_request.Status() !== 200) {
        var message = 'Request failed with status code ' + api_request.Status();
        if (response !== null) {
            if (typeof response.message === 'string') {
                message += ': ' + response.message;
            }
        }

        throw message + ' Check debug log for more information.';
    }

    if (response !== null) {
        try {
            response = JSON.parse(response);
        }
        catch (error) {
            Zabbix.Log(4, '[ DELL ] Failed to parse response.');
            response = null;
        }
    }

    return {
        status: api_request.Status(),
        body: response
    };
}

function getField(object, field, def) {
    var names = field.split('.');
    var name = names.shift();

    while (typeof name !== 'undefined') {
        if (typeof object === undefined || typeof object[name] === 'undefined') {
            return def;
        }

        object = object[name];
        name = names.shift();
    }

    return object;
}

try {
    sensors = JSON.parse(value);
}
catch (error) {
    Zabbix.Log(4, '[ DELL ] Failed to parse response.');
    sensors = null;
}

var params = {
    url: '{$API.URL}',
    user: '{$API.USER}',
    password: '{$API.PASSWORD}'
};
var result = [];

var index = params.url.indexOf('://');
index = params.url.indexOf('/', (index !== -1) ? (index + 3) : 0);
if (index !== -1) {
    params.url = params.url.substring(0, index);
}

if (sensors.Members instanceof Array) {
    sensors.Members.forEach(function (sensor) {
        if (typeof sensor["@odata.id"] === 'string') {
            response = request(params.url + sensor["@odata.id"]);
            if (getField(response.body, 'ReadingType', '') === 'Temperature') {
                result.push({ '{#SENSOR_NAME}': getField(response.body, 'Name', ''), '{#ODATA}': sensor["@odata.id"] });
            }
        }
    });
}

return JSON.stringify(result);
</params>
                  </step>
                  <step>
                     <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                     <params>6h</params>
                  </step>
               </preprocessing>
            </discovery_rule>
            <discovery_rule>
               <name>Virtual disk discovery</name>
               <type>HTTP_AGENT</type>
               <key>virtualdisk.discovery</key>
               <delay>1h</delay>
               <authtype>BASIC</authtype>
               <username>{$API.USER}</username>
               <password>{$API.PASSWORD}</password>
               <url>{$API.URL}/redfish/v1/Systems/System.Embedded.1/Storage</url>
               <description>Discovery of virtual disks.</description>
               <item_prototypes>
                  <item_prototype>
                     <name>Dell R740: {#DISK_NAME} Get disk</name>
                     <type>HTTP_AGENT</type>
                     <key>dell.server.hw.virtualdisk.get[{#DISK_NAME}]</key>
                     <history>0</history>
                     <trends>0</trends>
                     <status>ENABLED</status>
                     <value_type>TEXT</value_type>
                     <authtype>BASIC</authtype>
                     <username>{$API.USER}</username>
                     <password>{$API.PASSWORD}</password>
                     <description>Returns the metrics of a virtual disk.</description>
                     <applications>
                        <application>
                           <name>Zabbix raw items</name>
                        </application>
                     </applications>
                     <url>{$API.URL}{#ODATA}</url>
                  </item_prototype>
                  <item_prototype>
                     <name>Dell R740: {#DISK_NAME} RAID status</name>
                     <type>DEPENDENT</type>
                     <key>dell.server.hw.virtualdisk.raidstatus[{#DISK_NAME}]</key>
                     <delay>0</delay>
                     <history>7d</history>
                     <trends>0</trends>
                     <status>ENABLED</status>
                     <value_type>CHAR</value_type>
                     <description>This property represents the RAID specific status. Possible values: Blocked, Degraded, Failed, Foreign, Offline, Online, Ready, Unknown, null.</description>
                     <applications>
                        <application>
                           <name>Virtual disks</name>
                        </application>
                     </applications>
                     <preprocessing>
                        <step>
                           <type>JSONPATH</type>
                           <params>$.Oem.Dell.DellVirtualDisk.RaidStatus</params>
                        </step>
                        <step>
                           <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                           <params>6h</params>
                        </step>
                     </preprocessing>
                     <master_item>
                        <key>dell.server.hw.virtualdisk.get[{#DISK_NAME}]</key>
                     </master_item>
                  </item_prototype>
                  <item_prototype>
                     <name>Dell R740: {#DISK_NAME} Read policy</name>
                     <type>DEPENDENT</type>
                     <key>dell.server.hw.virtualdisk.readpolicy[{#DISK_NAME}]</key>
                     <delay>0</delay>
                     <history>2w</history>
                     <trends>0</trends>
                     <status>ENABLED</status>
                     <value_type>CHAR</value_type>
                     <description>Indicates the read cache policy setting for the Volume. Possible values: ReadAhead, AdaptiveReadAhead, Off.</description>
                     <applications>
                        <application>
                           <name>Virtual disks</name>
                        </application>
                     </applications>
                     <preprocessing>
                        <step>
                           <type>JSONPATH</type>
                           <params>$.Oem.Dell.DellVirtualDisk.ReadCachePolicy</params>
                        </step>
                        <step>
                           <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                           <params>6h</params>
                        </step>
                     </preprocessing>
                     <master_item>
                        <key>dell.server.hw.virtualdisk.get[{#DISK_NAME}]</key>
                     </master_item>
                  </item_prototype>
                  <item_prototype>
                     <name>Dell R740: {#DISK_NAME} Size</name>
                     <type>DEPENDENT</type>
                     <key>dell.server.hw.virtualdisk.size[{#DISK_NAME}]</key>
                     <delay>0</delay>
                     <history>7d</history>
                     <trends>0d</trends>
                     <status>ENABLED</status>
                     <units>B</units>
                     <description>The size in bytes of this Volume.</description>
                     <applications>
                        <application>
                           <name>Virtual disks</name>
                        </application>
                     </applications>
                     <preprocessing>
                        <step>
                           <type>JSONPATH</type>
                           <params>$.CapacityBytes</params>
                        </step>
                        <step>
                           <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                           <params>6h</params>
                        </step>
                     </preprocessing>
                     <master_item>
                        <key>dell.server.hw.virtualdisk.get[{#DISK_NAME}]</key>
                     </master_item>
                  </item_prototype>
                  <item_prototype>
                     <name>Dell R740: {#DISK_NAME} Current state</name>
                     <type>DEPENDENT</type>
                     <key>dell.server.hw.virtualdisk.state[{#DISK_NAME}]</key>
                     <delay>0</delay>
                     <history>2w</history>
                     <trends>0</trends>
                     <status>ENABLED</status>
                     <value_type>CHAR</value_type>
                     <description>The known state of the Resource, for example, enabled. Possible values: Enabled, Disabled, StandbyOffline, StandbySpare, InTest, Starting, Absent, UnavailableOffline, Deferring, Quiesced, Updating, Qualified.</description>
                     <applications>
                        <application>
                           <name>Virtual disks</name>
                        </application>
                     </applications>
                     <preprocessing>
                        <step>
                           <type>JSONPATH</type>
                           <params>$.Status.State</params>
                        </step>
                        <step>
                           <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                           <params>6h</params>
                        </step>
                     </preprocessing>
                     <master_item>
                        <key>dell.server.hw.virtualdisk.get[{#DISK_NAME}]</key>
                     </master_item>
                  </item_prototype>
                  <item_prototype>
                     <name>Dell R740: {#DISK_NAME} Status</name>
                     <type>DEPENDENT</type>
                     <key>dell.server.hw.virtualdisk.status[{#DISK_NAME}]</key>
                     <delay>0</delay>
                     <history>7d</history>
                     <trends>0</trends>
                     <status>ENABLED</status>
                     <value_type>CHAR</value_type>
                     <description>The status of the job. Possible values: OK, Warning, Critical.</description>
                     <applications>
                        <application>
                           <name>Virtual disks</name>
                        </application>
                     </applications>
                     <preprocessing>
                        <step>
                           <type>JSONPATH</type>
                           <params>$.Status.Health</params>
                        </step>
                        <step>
                           <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                           <params>6h</params>
                        </step>
                     </preprocessing>
                     <master_item>
                        <key>dell.server.hw.virtualdisk.get[{#DISK_NAME}]</key>
                     </master_item>
                     <trigger_prototypes>
                        <trigger_prototype>
                           <expression>{str("Critical")}=1</expression>
                           <name>Dell R740: {#DISK_NAME} is in a critical state</name>
                           <opdata>Current state: {ITEM.LASTVALUE1}</opdata>
                           <priority>HIGH</priority>
                           <description>Please check the device for faults.</description>
                        </trigger_prototype>
                        <trigger_prototype>
                           <expression>{str("Warning")}=1</expression>
                           <name>Dell R740: {#DISK_NAME} is in warning state</name>
                           <opdata>Current state: {ITEM.LASTVALUE1}</opdata>
                           <priority>WARNING</priority>
                           <description>Please check the device for warnings.</description>
                           <dependencies>
                              <dependency>
                                 <name>Dell R740: {#DISK_NAME} is in a critical state</name>
                                 <expression>{Template Server DELL PowerEdge R740 by HTTP:dell.server.hw.virtualdisk.status[{#DISK_NAME}].str("Critical")}=1</expression>
                              </dependency>
                           </dependencies>
                        </trigger_prototype>
                     </trigger_prototypes>
                  </item_prototype>
                  <item_prototype>
                     <name>Dell R740: {#DISK_NAME} Write policy</name>
                     <type>DEPENDENT</type>
                     <key>dell.server.hw.virtualdisk.writepolicy[{#DISK_NAME}]</key>
                     <delay>0</delay>
                     <history>2w</history>
                     <trends>0</trends>
                     <status>ENABLED</status>
                     <value_type>CHAR</value_type>
                     <description>Indicates the write cache policy setting for the Volume. Possible values: WriteThrough, ProtectedWriteBack, UnprotectedWriteBack.</description>
                     <applications>
                        <application>
                           <name>Virtual disks</name>
                        </application>
                     </applications>
                     <preprocessing>
                        <step>
                           <type>JSONPATH</type>
                           <params>$.Oem.Dell.DellVirtualDisk.WriteCachePolicy</params>
                        </step>
                        <step>
                           <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                           <params>6h</params>
                        </step>
                     </preprocessing>
                     <master_item>
                        <key>dell.server.hw.virtualdisk.get[{#DISK_NAME}]</key>
                     </master_item>
                  </item_prototype>
               </item_prototypes>
               <host_prototypes/>
               <preprocessing>
                  <step>
                     <type>JAVASCRIPT</type>
                     <params>function request(url) {
    api_request = new CurlHttpRequest();
    api_request.AddHeader('Authorization: Basic ' + btoa(params.user + ':' + params.password));
    Zabbix.Log(4, '[ DELL ] Sending request: ' + url);

    try {
        response = api_request.Get(url);
    } catch (error) {
        Zabbix.Log(4, '[ DELL ] Get request returned error ' + error);
        throw 'Get request returned error ' + error + '. Check debug log for more information.';
    }

    Zabbix.Log(4, '[ DELL ] Received response with status code ' +
        api_request.Status() + '\n' + response);

    if (api_request.Status() !== 200) {
        var message = 'Request failed with status code ' + api_request.Status();
        if (response !== null) {
            if (typeof response.message === 'string') {
                message += ': ' + response.message;
            }
        }

        throw message + ' Check debug log for more information.';
    }

    if (response !== null) {
        try {
            response = JSON.parse(response);
        }
        catch (error) {
            Zabbix.Log(4, '[ DELL ] Failed to parse response.');
            response = null;
        }
    }

    return {
        status: api_request.Status(),
        body: response
    };
}

function getField(object, field, def) {
    var names = field.split('.');
    var name = names.shift();

    while (typeof name !== 'undefined') {
        if (typeof object === undefined || typeof object[name] === 'undefined') {
            return def;
        }

        object = object[name];
        name = names.shift();
    }

    return object;
}

try {
    storages = JSON.parse(value);
}
catch (error) {
    Zabbix.Log(4, '[ DELL ] Failed to parse response.');
    storages = null;
}

var params = {
    url: '{$API.URL}',
    user: '{$API.USER}',
    password: '{$API.PASSWORD}'
};
var result = [];

var index = params.url.indexOf('://');
index = params.url.indexOf('/', (index !== -1) ? (index + 3) : 0);
if (index !== -1) {
    params.url = params.url.substring(0, index);
}

if (storages.Members instanceof Array) {
    storages.Members.forEach(function (storage) {
        if (typeof storage["@odata.id"] === 'string') {
            response = request(params.url + storage["@odata.id"] + "/Volumes");
            volumes = response.body;
            if (volumes.Members instanceof Array) {
                volumes.Members.forEach(function (volume) {
                    if (typeof volume["@odata.id"] === 'string') {
                        response = request(params.url + volume["@odata.id"]);
                        result.push({ '{#DISK_NAME}': getField(response.body, 'Name', ''), '{#ODATA}': volume["@odata.id"] });
                    }
                });
            }
        }
    });
}

return JSON.stringify(result);
</params>
                  </step>
                  <step>
                     <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                     <params>6h</params>
                  </step>
               </preprocessing>
            </discovery_rule>
         </discovery_rules>
         <macros>
            <macro>
               <macro>{$API.PASSWORD}</macro>
               <value>&lt;Put your password here&gt;</value>
               <description>The Dell iDRAC user password.</description>
            </macro>
            <macro>
               <macro>{$API.URL}</macro>
               <value>&lt;Put your URL here&gt;</value>
               <description>The Dell iDRAC Redfish API URL in the format `&lt;scheme&gt;://&lt;host&gt;:&lt;port&gt;`.</description>
            </macro>
            <macro>
               <macro>{$API.USER}</macro>
               <value>&lt;Put your username here&gt;</value>
               <description>The Dell iDRAC username.</description>
            </macro>
            <macro>
               <macro>{$IFCONTROL}</macro>
               <value>1</value>
               <description>Link status trigger will be fired only for interfaces that have the context macro equaled 1.</description>
            </macro>
         </macros>
      </template>
   </templates>
   <value_maps>
      <value_map>
         <name>zabbix.host.available</name>
         <mappings>
            <mapping>
               <value>0</value>
               <newvalue>not available</newvalue>
            </mapping>
            <mapping>
               <value>1</value>
               <newvalue>available</newvalue>
            </mapping>
         </mappings>
      </value_map>
   </value_maps>
</zabbix_export>
