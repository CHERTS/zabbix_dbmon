<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
    <version>5.0</version>
    <date>2021-03-09T06:33:32Z</date>
    <groups>
        <group>
            <name>Templates/Applications</name>
        </group>
    </groups>
    <templates>
        <template>
            <template>RabbitMQ cluster by Zabbix agent</template>
            <name>RabbitMQ cluster by Zabbix agent</name>
            <description>Get cluster metrics from RabbitMQ management plugin provided an HTTP-based API using Zabbix agent.&#13;
&#13;
You can discuss this template or leave feedback on our forum https://www.zabbix.com/forum/zabbix-suggestions-and-feedback/387226-discussion-thread-for-official-zabbix-template-rabbitmq&#13;
&#13;
Template tooling version used: 0.38</description>
            <groups>
                <group>
                    <name>Templates/Applications</name>
                </group>
            </groups>
            <applications>
                <application>
                    <name>RabbitMQ</name>
                </application>
                <application>
                    <name>Zabbix raw items</name>
                </application>
            </applications>
            <items>
                <item>
                    <name>RabbitMQ: Messages acknowledged</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.overview.messages.ack</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <description>Number of messages delivered to clients and acknowledged</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.message_stats.ack</params>
                            <error_handler>CUSTOM_VALUE</error_handler>
                            <error_handler_params>0</error_handler_params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/overview&quot;]</key>
                    </master_item>
                </item>
                <item>
                    <name>RabbitMQ: Messages acknowledged per second</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.overview.messages.ack.rate</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <description>Rate of messages delivered to clients and acknowledged per second</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.message_stats.ack_details.rate</params>
                            <error_handler>CUSTOM_VALUE</error_handler>
                            <error_handler_params>0</error_handler_params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/overview&quot;]</key>
                    </master_item>
                </item>
                <item>
                    <name>RabbitMQ: Messages confirmed</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.overview.messages.confirm</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <description>Count of messages confirmed</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.message_stats.confirm</params>
                            <error_handler>CUSTOM_VALUE</error_handler>
                            <error_handler_params>0</error_handler_params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/overview&quot;]</key>
                    </master_item>
                </item>
                <item>
                    <name>RabbitMQ: Messages confirmed per second</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.overview.messages.confirm.rate</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <description>Rate of messages confirmed per second</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.message_stats.confirm_details.rate</params>
                            <error_handler>CUSTOM_VALUE</error_handler>
                            <error_handler_params>0</error_handler_params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/overview&quot;]</key>
                    </master_item>
                </item>
                <item>
                    <name>RabbitMQ: Messages delivered</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.overview.messages.deliver_get</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <description>Sum of messages delivered in acknowledgement mode to consumers, in no-acknowledgement mode to consumers, in acknowledgement mode in response to basic.get, and in no-acknowledgement mode in response to basic.get</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.message_stats.deliver_get</params>
                            <error_handler>CUSTOM_VALUE</error_handler>
                            <error_handler_params>0</error_handler_params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/overview&quot;]</key>
                    </master_item>
                </item>
                <item>
                    <name>RabbitMQ: Messages delivered per second</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.overview.messages.deliver_get.rate</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <description>Rate per second of the sum of messages delivered in acknowledgement mode to consumers, in no-acknowledgement mode to consumers, in acknowledgement mode in response to basic.get, and in no-acknowledgement mode in response to basic.get</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.message_stats.deliver_get_details.rate</params>
                            <error_handler>CUSTOM_VALUE</error_handler>
                            <error_handler_params>0</error_handler_params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/overview&quot;]</key>
                    </master_item>
                </item>
                <item>
                    <name>RabbitMQ: Messages published</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.overview.messages.publish</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <description>Count of messages published</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.message_stats.publish</params>
                            <error_handler>CUSTOM_VALUE</error_handler>
                            <error_handler_params>0</error_handler_params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/overview&quot;]</key>
                    </master_item>
                </item>
                <item>
                    <name>RabbitMQ: Messages published per second</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.overview.messages.publish.rate</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <description>Rate of messages published per second</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.message_stats.publish_details.rate</params>
                            <error_handler>CUSTOM_VALUE</error_handler>
                            <error_handler_params>0</error_handler_params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/overview&quot;]</key>
                    </master_item>
                </item>
                <item>
                    <name>RabbitMQ: Messages publish_in</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.overview.messages.publish_in</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <description>Count of messages published from channels into this overview</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.message_stats.publish_in</params>
                            <error_handler>CUSTOM_VALUE</error_handler>
                            <error_handler_params>0</error_handler_params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/overview&quot;]</key>
                    </master_item>
                </item>
                <item>
                    <name>RabbitMQ: Messages publish_in per second</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.overview.messages.publish_in.rate</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <description>Rate of messages published from channels into this overview per sec</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.message_stats.publish_in_details.rate</params>
                            <error_handler>CUSTOM_VALUE</error_handler>
                            <error_handler_params>0</error_handler_params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/overview&quot;]</key>
                    </master_item>
                </item>
                <item>
                    <name>RabbitMQ: Messages publish_out</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.overview.messages.publish_out</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <description>Count of messages published from this overview into queues</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.message_stats.publish_out</params>
                            <error_handler>CUSTOM_VALUE</error_handler>
                            <error_handler_params>0</error_handler_params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/overview&quot;]</key>
                    </master_item>
                </item>
                <item>
                    <name>RabbitMQ: Messages publish_out per second</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.overview.messages.publish_out.rate</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <description>Rate of messages published from this overview into queues per second,0,rabbitmq,total msgs pub out rate</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.message_stats.publish_out_details.rate</params>
                            <error_handler>CUSTOM_VALUE</error_handler>
                            <error_handler_params>0</error_handler_params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/overview&quot;]</key>
                    </master_item>
                </item>
                <item>
                    <name>RabbitMQ: Messages returned redeliver</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.overview.messages.redeliver</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <description>Count of subset of messages in deliver_get which had the redelivered flag set</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.message_stats.redeliver</params>
                            <error_handler>CUSTOM_VALUE</error_handler>
                            <error_handler_params>0</error_handler_params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/overview&quot;]</key>
                    </master_item>
                </item>
                <item>
                    <name>RabbitMQ: Messages returned redeliver per second</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.overview.messages.redeliver.rate</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <description>Rate of subset of messages in deliver_get which had the redelivered flag set per second</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.message_stats.redeliver_details.rate</params>
                            <error_handler>CUSTOM_VALUE</error_handler>
                            <error_handler_params>0</error_handler_params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/overview&quot;]</key>
                    </master_item>
                </item>
                <item>
                    <name>RabbitMQ: Messages returned unroutable</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.overview.messages.return_unroutable</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <description>Count of messages returned to publisher as unroutable</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.message_stats.return_unroutable</params>
                            <error_handler>CUSTOM_VALUE</error_handler>
                            <error_handler_params>0</error_handler_params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/overview&quot;]</key>
                    </master_item>
                </item>
                <item>
                    <name>RabbitMQ: Messages returned unroutable per second</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.overview.messages.return_unroutable.rate</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <description>Rate of messages returned to publisher as unroutable per second</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.message_stats.return_unroutable_details.rate</params>
                            <error_handler>CUSTOM_VALUE</error_handler>
                            <error_handler_params>0</error_handler_params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/overview&quot;]</key>
                    </master_item>
                </item>
                <item>
                    <name>RabbitMQ: Channels total</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.overview.object_totals.channels</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <description>Total number of channels</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.object_totals.channels</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/overview&quot;]</key>
                    </master_item>
                </item>
                <item>
                    <name>RabbitMQ: Connections total</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.overview.object_totals.connections</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <description>Total number of connections</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.object_totals.connections</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/overview&quot;]</key>
                    </master_item>
                </item>
                <item>
                    <name>RabbitMQ: Consumers total</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.overview.object_totals.consumers</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <description>Total number of consumers</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.object_totals.consumers</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/overview&quot;]</key>
                    </master_item>
                </item>
                <item>
                    <name>RabbitMQ: Exchanges total</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.overview.object_totals.exchanges</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <description>Total number of exchanges</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.object_totals.exchanges</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/overview&quot;]</key>
                    </master_item>
                </item>
                <item>
                    <name>RabbitMQ: Queues total</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.overview.object_totals.queues</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <description>Total number of queues</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.object_totals.queues</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/overview&quot;]</key>
                    </master_item>
                </item>
                <item>
                    <name>RabbitMQ: Messages total</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.overview.queue_totals.messages</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <description>Total number of messages (ready plus unacknowledged)</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.queue_totals.messages</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/overview&quot;]</key>
                    </master_item>
                </item>
                <item>
                    <name>RabbitMQ: Messages ready for delivery</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.overview.queue_totals.messages.ready</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <description>Number of messages ready for deliver</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.queue_totals.messages_ready</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/overview&quot;]</key>
                    </master_item>
                </item>
                <item>
                    <name>RabbitMQ: Messages unacknowledged</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.overview.queue_totals.messages.unacknowledged</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <description>Number of unacknowledged messages</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.queue_totals.messages_unacknowledged</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/overview&quot;]</key>
                    </master_item>
                </item>
                <item>
                    <name>RabbitMQ: Get exchanges</name>
                    <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/exchanges&quot;]</key>
                    <history>1h</history>
                    <trends>0</trends>
                    <value_type>TEXT</value_type>
                    <description>The HTTP API endpoint that returns exchanges metrics</description>
                    <applications>
                        <application>
                            <name>Zabbix raw items</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>REGEX</type>
                            <params>\n\s?\n(.*)
\1</params>
                        </step>
                    </preprocessing>
                </item>
                <item>
                    <name>RabbitMQ: Get overview</name>
                    <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/overview&quot;]</key>
                    <history>1h</history>
                    <trends>0</trends>
                    <value_type>TEXT</value_type>
                    <description>The HTTP API endpoint that returns cluster-wide metrics</description>
                    <applications>
                        <application>
                            <name>Zabbix raw items</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>REGEX</type>
                            <params>\n\s?\n(.*)
\1</params>
                        </step>
                    </preprocessing>
                    <triggers>
                        <trigger>
                            <expression>{nodata(30m)}=1</expression>
                            <name>RabbitMQ: Failed to fetch overview data (or no data for 30m)</name>
                            <priority>WARNING</priority>
                            <description>Zabbix has not received data for items for the last 30 minutes</description>
                            <manual_close>YES</manual_close>
                        </trigger>
                    </triggers>
                </item>
            </items>
            <discovery_rules>
                <discovery_rule>
                    <name>Exchanges discovery</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.exchanges.discovery</key>
                    <delay>0</delay>
                    <filter>
                        <evaltype>AND</evaltype>
                        <conditions>
                            <condition>
                                <macro>{#EXCHANGE}</macro>
                                <value>{$RABBITMQ.LLD.FILTER.EXCHANGE.MATCHES}</value>
                                <formulaid>A</formulaid>
                            </condition>
                            <condition>
                                <macro>{#EXCHANGE}</macro>
                                <value>{$RABBITMQ.LLD.FILTER.EXCHANGE.NOT_MATCHES}</value>
                                <operator>NOT_MATCHES_REGEX</operator>
                                <formulaid>B</formulaid>
                            </condition>
                        </conditions>
                    </filter>
                    <description>Individual exchange metrics</description>
                    <item_prototypes>
                        <item_prototype>
                            <name>RabbitMQ: Exchange {#VHOST}/{#EXCHANGE}/{#TYPE}: Messages acknowledged per second</name>
                            <type>DEPENDENT</type>
                            <key>rabbitmq.exchange.messages.ack.rate[&quot;{#VHOST}/{#EXCHANGE}/{#TYPE}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <description>Rate of messages delivered to clients and acknowledged per second</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>RabbitMQ: Exchange &quot;{#VHOST}/{#EXCHANGE}/{#TYPE}&quot;</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <params>$[?(@.name == &quot;{#EXCHANGE}&quot; &amp;&amp; @.vhost == &quot;{#VHOST}&quot; &amp;&amp; @.type ==&quot;{#TYPE}&quot;)].message_stats.ack_details.rate.first()</params>
                                    <error_handler>CUSTOM_VALUE</error_handler>
                                    <error_handler_params>0</error_handler_params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/exchanges&quot;]</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>RabbitMQ: Exchange {#VHOST}/{#EXCHANGE}/{#TYPE}: Messages acknowledged</name>
                            <type>DEPENDENT</type>
                            <key>rabbitmq.exchange.messages.ack[&quot;{#VHOST}/{#EXCHANGE}/{#TYPE}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <description>Number of messages delivered to clients and acknowledged</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>RabbitMQ: Exchange &quot;{#VHOST}/{#EXCHANGE}/{#TYPE}&quot;</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <params>$[?(@.name == &quot;{#EXCHANGE}&quot; &amp;&amp; @.vhost == &quot;{#VHOST}&quot; &amp;&amp; @.type ==&quot;{#TYPE}&quot;)].message_stats.ack.first()</params>
                                    <error_handler>CUSTOM_VALUE</error_handler>
                                    <error_handler_params>0</error_handler_params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/exchanges&quot;]</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>RabbitMQ: Exchange {#VHOST}/{#EXCHANGE}/{#TYPE}: Messages confirmed per second</name>
                            <type>DEPENDENT</type>
                            <key>rabbitmq.exchange.messages.confirm.rate[&quot;{#VHOST}/{#EXCHANGE}/{#TYPE}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <description>Rate of messages confirmed per second</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>RabbitMQ: Exchange &quot;{#VHOST}/{#EXCHANGE}/{#TYPE}&quot;</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <params>$[?(@.name == &quot;{#EXCHANGE}&quot; &amp;&amp; @.vhost == &quot;{#VHOST}&quot; &amp;&amp; @.type ==&quot;{#TYPE}&quot;)].message_stats.confirm_details.rate.first()</params>
                                    <error_handler>CUSTOM_VALUE</error_handler>
                                    <error_handler_params>0</error_handler_params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/exchanges&quot;]</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>RabbitMQ: Exchange {#VHOST}/{#EXCHANGE}/{#TYPE}: Messages confirmed</name>
                            <type>DEPENDENT</type>
                            <key>rabbitmq.exchange.messages.confirm[&quot;{#VHOST}/{#EXCHANGE}/{#TYPE}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <description>Count of messages confirmed</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>RabbitMQ: Exchange &quot;{#VHOST}/{#EXCHANGE}/{#TYPE}&quot;</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <params>$[?(@.name == &quot;{#EXCHANGE}&quot; &amp;&amp; @.vhost == &quot;{#VHOST}&quot; &amp;&amp; @.type ==&quot;{#TYPE}&quot;)].message_stats.confirm.first()</params>
                                    <error_handler>CUSTOM_VALUE</error_handler>
                                    <error_handler_params>0</error_handler_params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/exchanges&quot;]</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>RabbitMQ: Exchange {#VHOST}/{#EXCHANGE}/{#TYPE}: Messages delivered per second</name>
                            <type>DEPENDENT</type>
                            <key>rabbitmq.exchange.messages.deliver_get.rate[&quot;{#VHOST}/{#EXCHANGE}/{#TYPE}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <description>Rate per second of the sum of messages delivered in acknowledgement mode to consumers, in no-acknowledgement mode to consumers, in acknowledgement mode in response to basic.get, and in no-acknowledgement mode in response to basic.get</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>RabbitMQ: Exchange &quot;{#VHOST}/{#EXCHANGE}/{#TYPE}&quot;</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <params>$[?(@.name == &quot;{#EXCHANGE}&quot; &amp;&amp; @.vhost == &quot;{#VHOST}&quot; &amp;&amp; @.type ==&quot;{#TYPE}&quot;)].message_stats.deliver_get_details.rate.first()</params>
                                    <error_handler>CUSTOM_VALUE</error_handler>
                                    <error_handler_params>0</error_handler_params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/exchanges&quot;]</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>RabbitMQ: Exchange {#VHOST}/{#EXCHANGE}/{#TYPE}: Messages delivered</name>
                            <type>DEPENDENT</type>
                            <key>rabbitmq.exchange.messages.deliver_get[&quot;{#VHOST}/{#EXCHANGE}/{#TYPE}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <description>Sum of messages delivered in acknowledgement mode to consumers, in no-acknowledgement mode to consumers, in acknowledgement mode in response to basic.get, and in no-acknowledgement mode in response to basic.get</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>RabbitMQ: Exchange &quot;{#VHOST}/{#EXCHANGE}/{#TYPE}&quot;</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <params>$[?(@.name == &quot;{#EXCHANGE}&quot; &amp;&amp; @.vhost == &quot;{#VHOST}&quot; &amp;&amp; @.type ==&quot;{#TYPE}&quot;)].message_stats.deliver_get.first()</params>
                                    <error_handler>CUSTOM_VALUE</error_handler>
                                    <error_handler_params>0</error_handler_params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/exchanges&quot;]</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>RabbitMQ: Exchange {#VHOST}/{#EXCHANGE}/{#TYPE}: Messages published per second</name>
                            <type>DEPENDENT</type>
                            <key>rabbitmq.exchange.messages.publish.rate[&quot;{#VHOST}/{#EXCHANGE}/{#TYPE}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <description>Rate of messages published per second</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>RabbitMQ: Exchange &quot;{#VHOST}/{#EXCHANGE}/{#TYPE}&quot;</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <params>$[?(@.name == &quot;{#EXCHANGE}&quot; &amp;&amp; @.vhost == &quot;{#VHOST}&quot; &amp;&amp; @.type ==&quot;{#TYPE}&quot;)].message_stats.publish_details.rate.first()</params>
                                    <error_handler>CUSTOM_VALUE</error_handler>
                                    <error_handler_params>0</error_handler_params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/exchanges&quot;]</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>RabbitMQ: Exchange {#VHOST}/{#EXCHANGE}/{#TYPE}: Messages published</name>
                            <type>DEPENDENT</type>
                            <key>rabbitmq.exchange.messages.publish[&quot;{#VHOST}/{#EXCHANGE}/{#TYPE}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <description>Count of messages published</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>RabbitMQ: Exchange &quot;{#VHOST}/{#EXCHANGE}/{#TYPE}&quot;</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <params>$[?(@.name == &quot;{#EXCHANGE}&quot; &amp;&amp; @.vhost == &quot;{#VHOST}&quot; &amp;&amp; @.type ==&quot;{#TYPE}&quot;)].message_stats.publish.first()</params>
                                    <error_handler>CUSTOM_VALUE</error_handler>
                                    <error_handler_params>0</error_handler_params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/exchanges&quot;]</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>RabbitMQ: Exchange {#VHOST}/{#EXCHANGE}/{#TYPE}: Messages publish_in per second</name>
                            <type>DEPENDENT</type>
                            <key>rabbitmq.exchange.messages.publish_in.rate[&quot;{#VHOST}/{#EXCHANGE}/{#TYPE}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <description>Rate of messages published from channels into this overview per sec</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>RabbitMQ: Exchange &quot;{#VHOST}/{#EXCHANGE}/{#TYPE}&quot;</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <params>$[?(@.name == &quot;{#EXCHANGE}&quot; &amp;&amp; @.vhost == &quot;{#VHOST}&quot; &amp;&amp; @.type ==&quot;{#TYPE}&quot;)].message_stats.publish_in_details.rate.first()</params>
                                    <error_handler>CUSTOM_VALUE</error_handler>
                                    <error_handler_params>0</error_handler_params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/exchanges&quot;]</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>RabbitMQ: Exchange {#VHOST}/{#EXCHANGE}/{#TYPE}: Messages publish_in</name>
                            <type>DEPENDENT</type>
                            <key>rabbitmq.exchange.messages.publish_in[&quot;{#VHOST}/{#EXCHANGE}/{#TYPE}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <description>Count of messages published from channels into this overview</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>RabbitMQ: Exchange &quot;{#VHOST}/{#EXCHANGE}/{#TYPE}&quot;</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <params>$[?(@.name == &quot;{#EXCHANGE}&quot; &amp;&amp; @.vhost == &quot;{#VHOST}&quot; &amp;&amp; @.type ==&quot;{#TYPE}&quot;)].message_stats.publish_in.first()</params>
                                    <error_handler>CUSTOM_VALUE</error_handler>
                                    <error_handler_params>0</error_handler_params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/exchanges&quot;]</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>RabbitMQ: Exchange {#VHOST}/{#EXCHANGE}/{#TYPE}: Messages publish_out per second</name>
                            <type>DEPENDENT</type>
                            <key>rabbitmq.exchange.messages.publish_out.rate[&quot;{#VHOST}/{#EXCHANGE}/{#TYPE}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <description>Rate of messages published from this overview into queues per second,0,rabbitmq,total msgs pub out rate</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>RabbitMQ: Exchange &quot;{#VHOST}/{#EXCHANGE}/{#TYPE}&quot;</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <params>$[?(@.name == &quot;{#EXCHANGE}&quot; &amp;&amp; @.vhost == &quot;{#VHOST}&quot; &amp;&amp; @.type ==&quot;{#TYPE}&quot;)].message_stats.publish_out_details.rate.first()</params>
                                    <error_handler>CUSTOM_VALUE</error_handler>
                                    <error_handler_params>0</error_handler_params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/exchanges&quot;]</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>RabbitMQ: Exchange {#VHOST}/{#EXCHANGE}/{#TYPE}: Messages publish_out</name>
                            <type>DEPENDENT</type>
                            <key>rabbitmq.exchange.messages.publish_out[&quot;{#VHOST}/{#EXCHANGE}/{#TYPE}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <description>Count of messages published from this overview into queues</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>RabbitMQ: Exchange &quot;{#VHOST}/{#EXCHANGE}/{#TYPE}&quot;</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <params>$[?(@.name == &quot;{#EXCHANGE}&quot; &amp;&amp; @.vhost == &quot;{#VHOST}&quot; &amp;&amp; @.type ==&quot;{#TYPE}&quot;)].message_stats.publish_out.first()</params>
                                    <error_handler>CUSTOM_VALUE</error_handler>
                                    <error_handler_params>0</error_handler_params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/exchanges&quot;]</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>RabbitMQ: Exchange {#VHOST}/{#EXCHANGE}/{#TYPE}: Messages redelivered per second</name>
                            <type>DEPENDENT</type>
                            <key>rabbitmq.exchange.messages.redeliver.rate[&quot;{#VHOST}/{#EXCHANGE}/{#TYPE}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <description>Rate of subset of messages in deliver_get which had the redelivered flag set per second</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>RabbitMQ: Exchange &quot;{#VHOST}/{#EXCHANGE}/{#TYPE}&quot;</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <params>$[?(@.name == &quot;{#EXCHANGE}&quot; &amp;&amp; @.vhost == &quot;{#VHOST}&quot; &amp;&amp; @.type ==&quot;{#TYPE}&quot;)].message_stats.redeliver_details.rate.first()</params>
                                    <error_handler>CUSTOM_VALUE</error_handler>
                                    <error_handler_params>0</error_handler_params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/exchanges&quot;]</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>RabbitMQ: Exchange {#VHOST}/{#EXCHANGE}/{#TYPE}: Messages redelivered</name>
                            <type>DEPENDENT</type>
                            <key>rabbitmq.exchange.messages.redeliver[&quot;{#VHOST}/{#EXCHANGE}/{#TYPE}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <description>Count of subset of messages in deliver_get which had the redelivered flag set</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>RabbitMQ: Exchange &quot;{#VHOST}/{#EXCHANGE}/{#TYPE}&quot;</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <params>$[?(@.name == &quot;{#EXCHANGE}&quot; &amp;&amp; @.vhost == &quot;{#VHOST}&quot; &amp;&amp; @.type ==&quot;{#TYPE}&quot;)].message_stats.redeliver.first()</params>
                                    <error_handler>CUSTOM_VALUE</error_handler>
                                    <error_handler_params>0</error_handler_params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/exchanges&quot;]</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>RabbitMQ: Exchange {#VHOST}/{#EXCHANGE}/{#TYPE}: Messages returned unroutable per second</name>
                            <type>DEPENDENT</type>
                            <key>rabbitmq.exchange.messages.return_unroutable.rate[&quot;{#VHOST}/{#EXCHANGE}/{#TYPE}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <description>Rate of messages returned to publisher as unroutable per second</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>RabbitMQ: Exchange &quot;{#VHOST}/{#EXCHANGE}/{#TYPE}&quot;</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <params>$[?(@.name == &quot;{#EXCHANGE}&quot; &amp;&amp; @.vhost == &quot;{#VHOST}&quot; &amp;&amp; @.type ==&quot;{#TYPE}&quot;)].message_stats.return_unroutable_details.rate.first()</params>
                                    <error_handler>CUSTOM_VALUE</error_handler>
                                    <error_handler_params>0</error_handler_params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/exchanges&quot;]</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>RabbitMQ: Exchange {#VHOST}/{#EXCHANGE}/{#TYPE}: Messages returned unroutable</name>
                            <type>DEPENDENT</type>
                            <key>rabbitmq.exchange.messages.return_unroutable[&quot;{#VHOST}/{#EXCHANGE}/{#TYPE}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <description>Count of messages returned to publisher as unroutable</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>RabbitMQ: Exchange &quot;{#VHOST}/{#EXCHANGE}/{#TYPE}&quot;</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <params>$[?(@.name == &quot;{#EXCHANGE}&quot; &amp;&amp; @.vhost == &quot;{#VHOST}&quot; &amp;&amp; @.type ==&quot;{#TYPE}&quot;)].message_stats.return_unroutable.first()</params>
                                    <error_handler>CUSTOM_VALUE</error_handler>
                                    <error_handler_params>0</error_handler_params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/exchanges&quot;]</key>
                            </master_item>
                        </item_prototype>
                    </item_prototypes>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/exchanges&quot;]</key>
                    </master_item>
                    <lld_macro_paths>
                        <lld_macro_path>
                            <lld_macro>{#EXCHANGE}</lld_macro>
                            <path>$.name</path>
                        </lld_macro_path>
                        <lld_macro_path>
                            <lld_macro>{#TYPE}</lld_macro>
                            <path>$.type</path>
                        </lld_macro_path>
                        <lld_macro_path>
                            <lld_macro>{#VHOST}</lld_macro>
                            <path>$.vhost</path>
                        </lld_macro_path>
                    </lld_macro_paths>
                </discovery_rule>
                <discovery_rule>
                    <name>Health Check 3.8.10+ discovery</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.healthcheck.v3810.discovery</key>
                    <delay>0</delay>
                    <description>Version 3.8.10+ specific metrics</description>
                    <item_prototypes>
                        <item_prototype>
                            <name>RabbitMQ: Healthcheck: alarms in effect in the cluster{#SINGLETON}</name>
                            <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/health/checks/alarms{#SINGLETON}&quot;]</key>
                            <history>7d</history>
                            <authtype>NONE</authtype>
                            <username>{$RABBITMQ.API.USER}</username>
                            <password>{$RABBITMQ.API.PASSWORD}</password>
                            <description>Responds a 200 OK if there are no alarms in effect in the cluster, otherwise responds with a 503 Service Unavailable.</description>
                            <applications>
                                <application>
                                    <name>RabbitMQ</name>
                                </application>
                            </applications>
                            <valuemap>
                                <name>RabbitMQ healthcheck</name>
                            </valuemap>
                            <preprocessing>
                                <step>
                                    <type>REGEX</type>
                                    <params>HTTP\/1\.1\b\s(\d+)
\1</params>
                                </step>
                                <step>
                                    <type>JAVASCRIPT</type>
                                    <params>switch(value){ 
case '200': return 1 
case '503': return 0 
default: 2}</params>
                                </step>
                                <step>
                                    <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                                    <params>3h</params>
                                </step>
                            </preprocessing>
                            <url>{$RABBITMQ.API.SCHEME}://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/health/checks/alarms</url>
                            <status_codes>200,503,404</status_codes>
                            <retrieve_mode>HEADERS</retrieve_mode>
                            <trigger_prototypes>
                                <trigger_prototype>
                                    <expression>{last()}=0</expression>
                                    <name>RabbitMQ: There are active alarms in the cluster</name>
                                    <opdata>Current state: {ITEM.LASTVALUE1}</opdata>
                                    <priority>AVERAGE</priority>
                                    <description>http://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/index.html</description>
                                </trigger_prototype>
                            </trigger_prototypes>
                        </item_prototype>
                    </item_prototypes>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.CLUSTER_HOST}:{$RABBITMQ.API.PORT}/api/overview&quot;]</key>
                    </master_item>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.management_version</params>
                        </step>
                        <step>
                            <type>JAVASCRIPT</type>
                            <params>var rabbit_version = parseInt(value.split('.')[0]) * 10000 +
                     parseInt(value.split('.')[1]) * 100 +
                     parseInt(value.split('.')[2]) 
return JSON.stringify(rabbit_version &gt;= 30810 ? [{'{#SINGLETON}': ''}] : []);</params>
                        </step>
                    </preprocessing>
                </discovery_rule>
            </discovery_rules>
            <macros>
                <macro>
                    <macro>{$RABBITMQ.API.CLUSTER_HOST}</macro>
                    <value>127.0.0.1</value>
                    <description>The hostname or IP of RabbitMQ cluster API endpoint</description>
                </macro>
                <macro>
                    <macro>{$RABBITMQ.API.PASSWORD}</macro>
                    <value>zabbix</value>
                </macro>
                <macro>
                    <macro>{$RABBITMQ.API.PORT}</macro>
                    <value>15672</value>
                    <description>The port of RabbitMQ API endpoint</description>
                </macro>
                <macro>
                    <macro>{$RABBITMQ.API.USER}</macro>
                    <value>zbx_monitor</value>
                </macro>
                <macro>
                    <macro>{$RABBITMQ.LLD.FILTER.EXCHANGE.MATCHES}</macro>
                    <value>.*</value>
                    <description>Filter of discoverable exchanges</description>
                </macro>
                <macro>
                    <macro>{$RABBITMQ.LLD.FILTER.EXCHANGE.NOT_MATCHES}</macro>
                    <value>CHANGE_IF_NEEDED</value>
                    <description>Filter to exclude discovered exchanges</description>
                </macro>
            </macros>
            <screens>
                <screen>
                    <name>RabbitMQ overview</name>
                    <hsize>2</hsize>
                    <vsize>3</vsize>
                    <screen_items>
                        <screen_item>
                            <resourcetype>0</resourcetype>
                            <style>0</style>
                            <resource>
                                <name>RabbitMQ: Messages</name>
                                <host>RabbitMQ cluster by Zabbix agent</host>
                            </resource>
                            <width>500</width>
                            <height>100</height>
                            <x>0</x>
                            <y>0</y>
                            <colspan>1</colspan>
                            <rowspan>1</rowspan>
                            <elements>25</elements>
                            <valign>0</valign>
                            <halign>0</halign>
                            <dynamic>0</dynamic>
                            <sort_triggers>0</sort_triggers>
                            <url/>
                            <application/>
                            <max_columns>3</max_columns>
                        </screen_item>
                        <screen_item>
                            <resourcetype>0</resourcetype>
                            <style>0</style>
                            <resource>
                                <name>RabbitMQ: Connections</name>
                                <host>RabbitMQ cluster by Zabbix agent</host>
                            </resource>
                            <width>500</width>
                            <height>100</height>
                            <x>1</x>
                            <y>0</y>
                            <colspan>1</colspan>
                            <rowspan>1</rowspan>
                            <elements>25</elements>
                            <valign>0</valign>
                            <halign>0</halign>
                            <dynamic>0</dynamic>
                            <sort_triggers>0</sort_triggers>
                            <url/>
                            <application/>
                            <max_columns>3</max_columns>
                        </screen_item>
                        <screen_item>
                            <resourcetype>0</resourcetype>
                            <style>0</style>
                            <resource>
                                <name>RabbitMQ: Messages status</name>
                                <host>RabbitMQ cluster by Zabbix agent</host>
                            </resource>
                            <width>500</width>
                            <height>100</height>
                            <x>0</x>
                            <y>1</y>
                            <colspan>1</colspan>
                            <rowspan>1</rowspan>
                            <elements>25</elements>
                            <valign>0</valign>
                            <halign>0</halign>
                            <dynamic>0</dynamic>
                            <sort_triggers>0</sort_triggers>
                            <url/>
                            <application/>
                            <max_columns>3</max_columns>
                        </screen_item>
                        <screen_item>
                            <resourcetype>0</resourcetype>
                            <style>0</style>
                            <resource>
                                <name>RabbitMQ: Queues</name>
                                <host>RabbitMQ cluster by Zabbix agent</host>
                            </resource>
                            <width>500</width>
                            <height>100</height>
                            <x>1</x>
                            <y>1</y>
                            <colspan>1</colspan>
                            <rowspan>1</rowspan>
                            <elements>25</elements>
                            <valign>0</valign>
                            <halign>0</halign>
                            <dynamic>0</dynamic>
                            <sort_triggers>0</sort_triggers>
                            <url/>
                            <application/>
                            <max_columns>3</max_columns>
                        </screen_item>
                        <screen_item>
                            <resourcetype>0</resourcetype>
                            <style>0</style>
                            <resource>
                                <name>RabbitMQ: Messages per second</name>
                                <host>RabbitMQ cluster by Zabbix agent</host>
                            </resource>
                            <width>500</width>
                            <height>100</height>
                            <x>0</x>
                            <y>2</y>
                            <colspan>1</colspan>
                            <rowspan>1</rowspan>
                            <elements>25</elements>
                            <valign>0</valign>
                            <halign>0</halign>
                            <dynamic>0</dynamic>
                            <sort_triggers>0</sort_triggers>
                            <url/>
                            <application/>
                            <max_columns>3</max_columns>
                        </screen_item>
                    </screen_items>
                </screen>
            </screens>
        </template>
        <template>
            <template>RabbitMQ node by Zabbix agent</template>
            <name>RabbitMQ node by Zabbix agent</name>
            <description>Get node metrics from RabbitMQ management plugin provided an HTTP-based API using Zabbix agent.&#13;
&#13;
You can discuss this template or leave feedback on our forum https://www.zabbix.com/forum/zabbix-suggestions-and-feedback/387226-discussion-thread-for-official-zabbix-template-rabbitmq&#13;
&#13;
Template tooling version used: 0.38</description>
            <groups>
                <group>
                    <name>Templates/Applications</name>
                </group>
            </groups>
            <applications>
                <application>
                    <name>RabbitMQ</name>
                </application>
                <application>
                    <name>Zabbix raw items</name>
                </application>
            </applications>
            <items>
                <item>
                    <name>RabbitMQ: Service response time</name>
                    <key>net.tcp.service.perf[http,&quot;{$RABBITMQ.API.HOST}&quot;,&quot;{$RABBITMQ.API.PORT}&quot;]</key>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <units>s</units>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <triggers>
                        <trigger>
                            <expression>{min(5m)}&gt;{$RABBITMQ.RESPONSE_TIME.MAX.WARN}</expression>
                            <name>RabbitMQ: Service response time is too high (over {$RABBITMQ.RESPONSE_TIME.MAX.WARN}s for 5m)</name>
                            <priority>WARNING</priority>
                            <manual_close>YES</manual_close>
                            <dependencies>
                                <dependency>
                                    <name>RabbitMQ: Process is not running</name>
                                    <expression>{RabbitMQ node by Zabbix agent:proc.num[&quot;{$RABBITMQ.PROCESS_NAME}&quot;].last()}=0</expression>
                                </dependency>
                                <dependency>
                                    <name>RabbitMQ: Service is down</name>
                                    <expression>{RabbitMQ node by Zabbix agent:net.tcp.service[http,&quot;{$RABBITMQ.API.HOST}&quot;,&quot;{$RABBITMQ.API.PORT}&quot;].last()}=0</expression>
                                </dependency>
                            </dependencies>
                        </trigger>
                    </triggers>
                </item>
                <item>
                    <name>RabbitMQ: Service ping</name>
                    <key>net.tcp.service[http,&quot;{$RABBITMQ.API.HOST}&quot;,&quot;{$RABBITMQ.API.PORT}&quot;]</key>
                    <history>7d</history>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <valuemap>
                        <name>Service state</name>
                    </valuemap>
                    <preprocessing>
                        <step>
                            <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                            <params>10m</params>
                        </step>
                    </preprocessing>
                    <triggers>
                        <trigger>
                            <expression>{last()}=0</expression>
                            <name>RabbitMQ: Service is down</name>
                            <priority>AVERAGE</priority>
                            <manual_close>YES</manual_close>
                            <dependencies>
                                <dependency>
                                    <name>RabbitMQ: Process is not running</name>
                                    <expression>{RabbitMQ node by Zabbix agent:proc.num[&quot;{$RABBITMQ.PROCESS_NAME}&quot;].last()}=0</expression>
                                </dependency>
                            </dependencies>
                        </trigger>
                    </triggers>
                </item>
                <item>
                    <name>RabbitMQ: CPU utilization</name>
                    <key>proc.cpu.util[&quot;{$RABBITMQ.PROCESS_NAME}&quot;]</key>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <units>%</units>
                    <description>Process CPU utilization percentage.</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                </item>
                <item>
                    <name>RabbitMQ: Memory usage (rss)</name>
                    <key>proc.mem[&quot;{$RABBITMQ.PROCESS_NAME}&quot;,,,,rss]</key>
                    <history>7d</history>
                    <units>B</units>
                    <description>Resident set size memory used by process in bytes.</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                </item>
                <item>
                    <name>RabbitMQ: Memory usage (vsize)</name>
                    <key>proc.mem[&quot;{$RABBITMQ.PROCESS_NAME}&quot;,,,,vsize]</key>
                    <history>7d</history>
                    <units>B</units>
                    <description>Virtual memory size used by process in bytes.</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                </item>
                <item>
                    <name>RabbitMQ: Number of processes running</name>
                    <key>proc.num[&quot;{$RABBITMQ.PROCESS_NAME}&quot;]</key>
                    <history>7d</history>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <triggers>
                        <trigger>
                            <expression>{last()}=0</expression>
                            <name>RabbitMQ: Process is not running</name>
                            <priority>HIGH</priority>
                        </trigger>
                    </triggers>
                </item>
                <item>
                    <name>RabbitMQ: Free disk space</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.node.disk_free</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <units>B</units>
                    <description>Current free disk space</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.disk_free</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/nodes/{$RABBITMQ.CLUSTER.NAME}@{HOST.NAME}?memory=true&quot;]</key>
                    </master_item>
                </item>
                <item>
                    <name>RabbitMQ: Disk free alarm</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.node.disk_free_alarm</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <description>Does the node have disk alarm</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <valuemap>
                        <name>Alarm state</name>
                    </valuemap>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.disk_free_alarm</params>
                        </step>
                        <step>
                            <type>BOOL_TO_DECIMAL</type>
                            <params/>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/nodes/{$RABBITMQ.CLUSTER.NAME}@{HOST.NAME}?memory=true&quot;]</key>
                    </master_item>
                    <triggers>
                        <trigger>
                            <expression>{last()}=1</expression>
                            <name>RabbitMQ: Free disk space alarm (Free space threshold has been reached)</name>
                            <opdata>Current state: {ITEM.LASTVALUE1}</opdata>
                            <priority>AVERAGE</priority>
                            <description>https://www.rabbitmq.com/disk-alarms.html</description>
                        </trigger>
                    </triggers>
                </item>
                <item>
                    <name>RabbitMQ: Disk free limit</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.node.disk_free_limit</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <units>B</units>
                    <description>Disk free space limit in bytes</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.disk_free_limit</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/nodes/{$RABBITMQ.CLUSTER.NAME}@{HOST.NAME}?memory=true&quot;]</key>
                    </master_item>
                </item>
                <item>
                    <name>RabbitMQ: Used file descriptors</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.node.fd_used</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <description>Used file descriptors</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.fd_used</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/nodes/{$RABBITMQ.CLUSTER.NAME}@{HOST.NAME}?memory=true&quot;]</key>
                    </master_item>
                </item>
                <item>
                    <name>RabbitMQ: Memory alarm</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.node.mem_alarm</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <description>Does the host has memory alarm</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <valuemap>
                        <name>Alarm state</name>
                    </valuemap>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.mem_alarm</params>
                        </step>
                        <step>
                            <type>BOOL_TO_DECIMAL</type>
                            <params/>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/nodes/{$RABBITMQ.CLUSTER.NAME}@{HOST.NAME}?memory=true&quot;]</key>
                    </master_item>
                    <triggers>
                        <trigger>
                            <expression>{last()}=1</expression>
                            <name>RabbitMQ: Memory alarm (Memory usage threshold has been reached)</name>
                            <opdata>Current state: {ITEM.LASTVALUE1}</opdata>
                            <priority>AVERAGE</priority>
                            <description>https://www.rabbitmq.com/memory.html</description>
                        </trigger>
                    </triggers>
                </item>
                <item>
                    <name>RabbitMQ: Memory limit</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.node.mem_limit</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <units>B</units>
                    <description>Memory usage high watermark in bytes</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.mem_limit</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/nodes/{$RABBITMQ.CLUSTER.NAME}@{HOST.NAME}?memory=true&quot;]</key>
                    </master_item>
                </item>
                <item>
                    <name>RabbitMQ: Memory used</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.node.mem_used</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <units>B</units>
                    <description>Memory used in bytes</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.mem_used</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/nodes/{$RABBITMQ.CLUSTER.NAME}@{HOST.NAME}?memory=true&quot;]</key>
                    </master_item>
                </item>
                <item>
                    <name>RabbitMQ: Management plugin version</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.node.overview.management_version</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <trends>0</trends>
                    <value_type>CHAR</value_type>
                    <description>Version of the management plugin in use</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.management_version</params>
                        </step>
                        <step>
                            <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                            <params>1d</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/overview&quot;]</key>
                    </master_item>
                </item>
                <item>
                    <name>RabbitMQ: RabbitMQ version</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.node.overview.rabbitmq_version</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <trends>0</trends>
                    <value_type>CHAR</value_type>
                    <description>Version of RabbitMQ on the node which processed this request</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.rabbitmq_version</params>
                        </step>
                        <step>
                            <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                            <params>1d</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/overview&quot;]</key>
                    </master_item>
                    <triggers>
                        <trigger>
                            <expression>{diff()}=1 and {strlen()}&gt;0</expression>
                            <name>RabbitMQ: Version has changed (new version: {ITEM.VALUE})</name>
                            <priority>INFO</priority>
                            <description>RabbitMQ version has changed. Ack to close.</description>
                            <manual_close>YES</manual_close>
                        </trigger>
                    </triggers>
                </item>
                <item>
                    <name>RabbitMQ: Number of network partitions</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.node.partitions</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <description>Number of network partitions this node is seeing</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.partitions</params>
                        </step>
                        <step>
                            <type>JAVASCRIPT</type>
                            <params>return JSON.parse(value).length;</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/nodes/{$RABBITMQ.CLUSTER.NAME}@{HOST.NAME}?memory=true&quot;]</key>
                    </master_item>
                    <triggers>
                        <trigger>
                            <expression>{min(5m)}&gt;0</expression>
                            <name>RabbitMQ: Number of network partitions is too high (more than 0 for 5m)</name>
                            <opdata>Current value: {ITEM.LASTVALUE1}</opdata>
                            <priority>WARNING</priority>
                            <description>https://www.rabbitmq.com/partitions.html#detecting</description>
                        </trigger>
                    </triggers>
                </item>
                <item>
                    <name>RabbitMQ: Is running</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.node.running</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <description>Is the node running or not</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <valuemap>
                        <name>Service state</name>
                    </valuemap>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.running</params>
                        </step>
                        <step>
                            <type>BOOL_TO_DECIMAL</type>
                            <params/>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/nodes/{$RABBITMQ.CLUSTER.NAME}@{HOST.NAME}?memory=true&quot;]</key>
                    </master_item>
                    <triggers>
                        <trigger>
                            <expression>{max(5m)}=0</expression>
                            <name>RabbitMQ: Node is not running</name>
                            <opdata>Current state: {ITEM.LASTVALUE1}</opdata>
                            <priority>AVERAGE</priority>
                            <description>RabbitMQ node is not running</description>
                            <dependencies>
                                <dependency>
                                    <name>RabbitMQ: Process is not running</name>
                                    <expression>{RabbitMQ node by Zabbix agent:proc.num[&quot;{$RABBITMQ.PROCESS_NAME}&quot;].last()}=0</expression>
                                </dependency>
                                <dependency>
                                    <name>RabbitMQ: Service is down</name>
                                    <expression>{RabbitMQ node by Zabbix agent:net.tcp.service[http,&quot;{$RABBITMQ.API.HOST}&quot;,&quot;{$RABBITMQ.API.PORT}&quot;].last()}=0</expression>
                                </dependency>
                            </dependencies>
                        </trigger>
                    </triggers>
                </item>
                <item>
                    <name>RabbitMQ: Runtime run queue</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.node.run_queue</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <description>Average number of Erlang processes waiting to run</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.run_queue</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/nodes/{$RABBITMQ.CLUSTER.NAME}@{HOST.NAME}?memory=true&quot;]</key>
                    </master_item>
                </item>
                <item>
                    <name>RabbitMQ: Sockets available</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.node.sockets_total</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <description>File descriptors available for use as sockets</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.sockets_total</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/nodes/{$RABBITMQ.CLUSTER.NAME}@{HOST.NAME}?memory=true&quot;]</key>
                    </master_item>
                </item>
                <item>
                    <name>RabbitMQ: Sockets used</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.node.sockets_used</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <description>Number of file descriptors used as sockets</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.sockets_used</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/nodes/{$RABBITMQ.CLUSTER.NAME}@{HOST.NAME}?memory=true&quot;]</key>
                    </master_item>
                </item>
                <item>
                    <name>RabbitMQ: Uptime</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.node.uptime</key>
                    <delay>0</delay>
                    <history>7d</history>
                    <value_type>FLOAT</value_type>
                    <units>s</units>
                    <description>Uptime in milliseconds</description>
                    <applications>
                        <application>
                            <name>RabbitMQ</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.uptime</params>
                        </step>
                        <step>
                            <type>MULTIPLIER</type>
                            <params>0.001</params>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/nodes/{$RABBITMQ.CLUSTER.NAME}@{HOST.NAME}?memory=true&quot;]</key>
                    </master_item>
                    <triggers>
                        <trigger>
                            <expression>{last()}&lt;10m</expression>
                            <name>RabbitMQ: has been restarted (uptime &lt; 10m)</name>
                            <priority>INFO</priority>
                            <description>Uptime is less than 10 minutes</description>
                            <manual_close>YES</manual_close>
                        </trigger>
                    </triggers>
                </item>
                <item>
                    <name>RabbitMQ: Get nodes</name>
                    <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/nodes/{$RABBITMQ.CLUSTER.NAME}@{HOST.NAME}?memory=true&quot;]</key>
                    <history>1h</history>
                    <trends>0</trends>
                    <value_type>TEXT</value_type>
                    <description>The HTTP API endpoint that returns nodes metrics</description>
                    <applications>
                        <application>
                            <name>Zabbix raw items</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>REGEX</type>
                            <params>\n\s?\n(.*)
\1</params>
                        </step>
                    </preprocessing>
                    <triggers>
                        <trigger>
                            <expression>{nodata(30m)}=1</expression>
                            <name>RabbitMQ: Failed to fetch nodes data (or no data for 30m)</name>
                            <priority>WARNING</priority>
                            <description>Zabbix has not received data for items for the last 30 minutes.</description>
                            <manual_close>YES</manual_close>
                            <dependencies>
                                <dependency>
                                    <name>RabbitMQ: Process is not running</name>
                                    <expression>{RabbitMQ node by Zabbix agent:proc.num[&quot;{$RABBITMQ.PROCESS_NAME}&quot;].last()}=0</expression>
                                </dependency>
                                <dependency>
                                    <name>RabbitMQ: Service is down</name>
                                    <expression>{RabbitMQ node by Zabbix agent:net.tcp.service[http,&quot;{$RABBITMQ.API.HOST}&quot;,&quot;{$RABBITMQ.API.PORT}&quot;].last()}=0</expression>
                                </dependency>
                            </dependencies>
                        </trigger>
                    </triggers>
                </item>
                <item>
                    <name>RabbitMQ: Get node overview</name>
                    <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/overview&quot;]</key>
                    <history>1h</history>
                    <trends>0</trends>
                    <value_type>TEXT</value_type>
                    <description>The HTTP API endpoint that returns cluster-wide metrics</description>
                    <applications>
                        <application>
                            <name>Zabbix raw items</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>REGEX</type>
                            <params>\n\s?\n(.*)
\1</params>
                        </step>
                    </preprocessing>
                </item>
                <item>
                    <name>RabbitMQ: Get queues</name>
                    <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/queues&quot;]</key>
                    <history>1h</history>
                    <trends>0</trends>
                    <value_type>TEXT</value_type>
                    <description>The HTTP API endpoint that returns queues metrics</description>
                    <applications>
                        <application>
                            <name>Zabbix raw items</name>
                        </application>
                    </applications>
                    <preprocessing>
                        <step>
                            <type>REGEX</type>
                            <params>\n\s?\n(.*)
\1</params>
                        </step>
                    </preprocessing>
                </item>
            </items>
            <discovery_rules>
                <discovery_rule>
                    <name>Health Check 3.8.9- discovery</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.healthcheck.v389.discovery</key>
                    <delay>0</delay>
                    <description>Specific metrics up to and including version 3.8.4</description>
                    <item_prototypes>
                        <item_prototype>
                            <name>RabbitMQ: Healthcheck{#SINGLETON}</name>
                            <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/healthchecks/node{#SINGLETON}&quot;]</key>
                            <history>7h</history>
                            <description>Runs basic healthchecks in the current node. Checks that the rabbit application is running, channels and queues can be listed successfully, and that no alarms are in effect.</description>
                            <applications>
                                <application>
                                    <name>RabbitMQ</name>
                                </application>
                            </applications>
                            <valuemap>
                                <name>RabbitMQ healthcheck</name>
                            </valuemap>
                            <preprocessing>
                                <step>
                                    <type>REGEX</type>
                                    <params>\n\s?\n(.*)
\1</params>
                                </step>
                                <step>
                                    <type>JSONPATH</type>
                                    <params>$.status</params>
                                </step>
                                <step>
                                    <type>BOOL_TO_DECIMAL</type>
                                    <params/>
                                    <error_handler>CUSTOM_VALUE</error_handler>
                                    <error_handler_params>0</error_handler_params>
                                </step>
                            </preprocessing>
                            <trigger_prototypes>
                                <trigger_prototype>
                                    <expression>{last()}=0</expression>
                                    <name>RabbitMQ: Node healthcheck failed</name>
                                    <opdata>Current state: {ITEM.LASTVALUE1}</opdata>
                                    <priority>AVERAGE</priority>
                                    <description>https://www.rabbitmq.com/monitoring.html#health-checks</description>
                                </trigger_prototype>
                            </trigger_prototypes>
                        </item_prototype>
                    </item_prototypes>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/overview&quot;]</key>
                    </master_item>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.management_version</params>
                        </step>
                        <step>
                            <type>JAVASCRIPT</type>
                            <params>var rabbit_version = parseInt(value.split('.')[0]) * 10000 +
                     parseInt(value.split('.')[1]) * 100 +
                     parseInt(value.split('.')[2]) 
return JSON.stringify(rabbit_version &lt; 30810 ? [{'{#SINGLETON}': ''}] : []);</params>
                        </step>
                    </preprocessing>
                </discovery_rule>
                <discovery_rule>
                    <name>Health Check 3.8.10+ discovery</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.healthcheck.v3810.discovery</key>
                    <delay>0</delay>
                    <description>Version 3.8.10+ specific metrics</description>
                    <item_prototypes>
                        <item_prototype>
                            <name>RabbitMQ: Healthcheck: expiration date on the certificates{#SINGLETON}</name>
                            <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/health/checks/certificate-expiration/1/months{#SINGLETON}&quot;]</key>
                            <history>7d</history>
                            <authtype>NONE</authtype>
                            <username>{$RABBITMQ.API.USER}</username>
                            <password>{$RABBITMQ.API.PASSWORD}</password>
                            <description>Checks the expiration date on the certificates for every listener configured to use TLS. Responds a 200 OK if all certificates are valid (have not expired), otherwise responds with a 503 Service Unavailable.</description>
                            <applications>
                                <application>
                                    <name>RabbitMQ</name>
                                </application>
                            </applications>
                            <valuemap>
                                <name>RabbitMQ healthcheck</name>
                            </valuemap>
                            <preprocessing>
                                <step>
                                    <type>REGEX</type>
                                    <params>HTTP\/1\.1\b\s(\d+)
\1</params>
                                </step>
                                <step>
                                    <type>JAVASCRIPT</type>
                                    <params>switch(value){ 
case '200': return 1 
case '503': return 0 
default: 2}</params>
                                </step>
                                <step>
                                    <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                                    <params>3h</params>
                                </step>
                            </preprocessing>
                            <status_codes>200,503,404</status_codes>
                            <retrieve_mode>HEADERS</retrieve_mode>
                            <trigger_prototypes>
                                <trigger_prototype>
                                    <expression>{last()}=0</expression>
                                    <name>RabbitMQ: There are valid TLS certificates expiring in the next month</name>
                                    <opdata>Current state: {ITEM.LASTVALUE1}</opdata>
                                    <priority>AVERAGE</priority>
                                    <description>http://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/index.html</description>
                                </trigger_prototype>
                            </trigger_prototypes>
                        </item_prototype>
                        <item_prototype>
                            <name>RabbitMQ: Healthcheck: local alarms in effect on the this node{#SINGLETON}</name>
                            <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/health/checks/local-alarms{#SINGLETON}&quot;]</key>
                            <history>7d</history>
                            <authtype>NONE</authtype>
                            <username>{$RABBITMQ.API.USER}</username>
                            <password>{$RABBITMQ.API.PASSWORD}</password>
                            <description>Responds a 200 OK if there are no local alarms in effect on the target node, otherwise responds with a 503 Service Unavailable.</description>
                            <applications>
                                <application>
                                    <name>RabbitMQ</name>
                                </application>
                            </applications>
                            <valuemap>
                                <name>RabbitMQ healthcheck</name>
                            </valuemap>
                            <preprocessing>
                                <step>
                                    <type>REGEX</type>
                                    <params>HTTP\/1\.1\b\s(\d+)
\1</params>
                                </step>
                                <step>
                                    <type>JAVASCRIPT</type>
                                    <params>switch(value){ 
case '200': return 1 
case '503': return 0 
default: 2}</params>
                                </step>
                                <step>
                                    <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                                    <params>3h</params>
                                </step>
                            </preprocessing>
                            <status_codes>200,503,404</status_codes>
                            <retrieve_mode>HEADERS</retrieve_mode>
                            <trigger_prototypes>
                                <trigger_prototype>
                                    <expression>{last()}=0</expression>
                                    <name>RabbitMQ: There are active alarms in the node</name>
                                    <opdata>Current state: {ITEM.LASTVALUE1}</opdata>
                                    <priority>AVERAGE</priority>
                                    <description>http://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/index.html</description>
                                </trigger_prototype>
                            </trigger_prototypes>
                        </item_prototype>
                        <item_prototype>
                            <name>RabbitMQ: Healthcheck: classic mirrored queues without synchronised mirrors online{#SINGLETON}</name>
                            <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/health/checks/node-is-mirror-sync-critical{#SINGLETON}&quot;]</key>
                            <history>7d</history>
                            <authtype>NONE</authtype>
                            <username>{$RABBITMQ.API.USER}</username>
                            <password>{$RABBITMQ.API.PASSWORD}</password>
                            <description>Checks if there are classic mirrored queues without synchronised mirrors online (queues that would potentially lose data if the target node is shut down). Responds a 200 OK if there are no such classic mirrored queues, otherwise responds with a 503 Service Unavailable.</description>
                            <applications>
                                <application>
                                    <name>RabbitMQ</name>
                                </application>
                            </applications>
                            <valuemap>
                                <name>RabbitMQ healthcheck</name>
                            </valuemap>
                            <preprocessing>
                                <step>
                                    <type>REGEX</type>
                                    <params>HTTP\/1\.1\b\s(\d+)
\1</params>
                                </step>
                                <step>
                                    <type>JAVASCRIPT</type>
                                    <params>switch(value){ 
case '200': return 1 
case '503': return 0 
default: 2}</params>
                                </step>
                                <step>
                                    <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                                    <params>3h</params>
                                </step>
                            </preprocessing>
                            <status_codes>200,503,404</status_codes>
                            <retrieve_mode>HEADERS</retrieve_mode>
                            <trigger_prototypes>
                                <trigger_prototype>
                                    <expression>{last()}=0</expression>
                                    <name>RabbitMQ: There are queues that could potentially lose data if the this node goes offline.</name>
                                    <opdata>Current state: {ITEM.LASTVALUE1}</opdata>
                                    <priority>AVERAGE</priority>
                                    <description>http://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/index.html</description>
                                </trigger_prototype>
                            </trigger_prototypes>
                        </item_prototype>
                        <item_prototype>
                            <name>RabbitMQ: Healthcheck: queues with minimum online quorum{#SINGLETON}</name>
                            <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/health/checks/node-is-quorum-critical{#SINGLETON}&quot;]</key>
                            <history>7d</history>
                            <authtype>NONE</authtype>
                            <username>{$RABBITMQ.API.USER}</username>
                            <password>{$RABBITMQ.API.PASSWORD}</password>
                            <description>Checks if there are quorum queues with minimum online quorum (queues that would lose their quorum and availability if the target node is shut down). Responds a 200 OK if there are no such quorum queues, otherwise responds with a 503 Service Unavailable.</description>
                            <applications>
                                <application>
                                    <name>RabbitMQ</name>
                                </application>
                            </applications>
                            <valuemap>
                                <name>RabbitMQ healthcheck</name>
                            </valuemap>
                            <preprocessing>
                                <step>
                                    <type>REGEX</type>
                                    <params>HTTP\/1\.1\b\s(\d+)
\1</params>
                                </step>
                                <step>
                                    <type>JAVASCRIPT</type>
                                    <params>switch(value){ 
case '200': return 1 
case '503': return 0 
default: 2}</params>
                                </step>
                                <step>
                                    <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                                    <params>3h</params>
                                </step>
                            </preprocessing>
                            <status_codes>200,503,404</status_codes>
                            <retrieve_mode>HEADERS</retrieve_mode>
                            <trigger_prototypes>
                                <trigger_prototype>
                                    <expression>{last()}=0</expression>
                                    <name>RabbitMQ: There are queues that would lose their quorum and availability if the this node is shut down.</name>
                                    <opdata>Current state: {ITEM.LASTVALUE1}</opdata>
                                    <priority>AVERAGE</priority>
                                    <description>http://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/index.html</description>
                                </trigger_prototype>
                            </trigger_prototypes>
                        </item_prototype>
                        <item_prototype>
                            <name>RabbitMQ: Healthcheck: virtual hosts on the this node{#SINGLETON}</name>
                            <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/health/checks/virtual-hosts{#SINGLETON}&quot;]</key>
                            <history>7d</history>
                            <authtype>NONE</authtype>
                            <username>{$RABBITMQ.API.USER}</username>
                            <password>{$RABBITMQ.API.PASSWORD}</password>
                            <description>Responds a 200 OK if all virtual hosts and running on the target node, otherwise responds with a 503 Service Unavailable.</description>
                            <applications>
                                <application>
                                    <name>RabbitMQ</name>
                                </application>
                            </applications>
                            <valuemap>
                                <name>RabbitMQ healthcheck</name>
                            </valuemap>
                            <preprocessing>
                                <step>
                                    <type>REGEX</type>
                                    <params>HTTP\/1\.1\b\s(\d+)
\1</params>
                                </step>
                                <step>
                                    <type>JAVASCRIPT</type>
                                    <params>switch(value){ 
case '200': return 1 
case '503': return 0 
default: 2}</params>
                                </step>
                                <step>
                                    <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                                    <params>3h</params>
                                </step>
                            </preprocessing>
                            <status_codes>200,503,404</status_codes>
                            <retrieve_mode>HEADERS</retrieve_mode>
                            <trigger_prototypes>
                                <trigger_prototype>
                                    <expression>{last()}=0</expression>
                                    <name>RabbitMQ: There are not running virtual hosts</name>
                                    <opdata>Current state: {ITEM.LASTVALUE1}</opdata>
                                    <priority>AVERAGE</priority>
                                    <description>http://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/index.html</description>
                                </trigger_prototype>
                            </trigger_prototypes>
                        </item_prototype>
                    </item_prototypes>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/overview&quot;]</key>
                    </master_item>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <params>$.management_version</params>
                        </step>
                        <step>
                            <type>JAVASCRIPT</type>
                            <params>var rabbit_version = parseInt(value.split('.')[0]) * 10000 +
                     parseInt(value.split('.')[1]) * 100 +
                     parseInt(value.split('.')[2]) 
return JSON.stringify(rabbit_version &gt;= 30810 ? [{'{#SINGLETON}': ''}] : []);</params>
                        </step>
                    </preprocessing>
                </discovery_rule>
                <discovery_rule>
                    <name>Queues discovery</name>
                    <type>DEPENDENT</type>
                    <key>rabbitmq.queues.discovery</key>
                    <delay>0</delay>
                    <filter>
                        <evaltype>AND</evaltype>
                        <conditions>
                            <condition>
                                <macro>{#QUEUE}</macro>
                                <value>{$RABBITMQ.LLD.FILTER.QUEUE.MATCHES}</value>
                                <formulaid>B</formulaid>
                            </condition>
                            <condition>
                                <macro>{#QUEUE}</macro>
                                <value>{$RABBITMQ.LLD.FILTER.QUEUE.NOT_MATCHES}</value>
                                <operator>NOT_MATCHES_REGEX</operator>
                                <formulaid>C</formulaid>
                            </condition>
                            <condition>
                                <macro>{#NODE}</macro>
                                <value>{$RABBITMQ.CLUSTER.NAME}@{HOST.NAME}</value>
                                <formulaid>A</formulaid>
                            </condition>
                        </conditions>
                    </filter>
                    <description>Individual queue metrics</description>
                    <item_prototypes>
                        <item_prototype>
                            <name>RabbitMQ: Queue {#VHOST}/{#QUEUE}: Consumers</name>
                            <type>DEPENDENT</type>
                            <key>rabbitmq.queue.consumers[&quot;{#VHOST}/{#QUEUE}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <description>Number of consumers</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>RabbitMQ: Queue &quot;{#VHOST}/{#QUEUE}&quot;</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <params>$[?(@.name == &quot;{#QUEUE}&quot; &amp;&amp; @.vhost == &quot;{#VHOST}&quot;)].consumers.first()</params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/queues&quot;]</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>RabbitMQ: Queue {#VHOST}/{#QUEUE}: Memory</name>
                            <type>DEPENDENT</type>
                            <key>rabbitmq.queue.memory[&quot;{#VHOST}/{#QUEUE}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <units>B</units>
                            <description>Bytes of memory consumed by the Erlang process associated with the queue, including stack, heap and internal structures</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>RabbitMQ: Queue &quot;{#VHOST}/{#QUEUE}&quot;</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <params>$[?(@.name == &quot;{#QUEUE}&quot; &amp;&amp; @.vhost == &quot;{#VHOST}&quot;)].memory.first()</params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/queues&quot;]</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>RabbitMQ: Queue {#VHOST}/{#QUEUE}: Messages acknowledged per second</name>
                            <type>DEPENDENT</type>
                            <key>rabbitmq.queue.messages.ack.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <description>Number per second of messages delivered to clients and acknowledged</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>RabbitMQ: Queue &quot;{#VHOST}/{#QUEUE}&quot;</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <params>$[?(@.name == &quot;{#QUEUE}&quot; &amp;&amp; @.vhost == &quot;{#VHOST}&quot;)].message_stats.ack_details.rate.first()</params>
                                    <error_handler>CUSTOM_VALUE</error_handler>
                                    <error_handler_params>0</error_handler_params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/queues&quot;]</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>RabbitMQ: Queue {#VHOST}/{#QUEUE}: Messages acknowledged</name>
                            <type>DEPENDENT</type>
                            <key>rabbitmq.queue.messages.ack[&quot;{#VHOST}/{#QUEUE}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <description>Number of messages delivered to clients and acknowledged</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>RabbitMQ: Queue &quot;{#VHOST}/{#QUEUE}&quot;</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <params>$[?(@.name == &quot;{#QUEUE}&quot; &amp;&amp; @.vhost == &quot;{#VHOST}&quot;)].message_stats.ack.first()</params>
                                    <error_handler>CUSTOM_VALUE</error_handler>
                                    <error_handler_params>0</error_handler_params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/queues&quot;]</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>RabbitMQ: Queue {#VHOST}/{#QUEUE}: Messages delivered per second</name>
                            <type>DEPENDENT</type>
                            <key>rabbitmq.queue.messages.deliver.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <description>Count of messages delivered in acknowledgement mode to consumers</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>RabbitMQ: Queue &quot;{#VHOST}/{#QUEUE}&quot;</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <params>$[?(@.name == &quot;{#QUEUE}&quot; &amp;&amp; @.vhost == &quot;{#VHOST}&quot;)].message_stats.deliver_details.rate.first()</params>
                                    <error_handler>CUSTOM_VALUE</error_handler>
                                    <error_handler_params>0</error_handler_params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/queues&quot;]</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>RabbitMQ: Queue {#VHOST}/{#QUEUE}: Messages delivered</name>
                            <type>DEPENDENT</type>
                            <key>rabbitmq.queue.messages.deliver[&quot;{#VHOST}/{#QUEUE}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <description>Count of messages delivered in acknowledgement mode to consumers</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>RabbitMQ: Queue &quot;{#VHOST}/{#QUEUE}&quot;</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <params>$[?(@.name == &quot;{#QUEUE}&quot; &amp;&amp; @.vhost == &quot;{#VHOST}&quot;)].message_stats.deliver.first()</params>
                                    <error_handler>CUSTOM_VALUE</error_handler>
                                    <error_handler_params>0</error_handler_params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/queues&quot;]</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>RabbitMQ: Queue {#VHOST}/{#QUEUE}: Messages delivered per second</name>
                            <type>DEPENDENT</type>
                            <key>rabbitmq.queue.messages.deliver_get.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <description>Rate per second of the sum of messages delivered in acknowledgement mode to consumers, in no-acknowledgement mode to consumers, in acknowledgement mode in response to basic.get, and in no-acknowledgement mode in response to basic.get</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>RabbitMQ: Queue &quot;{#VHOST}/{#QUEUE}&quot;</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <params>$[?(@.name == &quot;{#QUEUE}&quot; &amp;&amp; @.vhost == &quot;{#VHOST}&quot;)].message_stats.deliver_get_details.rate.first()</params>
                                    <error_handler>CUSTOM_VALUE</error_handler>
                                    <error_handler_params>0</error_handler_params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/queues&quot;]</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>RabbitMQ: Queue {#VHOST}/{#QUEUE}: Messages delivered</name>
                            <type>DEPENDENT</type>
                            <key>rabbitmq.queue.messages.deliver_get[&quot;{#VHOST}/{#QUEUE}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <description>Sum of messages delivered in acknowledgement mode to consumers, in no-acknowledgement mode to consumers, in acknowledgement mode in response to basic.get, and in no-acknowledgement mode in response to basic.get</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>RabbitMQ: Queue &quot;{#VHOST}/{#QUEUE}&quot;</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <params>$[?(@.name == &quot;{#QUEUE}&quot; &amp;&amp; @.vhost == &quot;{#VHOST}&quot;)].message_stats.deliver_get.first()</params>
                                    <error_handler>CUSTOM_VALUE</error_handler>
                                    <error_handler_params>0</error_handler_params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/queues&quot;]</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>RabbitMQ: Queue {#VHOST}/{#QUEUE}: Messages published per second</name>
                            <type>DEPENDENT</type>
                            <key>rabbitmq.queue.messages.publish.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <description>Rate per second of messages published</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>RabbitMQ: Queue &quot;{#VHOST}/{#QUEUE}&quot;</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <params>$[?(@.name == &quot;{#QUEUE}&quot; &amp;&amp; @.vhost == &quot;{#VHOST}&quot;)].message_stats.publish_details.rate.first()</params>
                                    <error_handler>CUSTOM_VALUE</error_handler>
                                    <error_handler_params>0</error_handler_params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/queues&quot;]</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>RabbitMQ: Queue {#VHOST}/{#QUEUE}: Messages published</name>
                            <type>DEPENDENT</type>
                            <key>rabbitmq.queue.messages.publish[&quot;{#VHOST}/{#QUEUE}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <description>Count of messages published</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>RabbitMQ: Queue &quot;{#VHOST}/{#QUEUE}&quot;</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <params>$[?(@.name == &quot;{#QUEUE}&quot; &amp;&amp; @.vhost == &quot;{#VHOST}&quot;)].message_stats.publish.first()</params>
                                    <error_handler>CUSTOM_VALUE</error_handler>
                                    <error_handler_params>0</error_handler_params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/queues&quot;]</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>RabbitMQ: Queue {#VHOST}/{#QUEUE}: Messages per second</name>
                            <type>DEPENDENT</type>
                            <key>rabbitmq.queue.messages.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <description>Count per second of the total messages in the queue</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>RabbitMQ: Queue &quot;{#VHOST}/{#QUEUE}&quot;</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <params>$[?(@.name == &quot;{#QUEUE}&quot; &amp;&amp; @.vhost == &quot;{#VHOST}&quot;)].messages_details.rate.first()</params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/queues&quot;]</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>RabbitMQ: Queue {#VHOST}/{#QUEUE}: Messages redelivered per second</name>
                            <type>DEPENDENT</type>
                            <key>rabbitmq.queue.messages.redeliver.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <description>Rate per second of subset of messages in deliver_get which had the redelivered flag set</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>RabbitMQ: Queue &quot;{#VHOST}/{#QUEUE}&quot;</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <params>$[?(@.name == &quot;{#QUEUE}&quot; &amp;&amp; @.vhost == &quot;{#VHOST}&quot;)].message_stats.redeliver_details.rate.first()</params>
                                    <error_handler>CUSTOM_VALUE</error_handler>
                                    <error_handler_params>0</error_handler_params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/queues&quot;]</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>RabbitMQ: Queue {#VHOST}/{#QUEUE}: Messages redelivered</name>
                            <type>DEPENDENT</type>
                            <key>rabbitmq.queue.messages.redeliver[&quot;{#VHOST}/{#QUEUE}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <description>Count of subset of messages in deliver_get which had the redelivered flag set</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>RabbitMQ: Queue &quot;{#VHOST}/{#QUEUE}&quot;</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <params>$[?(@.name == &quot;{#QUEUE}&quot; &amp;&amp; @.vhost == &quot;{#VHOST}&quot;)].message_stats.redeliver.first()</params>
                                    <error_handler>CUSTOM_VALUE</error_handler>
                                    <error_handler_params>0</error_handler_params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/queues&quot;]</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>RabbitMQ: Queue {#VHOST}/{#QUEUE}: Messages</name>
                            <type>DEPENDENT</type>
                            <key>rabbitmq.queue.messages[&quot;{#VHOST}/{#QUEUE}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <description>Count of the total messages in the queue</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>RabbitMQ: Queue &quot;{#VHOST}/{#QUEUE}&quot;</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <params>$[?(@.name == &quot;{#QUEUE}&quot; &amp;&amp; @.vhost == &quot;{#VHOST}&quot;)].messages.first()</params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/queues&quot;]</key>
                            </master_item>
                            <trigger_prototypes>
                                <trigger_prototype>
                                    <expression>{min(5m)}&gt;{$RABBITMQ.MESSAGES.MAX.WARN:&quot;{#QUEUE}&quot;}</expression>
                                    <name>RabbitMQ: Too many messages in queue (over {$RABBITMQ.MESSAGES.MAX.WARN} for 5m)</name>
                                    <opdata>Current value: {ITEM.LASTVALUE1}</opdata>
                                    <priority>WARNING</priority>
                                </trigger_prototype>
                            </trigger_prototypes>
                        </item_prototype>
                        <item_prototype>
                            <name>RabbitMQ: Queue {#VHOST}/{#QUEUE}: Messages ready per second</name>
                            <type>DEPENDENT</type>
                            <key>rabbitmq.queue.messages_ready.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <description>Number per second of messages ready to be delivered to clients</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>RabbitMQ: Queue &quot;{#VHOST}/{#QUEUE}&quot;</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <params>$[?(@.name == &quot;{#QUEUE}&quot; &amp;&amp; @.vhost == &quot;{#VHOST}&quot;)].messages_ready_details.rate.first()</params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/queues&quot;]</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>RabbitMQ: Queue {#VHOST}/{#QUEUE}: Messages ready</name>
                            <type>DEPENDENT</type>
                            <key>rabbitmq.queue.messages_ready[&quot;{#VHOST}/{#QUEUE}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <description>Number of messages ready to be delivered to clients</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>RabbitMQ: Queue &quot;{#VHOST}/{#QUEUE}&quot;</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <params>$[?(@.name == &quot;{#QUEUE}&quot; &amp;&amp; @.vhost == &quot;{#VHOST}&quot;)].messages_ready.first()</params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/queues&quot;]</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>RabbitMQ: Queue {#VHOST}/{#QUEUE}: Messages unacknowledged per second</name>
                            <type>DEPENDENT</type>
                            <key>rabbitmq.queue.messages_unacknowledged.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <value_type>FLOAT</value_type>
                            <description>Number per second of messages delivered to clients but not yet acknowledged</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>RabbitMQ: Queue &quot;{#VHOST}/{#QUEUE}&quot;</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <params>$[?(@.name == &quot;{#QUEUE}&quot; &amp;&amp; @.vhost == &quot;{#VHOST}&quot;)].messages_unacknowledged_details.rate.first()</params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/queues&quot;]</key>
                            </master_item>
                        </item_prototype>
                        <item_prototype>
                            <name>RabbitMQ: Queue {#VHOST}/{#QUEUE}: Messages unacknowledged</name>
                            <type>DEPENDENT</type>
                            <key>rabbitmq.queue.messages_unacknowledged[&quot;{#VHOST}/{#QUEUE}&quot;]</key>
                            <delay>0</delay>
                            <history>7d</history>
                            <description>Number of messages delivered to clients but not yet acknowledged</description>
                            <application_prototypes>
                                <application_prototype>
                                    <name>RabbitMQ: Queue &quot;{#VHOST}/{#QUEUE}&quot;</name>
                                </application_prototype>
                            </application_prototypes>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <params>$[?(@.name == &quot;{#QUEUE}&quot; &amp;&amp; @.vhost == &quot;{#VHOST}&quot;)].messages_unacknowledged.first()</params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/queues&quot;]</key>
                            </master_item>
                        </item_prototype>
                    </item_prototypes>
                    <graph_prototypes>
                        <graph_prototype>
                            <name>RabbitMQ: Queue {#VHOST}/{#QUEUE}: Messages per second</name>
                            <graph_items>
                                <graph_item>
                                    <color>1A7C11</color>
                                    <item>
                                        <host>RabbitMQ node by Zabbix agent</host>
                                        <key>rabbitmq.queue.messages.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key>
                                    </item>
                                </graph_item>
                                <graph_item>
                                    <sortorder>1</sortorder>
                                    <color>2774A4</color>
                                    <item>
                                        <host>RabbitMQ node by Zabbix agent</host>
                                        <key>rabbitmq.queue.messages.ack.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key>
                                    </item>
                                </graph_item>
                                <graph_item>
                                    <sortorder>2</sortorder>
                                    <color>F63100</color>
                                    <item>
                                        <host>RabbitMQ node by Zabbix agent</host>
                                        <key>rabbitmq.queue.messages.deliver.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key>
                                    </item>
                                </graph_item>
                                <graph_item>
                                    <sortorder>3</sortorder>
                                    <color>A54F10</color>
                                    <item>
                                        <host>RabbitMQ node by Zabbix agent</host>
                                        <key>rabbitmq.queue.messages.deliver_get.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key>
                                    </item>
                                </graph_item>
                                <graph_item>
                                    <sortorder>4</sortorder>
                                    <color>FC6EA3</color>
                                    <item>
                                        <host>RabbitMQ node by Zabbix agent</host>
                                        <key>rabbitmq.queue.messages.publish.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key>
                                    </item>
                                </graph_item>
                                <graph_item>
                                    <sortorder>5</sortorder>
                                    <color>6C59DC</color>
                                    <item>
                                        <host>RabbitMQ node by Zabbix agent</host>
                                        <key>rabbitmq.queue.messages_ready.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key>
                                    </item>
                                </graph_item>
                                <graph_item>
                                    <sortorder>6</sortorder>
                                    <color>AC8C14</color>
                                    <item>
                                        <host>RabbitMQ node by Zabbix agent</host>
                                        <key>rabbitmq.queue.messages.redeliver.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key>
                                    </item>
                                </graph_item>
                                <graph_item>
                                    <sortorder>7</sortorder>
                                    <color>611F27</color>
                                    <item>
                                        <host>RabbitMQ node by Zabbix agent</host>
                                        <key>rabbitmq.queue.messages_unacknowledged.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key>
                                    </item>
                                </graph_item>
                            </graph_items>
                        </graph_prototype>
                        <graph_prototype>
                            <name>RabbitMQ: Queue {#VHOST}/{#QUEUE}: Messages status</name>
                            <graph_items>
                                <graph_item>
                                    <color>1A7C11</color>
                                    <item>
                                        <host>RabbitMQ node by Zabbix agent</host>
                                        <key>rabbitmq.queue.messages[&quot;{#VHOST}/{#QUEUE}&quot;]</key>
                                    </item>
                                </graph_item>
                                <graph_item>
                                    <sortorder>1</sortorder>
                                    <color>2774A4</color>
                                    <item>
                                        <host>RabbitMQ node by Zabbix agent</host>
                                        <key>rabbitmq.queue.messages.ack[&quot;{#VHOST}/{#QUEUE}&quot;]</key>
                                    </item>
                                </graph_item>
                                <graph_item>
                                    <sortorder>2</sortorder>
                                    <color>F63100</color>
                                    <item>
                                        <host>RabbitMQ node by Zabbix agent</host>
                                        <key>rabbitmq.queue.messages.deliver[&quot;{#VHOST}/{#QUEUE}&quot;]</key>
                                    </item>
                                </graph_item>
                                <graph_item>
                                    <sortorder>3</sortorder>
                                    <color>A54F10</color>
                                    <item>
                                        <host>RabbitMQ node by Zabbix agent</host>
                                        <key>rabbitmq.queue.messages.deliver_get[&quot;{#VHOST}/{#QUEUE}&quot;]</key>
                                    </item>
                                </graph_item>
                                <graph_item>
                                    <sortorder>4</sortorder>
                                    <color>FC6EA3</color>
                                    <item>
                                        <host>RabbitMQ node by Zabbix agent</host>
                                        <key>rabbitmq.queue.messages.publish[&quot;{#VHOST}/{#QUEUE}&quot;]</key>
                                    </item>
                                </graph_item>
                                <graph_item>
                                    <sortorder>5</sortorder>
                                    <color>6C59DC</color>
                                    <item>
                                        <host>RabbitMQ node by Zabbix agent</host>
                                        <key>rabbitmq.queue.messages_ready[&quot;{#VHOST}/{#QUEUE}&quot;]</key>
                                    </item>
                                </graph_item>
                                <graph_item>
                                    <sortorder>6</sortorder>
                                    <color>AC8C14</color>
                                    <item>
                                        <host>RabbitMQ node by Zabbix agent</host>
                                        <key>rabbitmq.queue.messages.redeliver[&quot;{#VHOST}/{#QUEUE}&quot;]</key>
                                    </item>
                                </graph_item>
                                <graph_item>
                                    <sortorder>7</sortorder>
                                    <color>611F27</color>
                                    <item>
                                        <host>RabbitMQ node by Zabbix agent</host>
                                        <key>rabbitmq.queue.messages_unacknowledged[&quot;{#VHOST}/{#QUEUE}&quot;]</key>
                                    </item>
                                </graph_item>
                            </graph_items>
                        </graph_prototype>
                    </graph_prototypes>
                    <master_item>
                        <key>web.page.get[&quot;http://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/queues&quot;]</key>
                    </master_item>
                    <lld_macro_paths>
                        <lld_macro_path>
                            <lld_macro>{#QUEUE}</lld_macro>
                            <path>$.name</path>
                        </lld_macro_path>
                        <lld_macro_path>
                            <lld_macro>{#VHOST}</lld_macro>
                            <path>$.vhost</path>
                        </lld_macro_path>
                        <lld_macro_path>
                            <lld_macro>{#NODE}</lld_macro>
                            <path>$.node</path>
                        </lld_macro_path>
                    </lld_macro_paths>
                </discovery_rule>
            </discovery_rules>
            <macros>
                <macro>
                    <macro>{$RABBITMQ.API.HOST}</macro>
                    <value>127.0.0.1</value>
                    <description>The hostname or IP of RabbitMQ API endpoint</description>
                </macro>
                <macro>
                    <macro>{$RABBITMQ.API.PASSWORD}</macro>
                    <value>zabbix</value>
                </macro>
                <macro>
                    <macro>{$RABBITMQ.API.PORT}</macro>
                    <value>15672</value>
                    <description>The port of RabbitMQ API endpoint</description>
                </macro>
                <macro>
                    <macro>{$RABBITMQ.API.USER}</macro>
                    <value>zbx_monitor</value>
                </macro>
                <macro>
                    <macro>{$RABBITMQ.CLUSTER.NAME}</macro>
                    <value>rabbit</value>
                    <description>The name of RabbitMQ cluster</description>
                </macro>
                <macro>
                    <macro>{$RABBITMQ.LLD.FILTER.QUEUE.MATCHES}</macro>
                    <value>.*</value>
                    <description>Filter of discoverable queues</description>
                </macro>
                <macro>
                    <macro>{$RABBITMQ.LLD.FILTER.QUEUE.NOT_MATCHES}</macro>
                    <value>CHANGE_IF_NEEDED</value>
                    <description>Filter to exclude discovered queues</description>
                </macro>
                <macro>
                    <macro>{$RABBITMQ.MESSAGES.MAX.WARN}</macro>
                    <value>1000</value>
                    <description>Maximum number of messages in the queue for trigger expression</description>
                </macro>
                <macro>
                    <macro>{$RABBITMQ.PROCESS_NAME}</macro>
                    <value>beam.smp</value>
                    <description>RabbitMQ server process name</description>
                </macro>
                <macro>
                    <macro>{$RABBITMQ.RESPONSE_TIME.MAX.WARN}</macro>
                    <value>10</value>
                    <description>Maximum RabbitMQ response time in seconds for trigger expression</description>
                </macro>
            </macros>
            <screens>
                <screen>
                    <name>RabbitMQ node status</name>
                    <hsize>2</hsize>
                    <vsize>3</vsize>
                    <screen_items>
                        <screen_item>
                            <resourcetype>0</resourcetype>
                            <style>0</style>
                            <resource>
                                <name>RabbitMQ: Node status</name>
                                <host>RabbitMQ node by Zabbix agent</host>
                            </resource>
                            <width>500</width>
                            <height>100</height>
                            <x>0</x>
                            <y>0</y>
                            <colspan>1</colspan>
                            <rowspan>1</rowspan>
                            <elements>25</elements>
                            <valign>0</valign>
                            <halign>0</halign>
                            <dynamic>0</dynamic>
                            <sort_triggers>0</sort_triggers>
                            <url/>
                            <application/>
                            <max_columns>3</max_columns>
                        </screen_item>
                        <screen_item>
                            <resourcetype>0</resourcetype>
                            <style>0</style>
                            <resource>
                                <name>RabbitMQ: Uptime</name>
                                <host>RabbitMQ node by Zabbix agent</host>
                            </resource>
                            <width>500</width>
                            <height>100</height>
                            <x>1</x>
                            <y>0</y>
                            <colspan>1</colspan>
                            <rowspan>1</rowspan>
                            <elements>25</elements>
                            <valign>0</valign>
                            <halign>0</halign>
                            <dynamic>0</dynamic>
                            <sort_triggers>0</sort_triggers>
                            <url/>
                            <application/>
                            <max_columns>3</max_columns>
                        </screen_item>
                        <screen_item>
                            <resourcetype>0</resourcetype>
                            <style>0</style>
                            <resource>
                                <name>RabbitMQ: Disk free</name>
                                <host>RabbitMQ node by Zabbix agent</host>
                            </resource>
                            <width>500</width>
                            <height>100</height>
                            <x>0</x>
                            <y>1</y>
                            <colspan>1</colspan>
                            <rowspan>1</rowspan>
                            <elements>25</elements>
                            <valign>0</valign>
                            <halign>0</halign>
                            <dynamic>0</dynamic>
                            <sort_triggers>0</sort_triggers>
                            <url/>
                            <application/>
                            <max_columns>3</max_columns>
                        </screen_item>
                        <screen_item>
                            <resourcetype>0</resourcetype>
                            <style>0</style>
                            <resource>
                                <name>RabbitMQ: Memory used</name>
                                <host>RabbitMQ node by Zabbix agent</host>
                            </resource>
                            <width>500</width>
                            <height>100</height>
                            <x>1</x>
                            <y>1</y>
                            <colspan>1</colspan>
                            <rowspan>1</rowspan>
                            <elements>25</elements>
                            <valign>0</valign>
                            <halign>0</halign>
                            <dynamic>0</dynamic>
                            <sort_triggers>0</sort_triggers>
                            <url/>
                            <application/>
                            <max_columns>3</max_columns>
                        </screen_item>
                        <screen_item>
                            <resourcetype>0</resourcetype>
                            <style>0</style>
                            <resource>
                                <name>RabbitMQ: File descriptors</name>
                                <host>RabbitMQ node by Zabbix agent</host>
                            </resource>
                            <width>500</width>
                            <height>100</height>
                            <x>0</x>
                            <y>2</y>
                            <colspan>1</colspan>
                            <rowspan>1</rowspan>
                            <elements>25</elements>
                            <valign>0</valign>
                            <halign>0</halign>
                            <dynamic>0</dynamic>
                            <sort_triggers>0</sort_triggers>
                            <url/>
                            <application/>
                            <max_columns>3</max_columns>
                        </screen_item>
                        <screen_item>
                            <resourcetype>0</resourcetype>
                            <style>0</style>
                            <resource>
                                <name>RabbitMQ: Sockets</name>
                                <host>RabbitMQ node by Zabbix agent</host>
                            </resource>
                            <width>500</width>
                            <height>100</height>
                            <x>1</x>
                            <y>2</y>
                            <colspan>1</colspan>
                            <rowspan>1</rowspan>
                            <elements>25</elements>
                            <valign>0</valign>
                            <halign>0</halign>
                            <dynamic>0</dynamic>
                            <sort_triggers>0</sort_triggers>
                            <url/>
                            <application/>
                            <max_columns>3</max_columns>
                        </screen_item>
                    </screen_items>
                </screen>
            </screens>
        </template>
    </templates>
    <graphs>
        <graph>
            <name>RabbitMQ: Connections</name>
            <graph_items>
                <graph_item>
                    <color>1A7C11</color>
                    <item>
                        <host>RabbitMQ cluster by Zabbix agent</host>
                        <key>rabbitmq.overview.object_totals.connections</key>
                    </item>
                </graph_item>
                <graph_item>
                    <sortorder>1</sortorder>
                    <color>2774A4</color>
                    <item>
                        <host>RabbitMQ cluster by Zabbix agent</host>
                        <key>rabbitmq.overview.object_totals.channels</key>
                    </item>
                </graph_item>
                <graph_item>
                    <sortorder>2</sortorder>
                    <color>F63100</color>
                    <item>
                        <host>RabbitMQ cluster by Zabbix agent</host>
                        <key>rabbitmq.overview.object_totals.consumers</key>
                    </item>
                </graph_item>
            </graph_items>
        </graph>
        <graph>
            <name>RabbitMQ: Disk free</name>
            <graph_items>
                <graph_item>
                    <drawtype>GRADIENT_LINE</drawtype>
                    <color>1A7C11</color>
                    <item>
                        <host>RabbitMQ node by Zabbix agent</host>
                        <key>rabbitmq.node.disk_free</key>
                    </item>
                </graph_item>
                <graph_item>
                    <sortorder>1</sortorder>
                    <drawtype>BOLD_LINE</drawtype>
                    <color>FF0000</color>
                    <item>
                        <host>RabbitMQ node by Zabbix agent</host>
                        <key>rabbitmq.node.disk_free_limit</key>
                    </item>
                </graph_item>
            </graph_items>
        </graph>
        <graph>
            <name>RabbitMQ: File descriptors</name>
            <graph_items>
                <graph_item>
                    <color>1A7C11</color>
                    <item>
                        <host>RabbitMQ node by Zabbix agent</host>
                        <key>rabbitmq.node.fd_used</key>
                    </item>
                </graph_item>
            </graph_items>
        </graph>
        <graph>
            <name>RabbitMQ: Memory usage</name>
            <graph_items>
                <graph_item>
                    <color>1A7C11</color>
                    <item>
                        <host>RabbitMQ node by Zabbix agent</host>
                        <key>proc.mem[&quot;{$RABBITMQ.PROCESS_NAME}&quot;,,,,vsize]</key>
                    </item>
                </graph_item>
                <graph_item>
                    <sortorder>1</sortorder>
                    <color>2774A4</color>
                    <item>
                        <host>RabbitMQ node by Zabbix agent</host>
                        <key>proc.mem[&quot;{$RABBITMQ.PROCESS_NAME}&quot;,,,,rss]</key>
                    </item>
                </graph_item>
            </graph_items>
        </graph>
        <graph>
            <name>RabbitMQ: Memory used</name>
            <graph_items>
                <graph_item>
                    <drawtype>GRADIENT_LINE</drawtype>
                    <color>1A7C11</color>
                    <item>
                        <host>RabbitMQ node by Zabbix agent</host>
                        <key>rabbitmq.node.mem_used</key>
                    </item>
                </graph_item>
                <graph_item>
                    <sortorder>1</sortorder>
                    <drawtype>BOLD_LINE</drawtype>
                    <color>FF0000</color>
                    <item>
                        <host>RabbitMQ node by Zabbix agent</host>
                        <key>rabbitmq.node.mem_limit</key>
                    </item>
                </graph_item>
            </graph_items>
        </graph>
        <graph>
            <name>RabbitMQ: Messages</name>
            <graph_items>
                <graph_item>
                    <color>1A7C11</color>
                    <item>
                        <host>RabbitMQ cluster by Zabbix agent</host>
                        <key>rabbitmq.overview.queue_totals.messages</key>
                    </item>
                </graph_item>
                <graph_item>
                    <sortorder>1</sortorder>
                    <color>2774A4</color>
                    <item>
                        <host>RabbitMQ cluster by Zabbix agent</host>
                        <key>rabbitmq.overview.queue_totals.messages.ready</key>
                    </item>
                </graph_item>
                <graph_item>
                    <sortorder>2</sortorder>
                    <color>F63100</color>
                    <item>
                        <host>RabbitMQ cluster by Zabbix agent</host>
                        <key>rabbitmq.overview.queue_totals.messages.unacknowledged</key>
                    </item>
                </graph_item>
            </graph_items>
        </graph>
        <graph>
            <name>RabbitMQ: Messages per second</name>
            <graph_items>
                <graph_item>
                    <color>1A7C11</color>
                    <item>
                        <host>RabbitMQ cluster by Zabbix agent</host>
                        <key>rabbitmq.overview.messages.publish.rate</key>
                    </item>
                </graph_item>
                <graph_item>
                    <sortorder>1</sortorder>
                    <color>2774A4</color>
                    <item>
                        <host>RabbitMQ cluster by Zabbix agent</host>
                        <key>rabbitmq.overview.messages.ack.rate</key>
                    </item>
                </graph_item>
                <graph_item>
                    <sortorder>2</sortorder>
                    <color>F63100</color>
                    <item>
                        <host>RabbitMQ cluster by Zabbix agent</host>
                        <key>rabbitmq.overview.messages.confirm.rate</key>
                    </item>
                </graph_item>
                <graph_item>
                    <sortorder>3</sortorder>
                    <color>A54F10</color>
                    <item>
                        <host>RabbitMQ cluster by Zabbix agent</host>
                        <key>rabbitmq.overview.messages.deliver_get.rate</key>
                    </item>
                </graph_item>
                <graph_item>
                    <sortorder>4</sortorder>
                    <color>FC6EA3</color>
                    <item>
                        <host>RabbitMQ cluster by Zabbix agent</host>
                        <key>rabbitmq.overview.messages.publish_in.rate</key>
                    </item>
                </graph_item>
                <graph_item>
                    <sortorder>5</sortorder>
                    <color>6C59DC</color>
                    <item>
                        <host>RabbitMQ cluster by Zabbix agent</host>
                        <key>rabbitmq.overview.messages.publish_out.rate</key>
                    </item>
                </graph_item>
                <graph_item>
                    <sortorder>6</sortorder>
                    <color>AC8C14</color>
                    <item>
                        <host>RabbitMQ cluster by Zabbix agent</host>
                        <key>rabbitmq.overview.messages.redeliver.rate</key>
                    </item>
                </graph_item>
                <graph_item>
                    <sortorder>7</sortorder>
                    <color>611F27</color>
                    <item>
                        <host>RabbitMQ cluster by Zabbix agent</host>
                        <key>rabbitmq.overview.messages.return_unroutable.rate</key>
                    </item>
                </graph_item>
            </graph_items>
        </graph>
        <graph>
            <name>RabbitMQ: Messages status</name>
            <graph_items>
                <graph_item>
                    <color>1A7C11</color>
                    <item>
                        <host>RabbitMQ cluster by Zabbix agent</host>
                        <key>rabbitmq.overview.messages.publish</key>
                    </item>
                </graph_item>
                <graph_item>
                    <sortorder>1</sortorder>
                    <color>2774A4</color>
                    <item>
                        <host>RabbitMQ cluster by Zabbix agent</host>
                        <key>rabbitmq.overview.messages.ack</key>
                    </item>
                </graph_item>
                <graph_item>
                    <sortorder>2</sortorder>
                    <color>F63100</color>
                    <item>
                        <host>RabbitMQ cluster by Zabbix agent</host>
                        <key>rabbitmq.overview.messages.confirm</key>
                    </item>
                </graph_item>
                <graph_item>
                    <sortorder>3</sortorder>
                    <color>A54F10</color>
                    <item>
                        <host>RabbitMQ cluster by Zabbix agent</host>
                        <key>rabbitmq.overview.messages.deliver_get</key>
                    </item>
                </graph_item>
                <graph_item>
                    <sortorder>4</sortorder>
                    <color>FC6EA3</color>
                    <item>
                        <host>RabbitMQ cluster by Zabbix agent</host>
                        <key>rabbitmq.overview.messages.publish_in</key>
                    </item>
                </graph_item>
                <graph_item>
                    <sortorder>5</sortorder>
                    <color>6C59DC</color>
                    <item>
                        <host>RabbitMQ cluster by Zabbix agent</host>
                        <key>rabbitmq.overview.messages.publish_out</key>
                    </item>
                </graph_item>
                <graph_item>
                    <sortorder>6</sortorder>
                    <color>AC8C14</color>
                    <item>
                        <host>RabbitMQ cluster by Zabbix agent</host>
                        <key>rabbitmq.overview.messages.redeliver</key>
                    </item>
                </graph_item>
                <graph_item>
                    <sortorder>7</sortorder>
                    <color>611F27</color>
                    <item>
                        <host>RabbitMQ cluster by Zabbix agent</host>
                        <key>rabbitmq.overview.messages.return_unroutable</key>
                    </item>
                </graph_item>
            </graph_items>
        </graph>
        <graph>
            <name>RabbitMQ: Node status</name>
            <graph_items>
                <graph_item>
                    <drawtype>BOLD_LINE</drawtype>
                    <color>1A7C11</color>
                    <item>
                        <host>RabbitMQ node by Zabbix agent</host>
                        <key>rabbitmq.node.running</key>
                    </item>
                </graph_item>
            </graph_items>
        </graph>
        <graph>
            <name>RabbitMQ: Queues</name>
            <graph_items>
                <graph_item>
                    <drawtype>GRADIENT_LINE</drawtype>
                    <color>1A7C11</color>
                    <item>
                        <host>RabbitMQ cluster by Zabbix agent</host>
                        <key>rabbitmq.overview.object_totals.queues</key>
                    </item>
                </graph_item>
            </graph_items>
        </graph>
        <graph>
            <name>RabbitMQ: Sockets</name>
            <graph_items>
                <graph_item>
                    <drawtype>GRADIENT_LINE</drawtype>
                    <color>1A7C11</color>
                    <item>
                        <host>RabbitMQ node by Zabbix agent</host>
                        <key>rabbitmq.node.sockets_used</key>
                    </item>
                </graph_item>
                <graph_item>
                    <sortorder>1</sortorder>
                    <color>2774A4</color>
                    <item>
                        <host>RabbitMQ node by Zabbix agent</host>
                        <key>rabbitmq.node.sockets_total</key>
                    </item>
                </graph_item>
            </graph_items>
        </graph>
        <graph>
            <name>RabbitMQ: Uptime</name>
            <graph_items>
                <graph_item>
                    <color>1A7C11</color>
                    <item>
                        <host>RabbitMQ node by Zabbix agent</host>
                        <key>rabbitmq.node.uptime</key>
                    </item>
                </graph_item>
            </graph_items>
        </graph>
    </graphs>
    <value_maps>
        <value_map>
            <name>Alarm state</name>
            <mappings>
                <mapping>
                    <value>0</value>
                    <newvalue>Ok</newvalue>
                </mapping>
                <mapping>
                    <value>1</value>
                    <newvalue>Alarm</newvalue>
                </mapping>
            </mappings>
        </value_map>
        <value_map>
            <name>RabbitMQ healthcheck</name>
            <mappings>
                <mapping>
                    <value>0</value>
                    <newvalue>Failed</newvalue>
                </mapping>
                <mapping>
                    <value>1</value>
                    <newvalue>Ok</newvalue>
                </mapping>
                <mapping>
                    <value>2</value>
                    <newvalue>Error</newvalue>
                </mapping>
            </mappings>
        </value_map>
        <value_map>
            <name>Service state</name>
            <mappings>
                <mapping>
                    <value>0</value>
                    <newvalue>Down</newvalue>
                </mapping>
                <mapping>
                    <value>1</value>
                    <newvalue>Up</newvalue>
                </mapping>
            </mappings>
        </value_map>
    </value_maps>
</zabbix_export>
