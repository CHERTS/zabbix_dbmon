---
test case: Directly associated events
include: &include service_get_rootcause_eventids.inc.yaml
in:
  services: *include
  service: S1
out:
  events: [1, 2, 3]
---
test case: Merging overlapping events (min)
include: &include service_get_rootcause_eventids.inc.yaml
in:
  services: *include
  service: S3
out:
  events: [1, 2, 3, 4]
---
test case: Merging overlapping events (max)
include: &include service_get_rootcause_eventids.inc.yaml
in:
  services: *include
  service: S3
out:
  events: [1, 2, 3, 4]
---
test case: Skipping OK service
include: &include service_get_rootcause_eventids.inc.yaml
in:
  services: *include
  service: S7
out:
  events: [5]
---
test case: Requiring severity level
include: &include service_get_rootcause_eventids.inc.yaml
in:
  services: *include
  service: S8
out:
  events: [8, 9, 10, 11]
---
test case: Requiring severity level, subcase(1)
include: &include service_get_rootcause_eventids.inc.yaml
in:
  services: *include
  service: S9
out:
  events: [6]
---
test case: Requiring severity level, subcase(2)
include: &include service_get_rootcause_eventids.inc.yaml
in:
  services: *include
  service: S10
out:
  events: [12]
---
test case: Requiring severity level, subcase(3)
include: &include service_get_rootcause_eventids.inc.yaml
in:
  services: *include
  service: S11
out:
  events: [7, 8]
---
test case: Requiring severity level, subcase(4)
include: &include service_get_rootcause_eventids.inc.yaml
in:
  services: *include
  service: S12
out:
  events: [9, 10, 11]
---
test case: Requiring severity level by weight
include: &include service_get_rootcause_eventids.inc.yaml
in:
  services: *include
  service: S19
out:
  events: [14, 15]
---
test case: Requiring severity level by weight, subcase(1)
include: &include service_get_rootcause_eventids.inc.yaml
in:
  services: *include
  service: S20
out:
  events: [13]
---
test case: Requiring severity level by weight, subcase(2)
include: &include service_get_rootcause_eventids.inc.yaml
in:
  services: *include
  service: S21
out:
  events: [14]
---
test case: Requiring severity level by weight, subcase(3)
include: &include service_get_rootcause_eventids.inc.yaml
in:
  services: *include
  service: S22
out:
  events: [15]
---
test case: Requiring severity level by count and weight
include: &include service_get_rootcause_eventids.inc.yaml
in:
  services: *include
  service: S23
out:
  events: [16, 17, 18]
---
test case: Requiring severity level by count and weight, subcase (1)
include: &include service_get_rootcause_eventids.inc.yaml
in:
  services: *include
  service: S24
out:
  events: [16]
---
test case: Requiring severity level by count and weight, subcase (2)
include: &include service_get_rootcause_eventids.inc.yaml
in:
  services: *include
  service: S25
out:
  events: [17]
---
test case: Requiring severity level by count and weight, subcase (3)
include: &include service_get_rootcause_eventids.inc.yaml
in:
  services: *include
  service: S26
out:
  events: [18]
---
test case: Requiring severity level by count and weight, subcase (4)
include: &include service_get_rootcause_eventids.inc.yaml
in:
  services: *include
  service: S27
out:
  events: [19]
---
test case: Accounting for propagation rules with default status calculation
in:
  services: 
  - name: S1
    status: 2
    children: [S2]
    algorithm: MIN
  - name: S2
    status: 3
    children: [S3, S4]
    algorithm: MIN
    propagation: {"action": DECREASE, "value": 1}
  - name: S3
    status: 2
    events: 
    - {"id":3, "severity":2}
  - name: S4
    status: 3
    events: 
    - {"id":4, "severity":3}
  service: S1
out:
  events: [3, 4]
---
test case: Accounting for propagation rules with additional rules (1)
in:
  services: 
  - name: S1
    status: 2
    children: [S2]
    algorithm: OK
    rules:
    - {"type": N_GE, "limit":2, "value":1, "status":3}
  - name: S2
    status: 3
    children: [S3, S4]
    algorithm: MIN
    propagation: {"action": DECREASE, "value": 1}
  - name: S3
    status: 2
    events: 
    - {"id":3, "severity":2}
  - name: S4
    status: 3
    events: 
    - {"id":4, "severity":3}
  service: S1
out:
  events: [4]
---
test case: Accounting for propagation rules with additional rules (2)
in:
  services: 
  - name: S1
    status: 2
    children: [S2]
    algorithm: OK
    rules:
    - {"type": N_GE, "limit":3, "value":1, "status":3}
  - name: S2
    status: 2
    children: [S3, S4]
    algorithm: MIN
    propagation: {"action": SET, "value": 3}
  - name: S3
    status: 1
    events: 
    - {"id":3, "severity":1}
  - name: S4
    status: 2
    events: 
    - {"id":4, "severity":2}
  service: S1
out:
  events: [3, 4]
---
test case: Overriding min-status of default rules with additional rules
in:
  services: 
  - name: S1
    status: 3
    children: [S2]
    algorithm: OK
    rules:
    - {"type": N_GE, "limit":2, "value":1, "status":3}
  - name: S2
    status: 3
    children: [S3, S4, S5]
    algorithm: MIN
    rules:
    - {"type": N_GE, "limit":1, "value":1, "status":2}
  - name: S3
    status: 1
    events: 
    - {"id":3, "severity":1}
  - name: S4
    status: 2
    children: [S6, S7]
    algorithm: MIN
  - name: S5
    status: 3
    algorithm: MIN
    events: 
    - {"id":5, "severity":3}
  - name: S6
    status: 1
    events: 
    - {"id":6, "severity":1}
  - name: S7
    status: 2
    events: 
    - {"id":7, "severity":2}
  service: S1
out:
  events: [3, 5, 6, 7]
---
test case: Applying min-status to events (min)
in:
  services: 
  - name: S1
    status: 2
    children: [S2]
    algorithm: OK
    rules:
    - {"type": N_GE, "limit":3, "value":1, "status":3}
  - name: S2
    status: 3
    children: [S3, S4]
    algorithm: MIN
    status: 3
  - name: S3
    status: 3
    events: 
    - {"id":1, "severity":1}
    - {"id":2, "severity":2}
    - {"id":3, "severity":3}
  - name: S4
    status: 3
    events: 
    - {"id":4, "severity":1}
    - {"id":5, "severity":2}
    - {"id":6, "severity":3}
  service: S1
out:
  events: [3, 6]
---
test case: Applying min-status to events (max)
in:
  services: 
  - name: S1
    status: 2
    children: [S2]
    algorithm: OK
    rules:
    - {"type": N_GE, "limit":3, "value":1, "status":3}
  - name: S2
    status: 3
    children: [S3, S4]
    algorithm: MAX
    status: 3
  - name: S3
    status: 3
    events: 
    - {"id":1, "severity":1}
    - {"id":2, "severity":2}
    - {"id":3, "severity":3}
  - name: S4
    status: 3
    events: 
    - {"id":4, "severity":1}
    - {"id":5, "severity":2}
    - {"id":6, "severity":3}
  service: S1
out:
  events: [1, 2, 3, 4, 5, 6]
...
