queries = {

# MySQL version
# zabbix_get.exe -s 127.0.0.1 -k mysql.query.nojson[127.0.0.1,3306,mysqlver]
# Result:
# 5.7.29-log
mysqlver = "SELECT /*DBS_001*/ VERSION() AS VERSION;";

# MySQL info:
# zabbix_get.exe -s 127.0.0.1 -k mysql.query.onerow[127.0.0.1,3306,mysqlinfo]
# Result:
# {"SERVER_UUID":"07e11217-5fb1-11ea-818e-00155d4ed51b","VERSION":"5.7.29-log"}
mysqlinfo = "SELECT /*DBS_002*/ UUID() AS SERVER_UUID, VERSION() AS VERSION;";

# MySQL database discovery:
# zabbix_get.exe -s 127.0.0.1 -k mysql.query.discovery[127.0.0.1,3306,mysqldbdiscovery]
# Result:
# [
#   {
#     "{#DBNAME}": "blog"
#   },
#   {
#     "{#DBNAME}": "mysql"
#   },
#   {
#     "{#DBNAME}": "sys"
#   }
# ]
mysqldbdiscovery = "SELECT /*DBS_003*/ s.SCHEMA_NAME AS DBNAME "
	"FROM information_schema.schemata s WHERE s.SCHEMA_NAME NOT REGEXP '(information_schema|performance_schema)' "
	"GROUP BY s.SCHEMA_NAME;";

# MySQL all database info
# zabbix_get.exe -s 127.0.0.1 -k mysql.query.multirow[127.0.0.1,3306,mysqldbinfo]
# Result:
# [
#   {
#     "DBNAME": "blog",
#     "DB_CHARACTER_SET": "utf8mb4",
#     "DB_COLLATION_NAME": "utf8mb4_general_ci",
#     "DB_DATA_FREE": "9437184",
#     "DB_DATA_LENGTH": "31506432",
#     "DB_INDEX_LENGTH": "1277952",
#     "DB_SIZE": "32784384"
#   },
#   {
#     "DBNAME": "mysql",
#     "DB_CHARACTER_SET": "utf8",
#     "DB_COLLATION_NAME": "utf8_general_ci",
#     "DB_DATA_FREE": "4194304",
#     "DB_DATA_LENGTH": "2337127",
#     "DB_INDEX_LENGTH": "240640",
#     "DB_SIZE": "2577767"
#   },
#   {
#     "DBNAME": "sys",
#     "DB_CHARACTER_SET": "utf8",
#     "DB_COLLATION_NAME": "utf8_general_ci",
#     "DB_DATA_FREE": "0",
#     "DB_DATA_LENGTH": "16384",
#     "DB_INDEX_LENGTH": "0",
#     "DB_SIZE": "16384"
#   }
# ]
mysqldbinfo = "SELECT /*DBS_004*/ s.SCHEMA_NAME AS DBNAME, "
	"s.DEFAULT_CHARACTER_SET_NAME AS DB_CHARACTER_SET, "
	"s.DEFAULT_COLLATION_NAME AS DB_COLLATION_NAME, "
	"IFNULL(SUM(t.DATA_FREE),0) AS DB_DATA_FREE, "
	"IFNULL(SUM(t.DATA_LENGTH),0) AS DB_DATA_LENGTH, "
	"IFNULL(SUM(t.INDEX_LENGTH),0) AS DB_INDEX_LENGTH, "
	"IFNULL(SUM(t.DATA_LENGTH + t.INDEX_LENGTH),0) AS DB_SIZE "
	"FROM information_schema.schemata s INNER JOIN information_schema.tables t ON s.SCHEMA_NAME = t.TABLE_SCHEMA "
	"WHERE s.SCHEMA_NAME NOT REGEXP '(information_schema|performance_schema)' GROUP BY s.SCHEMA_NAME;";

# MySQL InnoDB engine status
# zabbix_get.exe -s 127.0.0.1 -k mysql.query.nojson[127.0.0.1,3306,mysqlinnodbenginestatus]
# Result:
#=====================================
#XXXX-XX-X XX:XX:XX 0xXXXX INNODB MONITOR OUTPUT
#=====================================
#Per second averages calculated from the last 4 seconds
#-----------------
#BACKGROUND THREAD
#-----------------
#srv_master_thread loops: XXXX srv_active, XXXX srv_shutdown, XXXX srv_idle
#srv_master_thread log flush and writes: XXXXX
#----------
#SEMAPHORES
#----------
# etc...
mysqlinnodbenginestatus = "SHOW ENGINE INNODB STATUS;";

# MySQL show binary logs
# zabbix_get.exe -s 127.0.0.1 -k mysql.query.multirow[127.0.0.1,3306,mysql_show_bin_logs]
# Result:
mysql_show_bin_logs = "SHOW BINARY LOGS;";

# MySQL partitions info
# zabbix_get.exe -s 127.0.0.1 -k mysql.query.multirow[127.0.0.1,3306,mysql_part_info]
# Result:
mysql_part_info = "SELECT /*DBS_005*/ TABLE_SCHEMA, TABLE_NAME,PARTITION_NAME, IFNULL(TABLE_ROWS,0), "
	"IFNULL(DATA_LENGTH,0), IFNULL(INDEX_LENGTH,0), IFNULL((DATA_LENGTH + INDEX_LENGTH),0) "
	"FROM information_schema.partitions WHERE PARTITION_NAME IS NOT NULL;";

# MySQL replication applier status by worker
# zabbix_get.exe -s 127.0.0.1 -k mysql.query.multirow[127.0.0.1,3306,mysql_replication_applier_status_by_worker]
# Result:
mysql_replication_applier_status_by_worker = "SELECT /*DBS_006*/ * FROM performance_schema.replication_applier_status_by_worker;";

# MySQL replication group member stats
# zabbix_get.exe -s 127.0.0.1 -k mysql.query.multirow[127.0.0.1,3306,mysql_replication_group_member_stats]
# Result:
mysql_replication_group_member_stats = "SELECT /*DBS_007*/ MEMBER_ID,COUNT_TRANSACTIONS_IN_QUEUE,COUNT_TRANSACTIONS_CHECKED, "
	"COUNT_CONFLICTS_DETECTED,COUNT_TRANSACTIONS_ROWS_VALIDATING "
	"FROM performance_schema.replication_group_member_stats;";

# MySQL table IO waits stat
# zabbix_get.exe -s 127.0.0.1 -k mysql.query.multirow[127.0.0.1,3306,mysql_table_io_waits]
# Result:
mysql_table_io_waits = "SELECT /*DBS_008*/ OBJECT_SCHEMA, OBJECT_NAME, COUNT_FETCH, COUNT_INSERT, COUNT_UPDATE, COUNT_DELETE, "
	"SUM_TIMER_FETCH, SUM_TIMER_INSERT, SUM_TIMER_UPDATE, SUM_TIMER_DELETE "
	"FROM performance_schema.table_io_waits_summary_by_table "
	"WHERE OBJECT_SCHEMA NOT IN ('mysql', 'performance_schema');";

# MySQL table lock waits stat
# zabbix_get.exe -s 127.0.0.1 -k mysql.query.multirow[127.0.0.1,3306,mysql_table_lock_waits_stat]
# Result:
mysql_table_lock_waits_stat = "SELECT /*DBS_009*/ OBJECT_SCHEMA, OBJECT_NAME, COUNT_READ_NORMAL, COUNT_READ_WITH_SHARED_LOCKS, COUNT_READ_HIGH_PRIORITY, COUNT_READ_NO_INSERT, "
	"COUNT_READ_EXTERNAL, COUNT_WRITE_ALLOW_WRITE, COUNT_WRITE_CONCURRENT_INSERT, COUNT_WRITE_LOW_PRIORITY, COUNT_WRITE_NORMAL, COUNT_WRITE_EXTERNAL, "
	"SUM_TIMER_READ_NORMAL, SUM_TIMER_READ_WITH_SHARED_LOCKS, SUM_TIMER_READ_HIGH_PRIORITY, SUM_TIMER_READ_NO_INSERT, SUM_TIMER_READ_EXTERNAL, "
	"SUM_TIMER_WRITE_ALLOW_WRITE, SUM_TIMER_WRITE_CONCURRENT_INSERT, SUM_TIMER_WRITE_LOW_PRIORITY, SUM_TIMER_WRITE_NORMAL, SUM_TIMER_WRITE_EXTERNAL "
	"FROM performance_schema.table_lock_waits_summary_by_table WHERE OBJECT_SCHEMA NOT IN ('mysql', 'performance_schema', 'information_schema');";

# PgSQL version
# zabbix_get.exe -s 127.0.0.1 -k pgsql.query.nojson["host=127.0.0.1 port=5432 dbname=postgres user=postgres password=XXXXX connect_timeout=3",pgsqlver]
# Result:
# PostgreSQL 12.2, compiled by Visual C++ build 1800, 64-bit
pgsqlver = "SELECT VERSION() AS VERSION;";

# PgSQL version (int)
# zabbix_get.exe -s 127.0.0.1 -k pgsql.query.nojson["host=127.0.0.1 port=5432 dbname=postgres user=postgres password=XXXXX connect_timeout=3",pgsqlverint]
# Result:
# 120002
pgsqlverint = "SELECT current_setting('server_version_num')::int;";

# PgSQL database discovery:
# zabbix_get.exe -s 127.0.0.1 -k pgsql.query.discovery["host=127.0.0.1 port=5432 dbname=postgres user=postgres password=XXXXX connect_timeout=3",pgsqldbdiscovery]
# Result:
# [
#   {
#      "{#OID}": "13366",
#      "{#DBNAME}": "postgres",
#      "{#TABLESPACE}": "pg_default"
#   },
#   {
#      "{#OID}": "16393",
#      "{#DBNAME}": "test",
#      "{#TABLESPACE}": "pg_default"
#   }
# ]
pgsqldbdiscovery = "SELECT d.oid AS OID, d.datname AS DBNAME, t.spcname AS TABLESPACE FROM pg_catalog.pg_database d "
	"JOIN pg_catalog.pg_tablespace t on d.dattablespace = t.oid WHERE d.datallowconn = 't' AND d.datistemplate = 'n' ORDER BY 1;"

# PgPool-II status:
# zabbix_get -s 127.0.0.1 -k pgsql.query.nojson["host = 127.0.0.1 port = 9999 dbname = postgres user=postgres password=XXXXX connect_timeout = 3",pgpool_ping]
# zabbix_get -s 127.0.0.1 -k pgsql.query.multirow["host = 127.0.0.1 port = 9999 dbname = postgres user=postgres password=XXXXX connect_timeout = 3",pgpool_show_nodes]
# zabbix_get -s 127.0.0.1 -k pgsql.query.multirow["host = 127.0.0.1 port = 9999 dbname = postgres user=postgres password=XXXXX connect_timeout = 3",pgpool_show_cache]
# zabbix_get -s 127.0.0.1 -k pgsql.query.multirow["host = 127.0.0.1 port = 9999 dbname = postgres user=postgres password=XXXXX connect_timeout = 3",pgpool_show_status]
# zabbix_get -s 127.0.0.1 -k pgsql.query.multirow["host = 127.0.0.1 port = 9999 dbname = postgres user=postgres password=XXXXX connect_timeout = 3",pgpool_show_pools]
pgpool_ping = "select 1 as ping"
pgpool_show_nodes = "show pool_nodes"
pgpool_show_cache = "show pool_cache"
pgpool_show_status = "show pool_status"
pgpool_show_pools = "show pool_pools"

};
