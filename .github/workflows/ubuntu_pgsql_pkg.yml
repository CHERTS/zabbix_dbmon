name: CreateUbuntuPgSQLDEB

on:
#  push:
#    branches:
#      - master
#    paths-ignore:
#      - ".github/**"
#      - "bin/**"
#      - "build/**"
#      - "conf/**"
#      - "create/**"
#      - "database/**"
#      - "man/**"
#      - "misc/**"
#      - "packages/**"
#      - "sass/**"
#      - "templates/**"
#      - "tests/**"
#      - "ui/**"
#      - "vs2017/**"
  workflow_dispatch:
    inputs:
      reason:
        description: 'Launch reason'
        required: true
        default: 'Create Ubuntu packages'

jobs:
  github-job:
    name: Ubuntu
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
         os: [ubuntu-16.04, ubuntu-18.04, ubuntu-20.04]
    steps:
    - name: Installing Golang
      uses: actions/setup-go@v2
      with:
        go-version: 1.15.x
      id: go
    - name: Install Golang dependencies
      env:
        GO111MODULE: on
      run: |
        go get -u golang.org/x/lint/golint
        go get -u github.com/kisielk/errcheck
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.27.0
    - name: Install base dependencies
      run: sudo apt-get install -y autoconf automake gcc make wget unzip gettext sass libxml2-dev libssl-dev libcurl4-openssl-dev libpcre2-dev libconfig-dev
    - name: Install build deb dependencies
      run: sudo apt-get install -y dpkg-dev devscripts git dh-make build-essential autoconf autotools-dev quilt pkg-config tar xz-utils curl
    - name: Install database dependencies
      run: sudo apt-get install -y libmysqlclient-dev libpq-dev
    - name: Code checkout
      uses: actions/checkout@v2
    - name: Run bootstrap
      run: ./bootstrap.sh
    - name: Run configure
      run: ./configure
    - name: Build dbschema
      run: make dbschema
    - name: Build gettext
      run: make gettext
    - name: Run create bin, img and styles directory
      run: mkdir -p ./bin/win32/dev ./bin/win64/dev ./ui/assets/img ./ui/assets/styles
    - name: Build css
      run: make css
    - name: Build dist
      run: make dist
    - name: Show lib version
      run: |
        dpkg -l | grep libssl1
        dpkg -l | grep libpcre
        dpkg -l | grep libssh
        dpkg -l | grep libcurl3
    - name: Get current Zabbix version
      run: echo "ZABBIX_VERSION=$(cat configure | grep PACKAGE_VERSION= | cut -d = -f2 | tr -d \')" >> $GITHUB_ENV
    - name: Extract distr
      run: tar -zxf zabbix-${{ env.ZABBIX_VERSION }}.tar.gz
    - name: Change directory
      run: cd zabbix-${{ env.ZABBIX_VERSION }}/
    - name: Copy original sources
      run: cp "packages/$(lsb_release -i -s | tr '[:upper:]' '[:lower:]')_only_pgsql/$(lsb_release -c -s).tar.gz" ubuntu.tar.gz
    - name: Extract original sources
      run: tar -zxf ubuntu.tar.gz
    - name: Prepare build DEB
      run: dch -v "1:${{ env.ZABBIX_VERSION }}-1+$(lsb_release -c -s)" --distribution "$(lsb_release -c -s)" "Release ${{ env.ZABBIX_VERSION }}"
    - name: Build DEB
      run: dpkg-buildpackage -b
    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.DBMON_REPO_SERVER_PRIVATE_KEY }}
        known_hosts: ${{ secrets.DBMON_REPO_SERVER_KNOWN_HOSTS }}
    - name: Upload deb from dev server
      run: scp ../*.deb ${{ secrets.DBMON_REPO_SERVER_USER }}@${{ secrets.DBMON_REPO_SERVER }}:pkgs/$(lsb_release -i -s | tr '[:upper:]' '[:lower:]')_only_pgsql/pool/main/$(lsb_release -c -s)/
