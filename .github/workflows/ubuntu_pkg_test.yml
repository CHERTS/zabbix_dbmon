name: CreateUbuntuDEBTest

on:
  workflow_dispatch:
    inputs:
      reason:
        description: 'Launch reason'
        required: true
        default: 'Create Ubuntu packages'

jobs:
  github-job:
    name: Ubuntu (Bionic)
    runs-on: [self-hosted, linux, ubuntu-bionic]
    steps:
    - name: Code checkout
      uses: actions/checkout@v2
    - name: Run bootstrap
      run: ./bootstrap.sh
    - name: Run configure
      run: ./configure
    - name: Build dbschema
      run: make dbschema
    - name: Build gettext
      run: make gettext
    - name: Run create bin, img and styles directory
      run: mkdir -p ./bin/win32/dev ./bin/win64/dev ./ui/assets/img ./ui/assets/styles
    - name: Build css
      run: make css
    - name: Build dist
      run: make dist
    - name: Get current Zabbix version
      run: echo "ZABBIX_VERSION=$(cat configure | grep PACKAGE_VERSION= | cut -d = -f2 | tr -d \')" >> $GITHUB_ENV
    - name: Extract distr
      run: tar -zxf zabbix-${{ env.ZABBIX_VERSION }}.tar.gz
    - name: Change directory
      run: cd zabbix-${{ env.ZABBIX_VERSION }}/
    - name: Copy original sources
      run: cp "packages/$(lsb_release -i -s | tr '[:upper:]' '[:lower:]')/$(lsb_release -c -s).tar.gz" debian.tar.gz
    - name: Extract original sources
      run: tar -vzxf debian.tar.gz
    - name: Prepare build DEB
      run: dch -v "1:${{ env.ZABBIX_VERSION }}-1+$(lsb_release -c -s)" --distribution "$(lsb_release -c -s)" "Release ${{ env.ZABBIX_VERSION }}"
    - name: Build DEB
      run: dpkg-buildpackage -b
    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.DBMON_REPO_SERVER_PRIVATE_KEY }}
        known_hosts: ${{ secrets.DBMON_REPO_SERVER_KNOWN_HOSTS }}
    - name: Upload deb from dev server
      run: scp ../*.deb ${{ secrets.DBMON_REPO_SERVER_USER }}@${{ secrets.DBMON_REPO_SERVER }}:pkgs/$(lsb_release -i -s | tr '[:upper:]' '[:lower:]')/pool/main/$(lsb_release -c -s)/
    - name: Remove SSH key
      run: |
        if [ -d $HOME/.ssh ]; then rm -f $HOME/.ssh/id_rsa 2>/dev/null; fi
        if [ -d $HOME/.ssh ]; then rm -f $HOME/.ssh/known_hosts 2>/dev/null; fi
        if [ -d $HOME/.ssh ]; then rm -f $HOME/.ssh/config 2>/dev/null; fi
